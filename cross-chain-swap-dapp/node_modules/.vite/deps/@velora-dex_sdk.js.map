{
  "version": 3,
  "sources": ["../../@paraswap/core/src/types.ts", "../../@paraswap/core/src/constants.ts", "../../@paraswap/core/src/index.ts", "../../ts-essentials/dist/primitive/index.js", "../../ts-essentials/dist/built-in/index.js", "../../ts-essentials/dist/key-of-base/index.js", "../../ts-essentials/dist/strict-exclude/index.js", "../../ts-essentials/dist/strict-extract/index.js", "../../ts-essentials/dist/strict-omit/index.js", "../../ts-essentials/dist/writable/index.js", "../../ts-essentials/dist/async-or-sync/index.js", "../../ts-essentials/dist/async-or-sync-type/index.js", "../../ts-essentials/dist/dictionary/index.js", "../../ts-essentials/dist/dictionary-values/index.js", "../../ts-essentials/dist/merge/index.js", "../../ts-essentials/dist/merge-n/index.js", "../../ts-essentials/dist/newable/index.js", "../../ts-essentials/dist/non-never/index.js", "../../ts-essentials/dist/omit-properties/index.js", "../../ts-essentials/dist/opaque/index.js", "../../ts-essentials/dist/path-value/index.js", "../../ts-essentials/dist/paths/index.js", "../../ts-essentials/dist/pick-properties/index.js", "../../ts-essentials/dist/prettify/index.js", "../../ts-essentials/dist/safe-dictionary/index.js", "../../ts-essentials/dist/union-to-intersection/index.js", "../../ts-essentials/dist/value-of/index.js", "../../ts-essentials/dist/xor/index.js", "../../ts-essentials/dist/mark-optional/index.js", "../../ts-essentials/dist/mark-readonly/index.js", "../../ts-essentials/dist/mark-required/index.js", "../../ts-essentials/dist/mark-writable/index.js", "../../ts-essentials/dist/buildable/index.js", "../../ts-essentials/dist/deep-mark-optional/index.js", "../../ts-essentials/dist/deep-mark-required/index.js", "../../ts-essentials/dist/deep-non-nullable/index.js", "../../ts-essentials/dist/deep-nullable/index.js", "../../ts-essentials/dist/deep-omit/index.js", "../../ts-essentials/dist/deep-partial/index.js", "../../ts-essentials/dist/deep-pick/index.js", "../../ts-essentials/dist/deep-readonly/index.js", "../../ts-essentials/dist/deep-required/index.js", "../../ts-essentials/dist/deep-undefinable/index.js", "../../ts-essentials/dist/deep-writable/index.js", "../../ts-essentials/dist/strict-deep-omit/index.js", "../../ts-essentials/dist/strict-deep-pick/index.js", "../../ts-essentials/dist/optional-keys/index.js", "../../ts-essentials/dist/pick-keys/index.js", "../../ts-essentials/dist/readonly-keys/index.js", "../../ts-essentials/dist/required-keys/index.js", "../../ts-essentials/dist/writable-keys/index.js", "../../ts-essentials/dist/exact/index.js", "../../ts-essentials/dist/is-any/index.js", "../../ts-essentials/dist/is-never/index.js", "../../ts-essentials/dist/is-unknown/index.js", "../../ts-essentials/dist/is-tuple/index.js", "../../ts-essentials/dist/non-empty-object/index.js", "../../ts-essentials/dist/any-array/index.js", "../../ts-essentials/dist/array-or-single/index.js", "../../ts-essentials/dist/element-of/index.js", "../../ts-essentials/dist/head/index.js", "../../ts-essentials/dist/non-empty-array/index.js", "../../ts-essentials/dist/readonly-array-or-single/index.js", "../../ts-essentials/dist/tail/index.js", "../../ts-essentials/dist/tuple/index.js", "../../ts-essentials/dist/camel-case/index.js", "../../ts-essentials/dist/deep-camel-case-properties/index.js", "../../ts-essentials/dist/any-function/index.js", "../../ts-essentials/dist/predicate-function/index.js", "../../ts-essentials/dist/predicate-type/index.js", "../../ts-essentials/lib/functions/unreachable-case-error/index.ts", "../../ts-essentials/lib/functions/assert/index.ts", "../../ts-essentials/lib/functions/create-factory-with-constraint/index.ts", "../../ts-essentials/lib/functions/is-exact/index.ts", "../../ts-essentials/lib/functions/noop/index.ts", "../../ts-essentials/dist/awaited/index.js", "../../ts-essentials/lib/index.ts", "../../@velora-dex/sdk/src/constants.ts", "../../@velora-dex/sdk/src/helpers/misc.ts", "../../@velora-dex/sdk/src/methods/swap/spender.ts", "../../@velora-dex/sdk/src/helpers/approve.ts", "../../@velora-dex/sdk/src/methods/swap/approve.ts", "../../@velora-dex/sdk/src/helpers/token.ts", "../../@velora-dex/sdk/src/methods/swap/balance.ts", "../../@velora-dex/sdk/src/methods/swap/adapters.ts", "../../@velora-dex/sdk/src/methods/swap/helpers/normalizeRateOptions.ts", "../../@velora-dex/sdk/src/methods/swap/rates.ts", "../../@velora-dex/sdk/src/methods/swap/swapTx.ts", "../../@velora-dex/sdk/src/methods/swap/token.ts", "../../@velora-dex/sdk/src/methods/common/orders/buildOrderData.ts", "../../@velora-dex/sdk/src/methods/common/orders/misc.ts", "../../@velora-dex/sdk/src/methods/limitOrders/helpers/misc.ts", "../../@velora-dex/sdk/src/methods/nftOrders/helpers/buildOrderData.ts", "../../@velora-dex/sdk/src/methods/nftOrders/helpers/misc.ts", "../../@velora-dex/sdk/src/methods/swap/transaction.ts", "../../@velora-dex/sdk/src/methods/limitOrders/helpers/buildOrderData.ts", "../../@velora-dex/sdk/src/methods/limitOrders/buildOrder.ts", "../../@velora-dex/sdk/src/methods/limitOrders/signOrder.ts", "../../@velora-dex/sdk/src/methods/limitOrders/cancelOrder.ts", "../../@velora-dex/sdk/src/methods/common/orders/signature.ts", "../../@velora-dex/sdk/src/methods/common/orders/encoding.ts", "../../@velora-dex/sdk/src/methods/limitOrders/fillOrderDirectly.ts", "../../@velora-dex/sdk/src/methods/limitOrders/getOrders.ts", "../../@velora-dex/sdk/src/methods/limitOrders/postOrder.ts", "../../@velora-dex/sdk/src/methods/limitOrders/approveForOrder.ts", "../../@velora-dex/sdk/src/methods/limitOrders/getOrdersContract.ts", "../../@velora-dex/sdk/src/methods/limitOrders/transaction.ts", "../../@velora-dex/sdk/src/methods/nftOrders/buildOrder.ts", "../../@velora-dex/sdk/src/methods/nftOrders/signOrder.ts", "../../@velora-dex/sdk/src/methods/nftOrders/cancelOrder.ts", "../../@velora-dex/sdk/src/methods/nftOrders/getOrders.ts", "../../@velora-dex/sdk/src/methods/nftOrders/postOrder.ts", "../../@velora-dex/sdk/src/methods/nftOrders/getOrdersContract.ts", "../../@velora-dex/sdk/src/methods/nftOrders/approveForOrder.ts", "../../@velora-dex/sdk/src/methods/nftOrders/transaction.ts", "../../@velora-dex/sdk/src/helpers/fetchers/axios.ts", "../../@velora-dex/sdk/src/helpers/fetchers/fetch.ts", "../../@velora-dex/sdk/src/helpers/providers/ethers.ts", "../../@velora-dex/sdk/src/helpers/providers/ethersV6.ts", "../../@velora-dex/sdk/src/helpers/providers/helpers.ts", "../../@velora-dex/sdk/src/helpers/providers/web3.ts", "../../@velora-dex/sdk/src/helpers/providers/viem.ts", "../../@velora-dex/sdk/src/methods/delta/getDeltaContract.ts", "../../@velora-dex/sdk/src/methods/delta/getPartnerFee.ts", "../../@velora-dex/sdk/src/methods/delta/helpers/buildDeltaOrderData.ts", "../../@velora-dex/sdk/src/methods/delta/helpers/types.ts", "../../@velora-dex/sdk/src/methods/delta/buildDeltaOrder.ts", "../../@velora-dex/sdk/src/methods/delta/buildCrosschainOrderBridge.ts", "../../@velora-dex/sdk/src/methods/delta/postDeltaOrder.ts", "../../@velora-dex/sdk/src/methods/delta/helpers/misc.ts", "../../@velora-dex/sdk/src/methods/delta/signDeltaOrder.ts", "../../@velora-dex/sdk/src/methods/delta/getDeltaPrice.ts", "../../@velora-dex/sdk/src/methods/delta/getDeltaOrders.ts", "../../@velora-dex/sdk/src/methods/delta/approveForDelta.ts", "../../@velora-dex/sdk/src/methods/delta/getBridgeInfo.ts", "../../@velora-dex/sdk/src/methods/delta/getMulticallHandlers.ts", "../../@velora-dex/sdk/src/methods/delta/isTokenSupportedInDelta.ts", "../../@velora-dex/sdk/src/methods/quote/getQuote.ts", "../../@velora-dex/sdk/src/methods/delta/helpers/buildCancelDeltaOrderData.ts", "../../@velora-dex/sdk/src/methods/delta/cancelDeltaOrder.ts", "../../@velora-dex/sdk/src/sdk/partial.ts", "../../@velora-dex/sdk/src/methods/swap/index.ts", "../../@velora-dex/sdk/src/methods/limitOrders/index.ts", "../../@velora-dex/sdk/src/methods/delta/index.ts", "../../@velora-dex/sdk/src/methods/nftOrders/index.ts", "../../@velora-dex/sdk/src/sdk/full.ts", "../../@velora-dex/sdk/src/sdk/simple.ts"],
  "sourcesContent": ["import { SwapSide } from './constants';\n\nexport type Address = string;\nexport type NumberAsString = string;\n\nexport type Adapters = {\n  [exchangeKey: string]: { adapter: Address; index: number }[];\n};\n\nexport type OptimalRoute = {\n  percent: number;\n  swaps: OptimalSwap[];\n};\n\nexport type OptimalSwap = {\n  srcToken: Address;\n  srcDecimals: number;\n  destToken: Address;\n  destDecimals: number;\n  swapExchanges: OptimalSwapExchange<any>[];\n};\n\nexport type OptimalSwapExchange<T> = {\n  exchange: string;\n  srcAmount: NumberAsString;\n  destAmount: NumberAsString;\n  percent: number;\n  data?: T;\n  poolAddresses?: Array<Address>;\n};\n\nexport type OptionalRate = {\n  exchange: string;\n  srcAmount: NumberAsString;\n  destAmount: NumberAsString;\n  unit?: NumberAsString;\n  data?: any;\n};\n\nexport type OptimalRate = {\n  blockNumber: number;\n  network: number;\n  srcToken: Address;\n  srcDecimals: number;\n  srcAmount: NumberAsString;\n  srcUSD: NumberAsString | null;\n  destToken: Address;\n  destDecimals: number;\n  destAmount: NumberAsString;\n  destUSD: NumberAsString | null;\n  bestRoute: OptimalRoute[];\n  gasCostUSD: NumberAsString;\n  gasCost: NumberAsString;\n  gasCostL1Wei?: string; // L1 surcharge on optimism\n  others?: OptionalRate[];\n  side: SwapSide;\n  contractMethod: string;\n  tokenTransferProxy: Address;\n  contractAddress: Address;\n  maxImpact?: number;\n  maxUSDImpact?: number;\n  maxImpactReached?: boolean;\n  partner?: string;\n  partnerFee: number;\n  hmac: string;\n  version: ParaSwapVersion;\n};\n\nexport enum ParaSwapVersion {\n  V5 = '5',\n  V6 = '6.2',\n}\n", "export enum SwapSide {\n  BUY = 'BUY',\n  SELL = 'SELL',\n}\n\nexport enum ContractMethodV5 {\n  swapOnUniswap = 'swapOnUniswap',\n  buyOnUniswap = 'buyOnUniswap',\n  swapOnUniswapFork = 'swapOnUniswapFork',\n  buyOnUniswapFork = 'buyOnUniswapFork',\n  swapOnUniswapV2Fork = 'swapOnUniswapV2Fork',\n  buyOnUniswapV2Fork = 'buyOnUniswapV2Fork',\n  simpleBuy = 'simpleBuy',\n  simpleSwap = 'simpleSwap',\n  multiSwap = 'multiSwap',\n  megaSwap = 'megaSwap',\n  protectedMultiSwap = 'protectedMultiSwap',\n  protectedMegaSwap = 'protectedMegaSwap',\n  protectedSimpleSwap = 'protectedSimpleSwap',\n  protectedSimpleBuy = 'protectedSimpleBuy',\n  swapOnZeroXv2 = 'swapOnZeroXv2',\n  swapOnZeroXv4 = 'swapOnZeroXv4',\n  buy = 'buy', // TODO: remove this in future\n\n  directUniV3Swap = 'directUniV3Swap',\n  directUniV3Buy = 'directUniV3Buy',\n  directCurveV1Swap = 'directCurveV1Swap',\n  directCurveV2Swap = 'directCurveV2Swap',\n  directBalancerV2GivenInSwap = 'directBalancerV2GivenInSwap',\n  directBalancerV2GivenOutSwap = 'directBalancerV2GivenOutSwap',\n}\n\nexport enum ContractMethodV6 {\n  swapExactAmountIn = 'swapExactAmountIn',\n  swapExactAmountOut = 'swapExactAmountOut',\n  swapExactAmountInOnUniswapV2 = 'swapExactAmountInOnUniswapV2',\n  swapExactAmountOutOnUniswapV2 = 'swapExactAmountOutOnUniswapV2',\n  swapExactAmountInOnUniswapV3 = 'swapExactAmountInOnUniswapV3',\n  swapExactAmountOutOnUniswapV3 = 'swapExactAmountOutOnUniswapV3',\n  swapExactAmountInOnBalancerV2 = 'swapExactAmountInOnBalancerV2',\n  swapExactAmountOutOnBalancerV2 = 'swapExactAmountOutOnBalancerV2',\n  swapExactAmountInOnCurveV1 = 'swapExactAmountInOnCurveV1',\n  swapExactAmountInOnCurveV2 = 'swapExactAmountInOnCurveV2',\n  swapOnAugustusRFQTryBatchFill = 'swapOnAugustusRFQTryBatchFill',\n  swapExactAmountInOutOnMakerPSM = 'swapExactAmountInOutOnMakerPSM',\n}\n\nexport const ContractMethod = { ...ContractMethodV5, ...ContractMethodV6 };\n\nexport type ContractMethod = ContractMethodV5 | ContractMethodV6;\n\nexport const DirectContractMethodsWithFeeModel: ContractMethod[] = [\n  ContractMethodV5.directUniV3Swap,\n  ContractMethodV5.directUniV3Buy,\n  ContractMethodV5.directCurveV1Swap,\n  ContractMethodV5.directCurveV2Swap,\n  ContractMethodV5.directBalancerV2GivenInSwap,\n  ContractMethodV5.directBalancerV2GivenOutSwap,\n\n  ContractMethodV6.swapExactAmountInOnUniswapV2,\n  ContractMethodV6.swapExactAmountOutOnUniswapV2,\n  ContractMethodV6.swapExactAmountInOnUniswapV3,\n  ContractMethodV6.swapExactAmountOutOnUniswapV3,\n  ContractMethodV6.swapExactAmountInOnBalancerV2,\n  ContractMethodV6.swapExactAmountOutOnBalancerV2,\n  ContractMethodV6.swapExactAmountInOnCurveV1,\n  ContractMethodV6.swapExactAmountInOnCurveV2,\n];\n\nexport const DirectContractMethods = [\n  ContractMethodV5.swapOnUniswap,\n  ContractMethodV5.buyOnUniswap,\n  ContractMethodV5.swapOnUniswapFork,\n  ContractMethodV5.buyOnUniswapFork,\n  ContractMethodV5.swapOnUniswapV2Fork,\n  ContractMethodV5.buyOnUniswapV2Fork,\n  ContractMethodV5.swapOnZeroXv2,\n  ContractMethodV5.swapOnZeroXv4,\n\n  ContractMethodV6.swapOnAugustusRFQTryBatchFill,\n  ContractMethodV6.swapExactAmountInOutOnMakerPSM,\n].concat(DirectContractMethodsWithFeeModel);\n", "export {\n  Address,\n  NumberAsString,\n  Adapters,\n  OptimalRoute,\n  OptimalSwap,\n  OptimalSwapExchange,\n  OptionalRate,\n  OptimalRate,\n  ParaSwapVersion\n} from './types';\n\nexport { SwapSide, ContractMethod, ContractMethodV5, ContractMethodV6, DirectContractMethods } from './constants';\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcHJpbWl0aXZlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBQcmltaXRpdmUgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgYmlnaW50IHwgc3ltYm9sIHwgdW5kZWZpbmVkIHwgbnVsbDtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvYnVpbHQtaW4vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaW1pdGl2ZSB9IGZyb20gXCIuLi9wcmltaXRpdmVcIjtcblxuZXhwb3J0IHR5cGUgQnVpbHRpbiA9IFByaW1pdGl2ZSB8IEZ1bmN0aW9uIHwgRGF0ZSB8IEVycm9yIHwgUmVnRXhwO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIva2V5LW9mLWJhc2UvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIEtleW9mQmFzZSA9IGtleW9mIGFueTtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvc3RyaWN0LWV4Y2x1ZGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIFN0cmljdEV4Y2x1ZGU8VW5pb25UeXBlLCBFeGNsdWRlZE1lbWJlcnMgZXh0ZW5kcyBVbmlvblR5cGU+ID0gRXhjbHVkZTxVbmlvblR5cGUsIEV4Y2x1ZGVkTWVtYmVycz47XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvc3RyaWN0LWV4dHJhY3QvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIFN0cmljdEV4dHJhY3Q8VHlwZSwgVW5pb24gZXh0ZW5kcyBQYXJ0aWFsPFR5cGU+PiA9IEV4dHJhY3Q8VHlwZSwgVW5pb24+O1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvc3RyaWN0LW9taXQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFueUFycmF5IH0gZnJvbSBcIi4uL2FueS1hcnJheVwiO1xuaW1wb3J0IHsgQW55UmVjb3JkIH0gZnJvbSBcIi4uL2FueS1yZWNvcmRcIjtcblxuZXhwb3J0IHR5cGUgU3RyaWN0T21pdDxUeXBlIGV4dGVuZHMgQW55UmVjb3JkLCBLZXlzIGV4dGVuZHMga2V5b2YgVHlwZT4gPSBUeXBlIGV4dGVuZHMgQW55QXJyYXlcbiAgPyBuZXZlclxuICA6IE9taXQ8VHlwZSwgS2V5cz47XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvd3JpdGFibGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIFdyaXRhYmxlPFR5cGU+ID0geyAtcmVhZG9ubHkgW0tleSBpbiBrZXlvZiBUeXBlXTogVHlwZVtLZXldIH07XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvYXN5bmMtb3Itc3luYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgQXN5bmNPclN5bmM8VHlwZT4gPSBQcm9taXNlTGlrZTxUeXBlPiB8IFR5cGU7XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvYXN5bmMtb3Itc3luYy10eXBlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY09yU3luYyB9IGZyb20gXCIuLi9hc3luYy1vci1zeW5jXCI7XG5cbmV4cG9ydCB0eXBlIEFzeW5jT3JTeW5jVHlwZTxBc3luY09yU3luY1R5cGU+ID0gQXN5bmNPclN5bmNUeXBlIGV4dGVuZHMgQXN5bmNPclN5bmM8aW5mZXIgVHlwZT4gPyBUeXBlIDogbmV2ZXI7XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGljdGlvbmFyeS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2V5b2ZCYXNlIH0gZnJvbSBcIi4uL2tleS1vZi1iYXNlXCI7XG5cbmV4cG9ydCB0eXBlIERpY3Rpb25hcnk8VHlwZSwgS2V5cyBleHRlbmRzIEtleW9mQmFzZSA9IHN0cmluZz4gPSB7IFtrZXkgaW4gS2V5c106IFR5cGUgfTtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGljdGlvbmFyeS12YWx1ZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGRlcHJlY2F0ZWQgcGxlYXNlIHVzZSBgVmFsdWVPZmAgaW5zdGVhZFxuICovXG5leHBvcnQgdHlwZSBEaWN0aW9uYXJ5VmFsdWVzPFR5cGU+ID0gVHlwZVtrZXlvZiBUeXBlXTtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbWVyZ2UvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByZXR0aWZ5IH0gZnJvbSBcIi4uL3ByZXR0aWZ5XCI7XG5cbmV4cG9ydCB0eXBlIE1lcmdlPE9iamVjdDEsIE9iamVjdDI+ID0gUHJldHRpZnk8T21pdDxPYmplY3QxLCBrZXlvZiBPYmplY3QyPiAmIE9iamVjdDI+O1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbWVyZ2Utbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVyZ2UgfSBmcm9tIFwiLi4vbWVyZ2VcIjtcblxudHlwZSBfTWVyZ2VOPFR1cGxlIGV4dGVuZHMgcmVhZG9ubHkgYW55W10sIFJlc3VsdD4gPSBUdXBsZSBleHRlbmRzIHJlYWRvbmx5IFtpbmZlciBIZWFkLCAuLi5pbmZlciBUYWlsXVxuICA/IF9NZXJnZU48VGFpbCwgTWVyZ2U8UmVzdWx0LCBIZWFkPj5cbiAgOiBSZXN1bHQ7XG5cbmV4cG9ydCB0eXBlIE1lcmdlTjxUdXBsZSBleHRlbmRzIHJlYWRvbmx5IGFueVtdPiA9IF9NZXJnZU48VHVwbGUsIHt9PjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbmV3YWJsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBOZXdhYmxlPFJldHVyblR5cGU+IHtcbiAgbmV3ICguLi5hcmdzOiBhbnlbXSk6IFJldHVyblR5cGU7XG59XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbm9uLW5ldmVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBOb25OZXZlcjxUeXBlIGV4dGVuZHMge30+ID0gUGljazxcbiAgVHlwZSxcbiAgeyBbS2V5IGluIGtleW9mIFR5cGVdOiBUeXBlW0tleV0gZXh0ZW5kcyBuZXZlciA/IG5ldmVyIDogS2V5IH1ba2V5b2YgVHlwZV1cbj47XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvb21pdC1wcm9wZXJ0aWVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBPbWl0UHJvcGVydGllczxUeXBlLCBWYWx1ZT4gPSB7IFtLZXkgaW4ga2V5b2YgVHlwZSBhcyBUeXBlW0tleV0gZXh0ZW5kcyBWYWx1ZSA/IG5ldmVyIDogS2V5XTogVHlwZVtLZXldIH07XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvb3BhcXVlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIFN0cmluZ0xpdGVyYWw8VHlwZT4gPSBUeXBlIGV4dGVuZHMgc3RyaW5nID8gKHN0cmluZyBleHRlbmRzIFR5cGUgPyBuZXZlciA6IFR5cGUpIDogbmV2ZXI7XG5cbmRlY2xhcmUgY29uc3QgX19PUEFRVUVfVFlQRV9fOiB1bmlxdWUgc3ltYm9sO1xuXG5leHBvcnQgdHlwZSBXaXRoT3BhcXVlPFRva2VuIGV4dGVuZHMgc3RyaW5nPiA9IHtcbiAgcmVhZG9ubHkgW19fT1BBUVVFX1RZUEVfX106IFRva2VuO1xufTtcblxuZXhwb3J0IHR5cGUgT3BhcXVlPFR5cGUsIFRva2VuIGV4dGVuZHMgc3RyaW5nPiA9IFRva2VuIGV4dGVuZHMgU3RyaW5nTGl0ZXJhbDxUb2tlbj4gPyBUeXBlICYgV2l0aE9wYXF1ZTxUb2tlbj4gOiBuZXZlcjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcGF0aC12YWx1ZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJldHRpZnkgfSBmcm9tIFwiLi4vcHJldHRpZnlcIjtcblxuLy8gVE9ETzogbWVyZ2UgdG8gRXh0cmFjdEZyb21BcnJheVxudHlwZSBFeHRyYWN0RnJvbU9iamVjdDxPYmogZXh0ZW5kcyBSZWNvcmQ8UHJvcGVydHlLZXksIHVua25vd24+LCBLZXk+ID0gS2V5IGV4dGVuZHMga2V5b2YgT2JqXG4gID8gT2JqW0tleV1cbiAgOiBLZXkgZXh0ZW5kcyBrZXlvZiBOb25OdWxsYWJsZTxPYmo+XG4gID8gTm9uTnVsbGFibGU8T2JqPltLZXldIHwgdW5kZWZpbmVkXG4gIDogdW5kZWZpbmVkO1xuXG4vLyBUT0RPOiBtZXJnZSB0byBFeHRyYWN0RnJvbU9iamVjdFxudHlwZSBFeHRyYWN0RnJvbUFycmF5PEFyciBleHRlbmRzIHJlYWRvbmx5IGFueVtdLCBLZXk+ID0gYW55W10gZXh0ZW5kcyBBcnJcbiAgPyBBcnIgZXh0ZW5kcyByZWFkb25seSAoaW5mZXIgVClbXVxuICAgID8gVCB8IHVuZGVmaW5lZFxuICAgIDogdW5kZWZpbmVkXG4gIDogS2V5IGV4dGVuZHMga2V5b2YgQXJyXG4gID8gQXJyW0tleV1cbiAgOiB1bmRlZmluZWQ7XG5cbnR5cGUgR2V0V2l0aEFycmF5PFR5cGUsIFBhdGgsIFByZXR0aWZpZWRUeXBlID0gUHJldHRpZnk8VHlwZT4+ID0gUGF0aCBleHRlbmRzIFtdXG4gID8gVHlwZVxuICA6IFBhdGggZXh0ZW5kcyBbaW5mZXIgS2V5LCAuLi5pbmZlciBSZXN0XVxuICA/IFByZXR0aWZpZWRUeXBlIGV4dGVuZHMgUmVjb3JkPFByb3BlcnR5S2V5LCB1bmtub3duPlxuICAgID8gR2V0V2l0aEFycmF5PEV4dHJhY3RGcm9tT2JqZWN0PFByZXR0aWZpZWRUeXBlLCBLZXk+LCBSZXN0PlxuICAgIDogVHlwZSBleHRlbmRzIHJlYWRvbmx5IGFueVtdXG4gICAgPyBHZXRXaXRoQXJyYXk8RXh0cmFjdEZyb21BcnJheTxUeXBlLCBLZXk+LCBSZXN0PlxuICAgIDogdW5kZWZpbmVkXG4gIDogbmV2ZXI7XG5cbnR5cGUgUGF0aDxUeXBlPiA9IFR5cGUgZXh0ZW5kcyBgJHtpbmZlciBLZXl9LiR7aW5mZXIgUmVzdH1gXG4gID8gW0tleSwgLi4uUGF0aDxSZXN0Pl1cbiAgOiBUeXBlIGV4dGVuZHMgYCR7aW5mZXIgS2V5fWBcbiAgPyBbS2V5XVxuICA6IFtdO1xuXG5leHBvcnQgdHlwZSBQYXRoVmFsdWU8VHlwZSwgU3RyaW5nUGF0aD4gPSBHZXRXaXRoQXJyYXk8VHlwZSwgUGF0aDxTdHJpbmdQYXRoPj47XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcGF0aHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElzTmV2ZXIgfSBmcm9tIFwiLi4vaXMtbmV2ZXJcIjtcbmltcG9ydCB7IENyZWF0ZVR5cGVPcHRpb25zIH0gZnJvbSBcIi4uL2NyZWF0ZS10eXBlLW9wdGlvbnNcIjtcbmltcG9ydCB7IFZhbHVlT2YgfSBmcm9tIFwiLi4vdmFsdWUtb2ZcIjtcbmltcG9ydCB7IEhhc1BhcnNhYmxlUGF0aCB9IGZyb20gXCIuLi9oYXMtcGFyc2FibGUtcGF0aFwiO1xuXG50eXBlIFBhdGhhYmxlID0gc3RyaW5nIHwgbnVtYmVyO1xuXG50eXBlIERlZmF1bHRSZWN1cnNpdmVQYXRoc09wdGlvbnMgPSB7XG4gIGRlcHRoOiBbXTtcbn07XG5cbi8qKlxuICogQHBhcmFtIGRlcHRoIFRoaXMgb3B0aW9uIGNvdW50cyB0aGUgbnVtYmVyIG9mIHJlY3Vyc2l2ZSBjYWxscyBpblxuICogYFJlY3Vyc2l2ZVBhdGhzT3B0aW9uc1snZGVwdGgnXVsnbGVuZ3RoJ11gLiBVc2VkIGluIGNvbWJpbmF0aW9uIHdpdGhcbiAqIGBQYXRoc09wdGlvbnNbJ2RlcHRoJ11gXG4gKi9cbnR5cGUgUmVjdXJzaXZlUGF0aHNPcHRpb25zID0ge1xuICBkZXB0aDogYW55W107XG59O1xuXG4vKipcbiAqIEBwYXJhbSBkZXB0aCBCeSBkZWZhdWx0LCB0aGUgZGVwdGggb3B0aW9uIGlzIHNldCB0byA3LiBJdCBzaG91bGQgY292ZXIgdGhlXG4gKiBtYWpvcml0eSBvZiB1c2UgY2FzZXMuIElmIGJ5IGFueSBjaGFuY2UgaXQgZG9lc24ndCBmaXQgeW91LCBmZWVsIGZyZWUgdG9cbiAqIGluY3JlYXNlIHRoZSB2YWx1ZS4gSG93ZXZlciwgdGhpcyBtYXkgaW5jcmVhc2UgdGhlIGNoYW5jZSBvZiBnZXR0aW5nXG4gKiBgVHlwZSBpbnN0YW50aWF0aW9uIGlzIGV4Y2Vzc2l2ZWx5IGRlZXAgYW5kIHBvc3NpYmx5IGluZmluaXRlYCBlcnJvci5cbiAqXG4gKiBAcGFyYW0gYW55QXJyYXlJbmRleEFjY2Vzc29yIEJ5IGRlZmF1bHQgdGhlcmUgaXMgbm8gd2lsZGNhcmQgYWNjZXNzIHRvXG4gKiBhcnJheSBpbmRpY2VzIC0gdXNhZ2UgbXVzdCBiZSBpbnRlbnRpb25hbGx5IGNvbmZpZ3VyZWQuXG4gKi9cbnR5cGUgRGVmYXVsdFBhdGhzT3B0aW9ucyA9IHtcbiAgZGVwdGg6IDc7XG4gIGFueUFycmF5SW5kZXhBY2Nlc3NvcjogYCR7bnVtYmVyfWA7XG59O1xuXG4vKipcbiAqIEBwYXJhbSBkZXB0aCBUaGlzIG9wdGlvbiByZXN0cmljdHMgdGhlIGRlcHRoIG9mIHRoZSBwYXRocyBsb29rdXAgYW5kIHJlbW92ZXMgYFR5cGVcbiAqIGluc3RhbnRpYXRpb24gaXMgZXhjZXNzaXZlbHkgZGVlcCBhbmQgcG9zc2libHkgaW5maW5pdGVgIGVycm9ycyBmb3JcbiAqIHBvdGVudGlhbGx5IGluZmluaXRlIHR5cGVzLlxuICpcbiAqIEBwYXJhbSBhbnlBcnJheUluZGV4QWNjZXNzb3IgVGhpcyB3aWxkY2FyZCB3aWxsIHNhdGlzZnkgYW55IGFycmF5IGluZGV4IGlmIGRlZmluZWQuXG4gKi9cbnR5cGUgUGF0aHNPcHRpb25zID0ge1xuICBkZXB0aDogbnVtYmVyO1xuICBhbnlBcnJheUluZGV4QWNjZXNzb3I6IHN0cmluZztcbn07XG5cbnR5cGUgQXBwZW5kPFR1cGxlIGV4dGVuZHMgYW55W10+ID0gWy4uLlR1cGxlLCAwXTtcblxudHlwZSBSZWN1cnNpdmVQYXRoczxcbiAgVHlwZSxcbiAgVXNlck9wdGlvbnMgZXh0ZW5kcyBSZXF1aXJlZDxQYXRoc09wdGlvbnM+LFxuICBDYWxsT3B0aW9ucyBleHRlbmRzIFJlY3Vyc2l2ZVBhdGhzT3B0aW9ucyxcbj4gPSBJc05ldmVyPGtleW9mIFR5cGU+IGV4dGVuZHMgdHJ1ZVxuICA/IG5ldmVyXG4gIDogLy8gYE5vbk51bGxhYmxlYCByZW1vdmVzIGB1bmRlZmluZWRgIHdoZW4gcGFydGlhbCBwcm9wZXJ0aWVzIGV4aXN0IGluIG9iamVjdFxuICAgIE5vbk51bGxhYmxlPFxuICAgICAgVmFsdWVPZjx7XG4gICAgICAgIFtLZXkgaW4ga2V5b2YgVHlwZV06IEtleSBleHRlbmRzIFBhdGhhYmxlXG4gICAgICAgICAgP1xuICAgICAgICAgICAgICB8IGAke0FueUFycmF5SW5kZXhBY2Nlc3Nvck9yS2V5PEtleSwgVXNlck9wdGlvbnM+fWBcbiAgICAgICAgICAgICAgfCAoQ2FsbE9wdGlvbnNbXCJkZXB0aFwiXVtcImxlbmd0aFwiXSBleHRlbmRzIFVzZXJPcHRpb25zW1wiZGVwdGhcIl1cbiAgICAgICAgICAgICAgICAgID8gLy8gU3RvcCBhdCB0aGUgY29uZmlndXJlZCBkZXB0aFxuICAgICAgICAgICAgICAgICAgICBuZXZlclxuICAgICAgICAgICAgICAgICAgOiBUeXBlW0tleV0gZXh0ZW5kcyBpbmZlciBWYWx1ZVxuICAgICAgICAgICAgICAgICAgPyBWYWx1ZSBleHRlbmRzIFZhbHVlXG4gICAgICAgICAgICAgICAgICAgID8gLy8gQXZvaWQgY2FsbGluZyBgVW5zYWZlUGF0aHNgIHRvIGtlZXAgYENhbGxPcHRpb25zYCBsb2NhbGx5XG4gICAgICAgICAgICAgICAgICAgICAgSGFzUGFyc2FibGVQYXRoPFZhbHVlPiBleHRlbmRzIHRydWVcbiAgICAgICAgICAgICAgICAgICAgICA/IFJlY3Vyc2l2ZVBhdGhzPFxuICAgICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgVXNlck9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXB0aDogQXBwZW5kPENhbGxPcHRpb25zW1wiZGVwdGhcIl0+O1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA+IGV4dGVuZHMgaW5mZXIgUmVzdFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBJc05ldmVyPFJlc3Q+IGV4dGVuZHMgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5ldmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogUmVzdCBleHRlbmRzIFBhdGhhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gYCR7QW55QXJyYXlJbmRleEFjY2Vzc29yT3JLZXk8S2V5LCBVc2VyT3B0aW9ucz59LiR7UmVzdH1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV2ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV2ZXJcbiAgICAgICAgICAgICAgICAgICAgICA6IG5ldmVyXG4gICAgICAgICAgICAgICAgICAgIDogbmV2ZXJcbiAgICAgICAgICAgICAgICAgIDogbmV2ZXIpXG4gICAgICAgICAgOiBuZXZlcjtcbiAgICAgIH0+XG4gICAgPjtcblxudHlwZSBVbnNhZmVQYXRoczxUeXBlLCBPcHRpb25zIGV4dGVuZHMgUmVxdWlyZWQ8UGF0aHNPcHRpb25zPj4gPSBUeXBlIGV4dGVuZHMgVHlwZVxuICA/IEhhc1BhcnNhYmxlUGF0aDxUeXBlPiBleHRlbmRzIHRydWVcbiAgICA/IFJlY3Vyc2l2ZVBhdGhzPFR5cGUsIE9wdGlvbnMsIERlZmF1bHRSZWN1cnNpdmVQYXRoc09wdGlvbnM+XG4gICAgOiBuZXZlclxuICA6IG5ldmVyO1xuXG50eXBlIEFueUFycmF5SW5kZXhBY2Nlc3Nvck9yS2V5PEtleSBleHRlbmRzIFBhdGhhYmxlLCBVc2VyT3B0aW9ucyBleHRlbmRzIFJlcXVpcmVkPFBhdGhzT3B0aW9ucz4+ID0gS2V5IGV4dGVuZHMgbnVtYmVyXG4gID8gS2V5IHwgVXNlck9wdGlvbnNbXCJhbnlBcnJheUluZGV4QWNjZXNzb3JcIl1cbiAgOiBLZXk7XG5cbmV4cG9ydCB0eXBlIFBhdGhzPFR5cGUsIE92ZXJyaWRlUGF0aE9wdGlvbnMgZXh0ZW5kcyBQYXJ0aWFsPFBhdGhzT3B0aW9ucz4gPSB7fT4gPSBVbnNhZmVQYXRoczxcbiAgVHlwZSxcbiAgQ3JlYXRlVHlwZU9wdGlvbnM8UGF0aHNPcHRpb25zLCBPdmVycmlkZVBhdGhPcHRpb25zLCBEZWZhdWx0UGF0aHNPcHRpb25zPlxuPjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcGljay1wcm9wZXJ0aWVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBQaWNrUHJvcGVydGllczxUeXBlLCBWYWx1ZT4gPSB7XG4gIFtLZXkgaW4ga2V5b2YgVHlwZSBhcyBUeXBlW0tleV0gZXh0ZW5kcyBWYWx1ZSA/IEtleSA6IG5ldmVyXTogVHlwZVtLZXldO1xufTtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcHJldHRpZnkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIFByZXR0aWZ5PFR5cGU+ID0gVHlwZSBleHRlbmRzIEZ1bmN0aW9uXG4gID8gVHlwZVxuICA6IEV4dHJhY3Q8XG4gICAgICB7XG4gICAgICAgIFtLZXkgaW4ga2V5b2YgVHlwZV06IFR5cGVbS2V5XTtcbiAgICAgIH0sXG4gICAgICBUeXBlXG4gICAgPjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvc2FmZS1kaWN0aW9uYXJ5L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLZXlvZkJhc2UgfSBmcm9tIFwiLi4va2V5LW9mLWJhc2VcIjtcblxuZXhwb3J0IHR5cGUgU2FmZURpY3Rpb25hcnk8VHlwZSwgS2V5cyBleHRlbmRzIEtleW9mQmFzZSA9IHN0cmluZz4gPSB7IFtrZXkgaW4gS2V5c10/OiBUeXBlIH07XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvdW5pb24tdG8taW50ZXJzZWN0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBVbmlvblRvSW50ZXJzZWN0aW9uPFVuaW9uPiA9IChVbmlvbiBleHRlbmRzIGFueSA/IChhcmc6IFVuaW9uKSA9PiB2b2lkIDogbmV2ZXIpIGV4dGVuZHMgKFxuICBhcmc6IGluZmVyIEludGVyc2VjdGlvbixcbikgPT4gdm9pZFxuICA/IEludGVyc2VjdGlvblxuICA6IG5ldmVyO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvdmFsdWUtb2YvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFueUFycmF5IH0gZnJvbSBcIi4uL2FueS1hcnJheVwiO1xuaW1wb3J0IHsgQW55RnVuY3Rpb24gfSBmcm9tIFwiLi4vYW55LWZ1bmN0aW9uXCI7XG5pbXBvcnQgeyBQcmltaXRpdmUgfSBmcm9tIFwiLi4vcHJpbWl0aXZlXCI7XG5cbmV4cG9ydCB0eXBlIFZhbHVlT2Y8VHlwZT4gPSBUeXBlIGV4dGVuZHMgUHJpbWl0aXZlXG4gID8gVHlwZVxuICA6IFR5cGUgZXh0ZW5kcyBBbnlBcnJheVxuICA/IFR5cGVbbnVtYmVyXVxuICA6IFR5cGUgZXh0ZW5kcyBBbnlGdW5jdGlvblxuICA/IFJldHVyblR5cGU8VHlwZT5cbiAgOiBUeXBlW2tleW9mIFR5cGVdO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbWFyay1vcHRpb25hbC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uYWxLZXlzIH0gZnJvbSBcIi4uL29wdGlvbmFsLWtleXNcIjtcbmltcG9ydCB7IFByZXR0aWZ5IH0gZnJvbSBcIi4uL3ByZXR0aWZ5XCI7XG5cbmV4cG9ydCB0eXBlIE1hcmtPcHRpb25hbDxUeXBlLCBLZXlzIGV4dGVuZHMga2V5b2YgVHlwZT4gPSBUeXBlIGV4dGVuZHMgVHlwZVxuICA/IFByZXR0aWZ5PFBhcnRpYWw8VHlwZT4gJiBSZXF1aXJlZDxPbWl0PFR5cGUsIEtleXMgfCBPcHRpb25hbEtleXM8VHlwZT4+Pj5cbiAgOiBuZXZlcjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbWFyay1yZWFkb25seS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhZG9ubHlLZXlzIH0gZnJvbSBcIi4uL3JlYWRvbmx5LWtleXNcIjtcbmltcG9ydCB7IFdyaXRhYmxlIH0gZnJvbSBcIi4uL3dyaXRhYmxlXCI7XG5pbXBvcnQgeyBQcmV0dGlmeSB9IGZyb20gXCIuLi9wcmV0dGlmeVwiO1xuXG5leHBvcnQgdHlwZSBNYXJrUmVhZG9ubHk8VHlwZSwgS2V5cyBleHRlbmRzIGtleW9mIFR5cGU+ID0gVHlwZSBleHRlbmRzIFR5cGVcbiAgPyBQcmV0dGlmeTxSZWFkb25seTxUeXBlPiAmIFdyaXRhYmxlPE9taXQ8VHlwZSwgS2V5cyB8IFJlYWRvbmx5S2V5czxUeXBlICYgb2JqZWN0Pj4+PlxuICA6IG5ldmVyO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbWFyay1yZXF1aXJlZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJldHRpZnkgfSBmcm9tIFwiLi4vcHJldHRpZnlcIjtcblxuZXhwb3J0IHR5cGUgTWFya1JlcXVpcmVkPFR5cGUsIEtleXMgZXh0ZW5kcyBrZXlvZiBUeXBlPiA9IFR5cGUgZXh0ZW5kcyBUeXBlXG4gID8gUHJldHRpZnk8VHlwZSAmIFJlcXVpcmVkPE9taXQ8VHlwZSwgRXhjbHVkZTxrZXlvZiBUeXBlLCBLZXlzPj4+PlxuICA6IG5ldmVyO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbWFyay13cml0YWJsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV3JpdGFibGUgfSBmcm9tIFwiLi4vd3JpdGFibGVcIjtcbmltcG9ydCB7IFdyaXRhYmxlS2V5cyB9IGZyb20gXCIuLi93cml0YWJsZS1rZXlzXCI7XG5pbXBvcnQgeyBQcmV0dGlmeSB9IGZyb20gXCIuLi9wcmV0dGlmeVwiO1xuXG5leHBvcnQgdHlwZSBNYXJrV3JpdGFibGU8VHlwZSwgS2V5cyBleHRlbmRzIGtleW9mIFR5cGU+ID0gVHlwZSBleHRlbmRzIFR5cGVcbiAgPyBQcmV0dGlmeTxSZWFkb25seTxUeXBlPiAmIFdyaXRhYmxlPE9taXQ8VHlwZSwgRXhjbHVkZTxrZXlvZiBUeXBlLCBXcml0YWJsZUtleXM8VHlwZSAmIG9iamVjdD4gfCBLZXlzPj4+PlxuICA6IG5ldmVyO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvYnVpbGRhYmxlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWVwUGFydGlhbCB9IGZyb20gXCIuLi9kZWVwLXBhcnRpYWxcIjtcbmltcG9ydCB7IERlZXBXcml0YWJsZSB9IGZyb20gXCIuLi9kZWVwLXdyaXRhYmxlXCI7XG5cbmV4cG9ydCB0eXBlIEJ1aWxkYWJsZTxUeXBlPiA9IERlZXBQYXJ0aWFsPERlZXBXcml0YWJsZTxUeXBlPj47XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC1tYXJrLW9wdGlvbmFsL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNQYXJzYWJsZVBhdGggfSBmcm9tIFwiLi4vaGFzLXBhcnNhYmxlLXBhdGhcIjtcbmltcG9ydCB7IE1hcmtPcHRpb25hbCB9IGZyb20gXCIuLi9tYXJrLW9wdGlvbmFsXCI7XG5pbXBvcnQgeyBQYXRocyB9IGZyb20gXCIuLi9wYXRoc1wiO1xuaW1wb3J0IHsgUHJldHRpZnkgfSBmcm9tIFwiLi4vcHJldHRpZnlcIjtcbmltcG9ydCB7IFVuaW9uVG9UdXBsZSB9IGZyb20gXCIuLi91bmlvbi10by10dXBsZVwiO1xuXG50eXBlIFJlY3Vyc2l2ZURlZXBNYXJrT3B0aW9uYWxTaW5nbGVQYXRoPFR5cGUsIEtleVBhdGg+ID0gVHlwZSBleHRlbmRzIG9iamVjdFxuICA/IEtleVBhdGggZXh0ZW5kcyBgJHtpbmZlciBQcm9wZXJ0eUtleX0uJHtpbmZlciBSZXN0S2V5UGF0aH1gXG4gICAgPyB7XG4gICAgICAgIFtLZXkgaW4ga2V5b2YgVHlwZV06IEtleSBleHRlbmRzIFByb3BlcnR5S2V5XG4gICAgICAgICAgPyBQcmV0dGlmeTxSZWN1cnNpdmVEZWVwTWFya09wdGlvbmFsU2luZ2xlUGF0aDxUeXBlW0tleV0sIFJlc3RLZXlQYXRoPj5cbiAgICAgICAgICA6IFR5cGVbS2V5XTtcbiAgICAgIH1cbiAgICA6IFByZXR0aWZ5PE1hcmtPcHRpb25hbDxUeXBlLCBLZXlQYXRoICYga2V5b2YgVHlwZT4+XG4gIDogVHlwZTtcblxudHlwZSBSZWN1cnNpdmVEZWVwTWFya09wdGlvbmFsPEFjY3VtdWxhdG9yLCBLZXlQYXRocyBleHRlbmRzIHN0cmluZ1tdPiA9IEtleVBhdGhzIGV4dGVuZHMgW1xuICBpbmZlciBLZXlQYXRoLFxuICAuLi5pbmZlciBSZXN0S2V5UGF0aHMsXG5dXG4gID8gUmVzdEtleVBhdGhzIGV4dGVuZHMgc3RyaW5nW11cbiAgICA/IC8vIEtlZXAgYWxsIHRoZSBjaGFuZ2VzIGluIGBBY2N1bXVsYXRvcmBcbiAgICAgIFJlY3Vyc2l2ZURlZXBNYXJrT3B0aW9uYWw8UmVjdXJzaXZlRGVlcE1hcmtPcHRpb25hbFNpbmdsZVBhdGg8QWNjdW11bGF0b3IsIEtleVBhdGg+LCBSZXN0S2V5UGF0aHM+XG4gICAgOiBuZXZlclxuICA6IEFjY3VtdWxhdG9yO1xuXG5leHBvcnQgdHlwZSBEZWVwTWFya09wdGlvbmFsPFR5cGUsIEtleVBhdGhVbmlvbiBleHRlbmRzIFBhdGhzPFR5cGU+PiA9IEhhc1BhcnNhYmxlUGF0aDxUeXBlPiBleHRlbmRzIGZhbHNlXG4gID8gVHlwZVxuICA6IFJlY3Vyc2l2ZURlZXBNYXJrT3B0aW9uYWw8VHlwZSwgVW5pb25Ub1R1cGxlPEtleVBhdGhVbmlvbj4+O1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC1tYXJrLXJlcXVpcmVkL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNQYXJzYWJsZVBhdGggfSBmcm9tIFwiLi4vaGFzLXBhcnNhYmxlLXBhdGhcIjtcbmltcG9ydCB7IE1hcmtSZXF1aXJlZCB9IGZyb20gXCIuLi9tYXJrLXJlcXVpcmVkXCI7XG5pbXBvcnQgeyBQYXRocyB9IGZyb20gXCIuLi9wYXRoc1wiO1xuaW1wb3J0IHsgUHJldHRpZnkgfSBmcm9tIFwiLi4vcHJldHRpZnlcIjtcbmltcG9ydCB7IFVuaW9uVG9UdXBsZSB9IGZyb20gXCIuLi91bmlvbi10by10dXBsZVwiO1xuXG50eXBlIFJlY3Vyc2l2ZURlZXBNYXJrUmVxdWlyZWRTaW5nbGVQYXRoPFR5cGUsIEtleVBhdGg+ID0gVHlwZSBleHRlbmRzIG9iamVjdFxuICA/IEtleVBhdGggZXh0ZW5kcyBgJHtpbmZlciBQcm9wZXJ0eUtleX0uJHtpbmZlciBSZXN0S2V5UGF0aH1gXG4gICAgPyB7XG4gICAgICAgIFtLZXkgaW4ga2V5b2YgVHlwZV06IEtleSBleHRlbmRzIFByb3BlcnR5S2V5XG4gICAgICAgICAgPyBQcmV0dGlmeTxSZWN1cnNpdmVEZWVwTWFya1JlcXVpcmVkU2luZ2xlUGF0aDxUeXBlW0tleV0sIFJlc3RLZXlQYXRoPj5cbiAgICAgICAgICA6IFR5cGVbS2V5XTtcbiAgICAgIH1cbiAgICA6IFByZXR0aWZ5PE1hcmtSZXF1aXJlZDxUeXBlLCBLZXlQYXRoICYga2V5b2YgVHlwZT4+XG4gIDogVHlwZTtcblxudHlwZSBSZWN1cnNpdmVEZWVwTWFya1JlcXVpcmVkPEFjY3VtdWxhdG9yLCBLZXlQYXRocyBleHRlbmRzIHN0cmluZ1tdPiA9IEtleVBhdGhzIGV4dGVuZHMgW1xuICBpbmZlciBLZXlQYXRoLFxuICAuLi5pbmZlciBSZXN0S2V5UGF0aHMsXG5dXG4gID8gUmVzdEtleVBhdGhzIGV4dGVuZHMgc3RyaW5nW11cbiAgICA/IC8vIEtlZXAgYWxsIHRoZSBjaGFuZ2VzIGluIGBBY2N1bXVsYXRvcmBcbiAgICAgIFJlY3Vyc2l2ZURlZXBNYXJrUmVxdWlyZWQ8UmVjdXJzaXZlRGVlcE1hcmtSZXF1aXJlZFNpbmdsZVBhdGg8QWNjdW11bGF0b3IsIEtleVBhdGg+LCBSZXN0S2V5UGF0aHM+XG4gICAgOiBuZXZlclxuICA6IEFjY3VtdWxhdG9yO1xuXG5leHBvcnQgdHlwZSBEZWVwTWFya1JlcXVpcmVkPFR5cGUsIEtleVBhdGhVbmlvbiBleHRlbmRzIFBhdGhzPFR5cGU+PiA9IEhhc1BhcnNhYmxlUGF0aDxUeXBlPiBleHRlbmRzIGZhbHNlXG4gID8gVHlwZVxuICA6IFJlY3Vyc2l2ZURlZXBNYXJrUmVxdWlyZWQ8VHlwZSwgVW5pb25Ub1R1cGxlPEtleVBhdGhVbmlvbj4+O1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC1ub24tbnVsbGFibGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1aWx0aW4gfSBmcm9tIFwiLi4vYnVpbHQtaW5cIjtcblxuZXhwb3J0IHR5cGUgRGVlcE5vbk51bGxhYmxlPFR5cGU+ID0gVHlwZSBleHRlbmRzIEJ1aWx0aW5cbiAgPyBOb25OdWxsYWJsZTxUeXBlPlxuICA6IFR5cGUgZXh0ZW5kcyBNYXA8aW5mZXIgS2V5cywgaW5mZXIgVmFsdWVzPlxuICA/IE1hcDxEZWVwTm9uTnVsbGFibGU8S2V5cz4sIERlZXBOb25OdWxsYWJsZTxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyBSZWFkb25seU1hcDxpbmZlciBLZXlzLCBpbmZlciBWYWx1ZXM+XG4gID8gUmVhZG9ubHlNYXA8RGVlcE5vbk51bGxhYmxlPEtleXM+LCBEZWVwTm9uTnVsbGFibGU8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgV2Vha01hcDxpbmZlciBLZXlzLCBpbmZlciBWYWx1ZXM+XG4gID8gV2Vha01hcDxEZWVwTm9uTnVsbGFibGU8S2V5cz4sIERlZXBOb25OdWxsYWJsZTxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyBTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IFNldDxEZWVwTm9uTnVsbGFibGU8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgUmVhZG9ubHlTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IFJlYWRvbmx5U2V0PERlZXBOb25OdWxsYWJsZTxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyBXZWFrU2V0PGluZmVyIFZhbHVlcz5cbiAgPyBXZWFrU2V0PERlZXBOb25OdWxsYWJsZTxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyBQcm9taXNlPGluZmVyIFZhbHVlcz5cbiAgPyBQcm9taXNlPERlZXBOb25OdWxsYWJsZTxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyB7fVxuICA/IHsgW0tleSBpbiBrZXlvZiBUeXBlXTogRGVlcE5vbk51bGxhYmxlPFR5cGVbS2V5XT4gfVxuICA6IE5vbk51bGxhYmxlPFR5cGU+O1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC1udWxsYWJsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVpbHRpbiB9IGZyb20gXCIuLi9idWlsdC1pblwiO1xuaW1wb3J0IHsgSXNUdXBsZSB9IGZyb20gXCIuLi9pcy10dXBsZVwiO1xuXG5leHBvcnQgdHlwZSBEZWVwTnVsbGFibGU8VHlwZT4gPSBUeXBlIGV4dGVuZHMgQnVpbHRpblxuICA/IFR5cGUgfCBudWxsXG4gIDogVHlwZSBleHRlbmRzIE1hcDxpbmZlciBLZXlzLCBpbmZlciBWYWx1ZXM+XG4gID8gTWFwPERlZXBOdWxsYWJsZTxLZXlzPiwgRGVlcE51bGxhYmxlPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFJlYWRvbmx5TWFwPGluZmVyIEtleXMsIGluZmVyIFZhbHVlcz5cbiAgPyBSZWFkb25seU1hcDxEZWVwTnVsbGFibGU8S2V5cz4sIERlZXBOdWxsYWJsZTxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyBXZWFrTWFwPGluZmVyIEtleXMsIGluZmVyIFZhbHVlcz5cbiAgPyAvLyBUT0RPOiByZXBsYWNlIGl0IHdpdGggV2Vha0tleSAoaW50cm9kdWNlZCBhdCBUeXBlU2NyaXB0QDUuMilcbiAgICAvLyBXZWFrTWFwIGtleSBoYXMgdG8gc2F0aXNmeSBXZWFrS2V5IHdoaWNoIGlzIG9iamVjdCBhdCB0aGUgbW9tZW50XG4gICAgRGVlcE51bGxhYmxlPEtleXM+IGV4dGVuZHMgb2JqZWN0XG4gICAgPyBXZWFrTWFwPERlZXBOdWxsYWJsZTxLZXlzPiwgRGVlcE51bGxhYmxlPFZhbHVlcz4+XG4gICAgOiBuZXZlclxuICA6IFR5cGUgZXh0ZW5kcyBTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IFNldDxEZWVwTnVsbGFibGU8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgUmVhZG9ubHlTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IFJlYWRvbmx5U2V0PERlZXBOdWxsYWJsZTxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyBXZWFrU2V0PGluZmVyIFZhbHVlcz5cbiAgPyAvLyBUT0RPOiByZXBsYWNlIGl0IHdpdGggV2Vha0tleSAoaW50cm9kdWNlZCBhdCBUeXBlU2NyaXB0QDUuMilcbiAgICAvLyBXZWFrU2V0IGtleSBoYXMgdG8gc2F0aXNmeSBXZWFrS2V5IHdoaWNoIGlzIG9iamVjdCBhdCB0aGUgbW9tZW50XG4gICAgRGVlcE51bGxhYmxlPFZhbHVlcz4gZXh0ZW5kcyBvYmplY3RcbiAgICA/IFdlYWtTZXQ8RGVlcE51bGxhYmxlPFZhbHVlcz4+XG4gICAgOiBuZXZlclxuICA6IFR5cGUgZXh0ZW5kcyBSZWFkb25seUFycmF5PGluZmVyIFZhbHVlcz5cbiAgPyBUeXBlIGV4dGVuZHMgSXNUdXBsZTxUeXBlPlxuICAgID8geyBbS2V5IGluIGtleW9mIFR5cGVdOiBEZWVwTnVsbGFibGU8VHlwZVtLZXldPiB8IG51bGwgfVxuICAgIDogVHlwZSBleHRlbmRzIEFycmF5PFZhbHVlcz5cbiAgICA/IEFycmF5PERlZXBOdWxsYWJsZTxWYWx1ZXM+PlxuICAgIDogUmVhZG9ubHlBcnJheTxEZWVwTnVsbGFibGU8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgUHJvbWlzZTxpbmZlciBWYWx1ZT5cbiAgPyBQcm9taXNlPERlZXBOdWxsYWJsZTxWYWx1ZT4+XG4gIDogVHlwZSBleHRlbmRzIHt9XG4gID8geyBbS2V5IGluIGtleW9mIFR5cGVdOiBEZWVwTnVsbGFibGU8VHlwZVtLZXldPiB9XG4gIDogVHlwZSB8IG51bGw7XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC1vbWl0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbnlSZWNvcmQgfSBmcm9tIFwiLi4vYW55LXJlY29yZFwiO1xuaW1wb3J0IHsgQnVpbHRpbiB9IGZyb20gXCIuLi9idWlsdC1pblwiO1xuXG5leHBvcnQgdHlwZSBEZWVwT21pdDxUeXBlLCBGaWx0ZXI+ID0gVHlwZSBleHRlbmRzIEJ1aWx0aW5cbiAgPyBUeXBlXG4gIDogVHlwZSBleHRlbmRzIE1hcDxpbmZlciBLZXlzLCBpbmZlciBWYWx1ZXM+XG4gID8gRmlsdGVyIGV4dGVuZHMgTWFwPEtleXMsIGluZmVyIEZpbHRlclZhbHVlcz5cbiAgICA/IE1hcDxLZXlzLCBEZWVwT21pdDxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFJlYWRvbmx5TWFwPGluZmVyIEtleXMsIGluZmVyIFZhbHVlcz5cbiAgPyBGaWx0ZXIgZXh0ZW5kcyBSZWFkb25seU1hcDxLZXlzLCBpbmZlciBGaWx0ZXJWYWx1ZXM+XG4gICAgPyBSZWFkb25seU1hcDxLZXlzLCBEZWVwT21pdDxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFdlYWtNYXA8aW5mZXIgS2V5cywgaW5mZXIgVmFsdWVzPlxuICA/IEZpbHRlciBleHRlbmRzIFdlYWtNYXA8S2V5cywgaW5mZXIgRmlsdGVyVmFsdWVzPlxuICAgID8gV2Vha01hcDxLZXlzLCBEZWVwT21pdDxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFNldDxpbmZlciBWYWx1ZXM+XG4gID8gRmlsdGVyIGV4dGVuZHMgU2V0PGluZmVyIEZpbHRlclZhbHVlcz5cbiAgICA/IFNldDxEZWVwT21pdDxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFJlYWRvbmx5U2V0PGluZmVyIFZhbHVlcz5cbiAgPyBGaWx0ZXIgZXh0ZW5kcyBSZWFkb25seVNldDxpbmZlciBGaWx0ZXJWYWx1ZXM+XG4gICAgPyBSZWFkb25seVNldDxEZWVwT21pdDxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFdlYWtTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IEZpbHRlciBleHRlbmRzIFdlYWtTZXQ8aW5mZXIgRmlsdGVyVmFsdWVzPlxuICAgID8gV2Vha1NldDxEZWVwT21pdDxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIEFycmF5PGluZmVyIFZhbHVlcz5cbiAgPyBGaWx0ZXIgZXh0ZW5kcyBBcnJheTxpbmZlciBGaWx0ZXJWYWx1ZXM+XG4gICAgPyBBcnJheTxEZWVwT21pdDxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFByb21pc2U8aW5mZXIgVmFsdWU+XG4gID8gRmlsdGVyIGV4dGVuZHMgUHJvbWlzZTxpbmZlciBGaWx0ZXJWYWx1ZT5cbiAgICA/IFByb21pc2U8RGVlcE9taXQ8VmFsdWUsIEZpbHRlclZhbHVlPj5cbiAgICA6IFR5cGVcbiAgOiBGaWx0ZXIgZXh0ZW5kcyBBbnlSZWNvcmRcbiAgPyB7XG4gICAgICBbS2V5IGluIGtleW9mIFR5cGUgYXMgS2V5IGV4dGVuZHMga2V5b2YgRmlsdGVyXG4gICAgICAgID8gRmlsdGVyW0tleV0gZXh0ZW5kcyB0cnVlXG4gICAgICAgICAgPyBuZXZlclxuICAgICAgICAgIDogS2V5XG4gICAgICAgIDogS2V5XTogS2V5IGV4dGVuZHMga2V5b2YgRmlsdGVyID8gRGVlcE9taXQ8VHlwZVtLZXldLCBGaWx0ZXJbS2V5XT4gOiBUeXBlW0tleV07XG4gICAgfVxuICA6IG5ldmVyO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC1wYXJ0aWFsL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWlsdGluIH0gZnJvbSBcIi4uL2J1aWx0LWluXCI7XG5pbXBvcnQgeyBJc1R1cGxlIH0gZnJvbSBcIi4uL2lzLXR1cGxlXCI7XG5pbXBvcnQgeyBJc1Vua25vd24gfSBmcm9tIFwiLi4vaXMtdW5rbm93blwiO1xuXG5leHBvcnQgdHlwZSBEZWVwUGFydGlhbDxUeXBlPiA9IFR5cGUgZXh0ZW5kcyBFeGNsdWRlPEJ1aWx0aW4sIEVycm9yPlxuICA/IFR5cGVcbiAgOiBUeXBlIGV4dGVuZHMgTWFwPGluZmVyIEtleXMsIGluZmVyIFZhbHVlcz5cbiAgPyBNYXA8RGVlcFBhcnRpYWw8S2V5cz4sIERlZXBQYXJ0aWFsPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFJlYWRvbmx5TWFwPGluZmVyIEtleXMsIGluZmVyIFZhbHVlcz5cbiAgPyBSZWFkb25seU1hcDxEZWVwUGFydGlhbDxLZXlzPiwgRGVlcFBhcnRpYWw8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgV2Vha01hcDxpbmZlciBLZXlzLCBpbmZlciBWYWx1ZXM+XG4gID8gV2Vha01hcDxEZWVwUGFydGlhbDxLZXlzPiwgRGVlcFBhcnRpYWw8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgU2V0PGluZmVyIFZhbHVlcz5cbiAgPyBTZXQ8RGVlcFBhcnRpYWw8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgUmVhZG9ubHlTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IFJlYWRvbmx5U2V0PERlZXBQYXJ0aWFsPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFdlYWtTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IFdlYWtTZXQ8RGVlcFBhcnRpYWw8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxpbmZlciBWYWx1ZXM+XG4gID8gVHlwZSBleHRlbmRzIElzVHVwbGU8VHlwZT5cbiAgICA/IHsgW0tleSBpbiBrZXlvZiBUeXBlXT86IERlZXBQYXJ0aWFsPFR5cGVbS2V5XT4gfVxuICAgIDogVHlwZSBleHRlbmRzIEFycmF5PFZhbHVlcz5cbiAgICA/IEFycmF5PERlZXBQYXJ0aWFsPFZhbHVlcz4gfCB1bmRlZmluZWQ+XG4gICAgOiBSZWFkb25seUFycmF5PERlZXBQYXJ0aWFsPFZhbHVlcz4gfCB1bmRlZmluZWQ+XG4gIDogVHlwZSBleHRlbmRzIFByb21pc2U8aW5mZXIgVmFsdWU+XG4gID8gUHJvbWlzZTxEZWVwUGFydGlhbDxWYWx1ZT4+XG4gIDogVHlwZSBleHRlbmRzIHt9XG4gID8geyBbS2V5IGluIGtleW9mIFR5cGVdPzogRGVlcFBhcnRpYWw8VHlwZVtLZXldPiB9XG4gIDogSXNVbmtub3duPFR5cGU+IGV4dGVuZHMgdHJ1ZVxuICA/IHVua25vd25cbiAgOiBQYXJ0aWFsPFR5cGU+O1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC1waWNrL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbnlSZWNvcmQgfSBmcm9tIFwiLi4vYW55LXJlY29yZFwiO1xuaW1wb3J0IHsgQnVpbHRpbiB9IGZyb20gXCIuLi9idWlsdC1pblwiO1xuXG5leHBvcnQgdHlwZSBEZWVwUGljazxUeXBlLCBGaWx0ZXI+ID0gVHlwZSBleHRlbmRzIEJ1aWx0aW5cbiAgPyBUeXBlXG4gIDogVHlwZSBleHRlbmRzIE1hcDxpbmZlciBLZXlzLCBpbmZlciBWYWx1ZXM+XG4gID8gRmlsdGVyIGV4dGVuZHMgTWFwPEtleXMsIGluZmVyIEZpbHRlclZhbHVlcz5cbiAgICA/IE1hcDxLZXlzLCBEZWVwUGljazxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFJlYWRvbmx5TWFwPGluZmVyIEtleXMsIGluZmVyIFZhbHVlcz5cbiAgPyBGaWx0ZXIgZXh0ZW5kcyBSZWFkb25seU1hcDxLZXlzLCBpbmZlciBGaWx0ZXJWYWx1ZXM+XG4gICAgPyBSZWFkb25seU1hcDxLZXlzLCBEZWVwUGljazxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFdlYWtNYXA8aW5mZXIgS2V5cywgaW5mZXIgVmFsdWVzPlxuICA/IEZpbHRlciBleHRlbmRzIFdlYWtNYXA8S2V5cywgaW5mZXIgRmlsdGVyVmFsdWVzPlxuICAgID8gV2Vha01hcDxLZXlzLCBEZWVwUGljazxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFNldDxpbmZlciBWYWx1ZXM+XG4gID8gRmlsdGVyIGV4dGVuZHMgU2V0PGluZmVyIEZpbHRlclZhbHVlcz5cbiAgICA/IFNldDxEZWVwUGljazxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFJlYWRvbmx5U2V0PGluZmVyIFZhbHVlcz5cbiAgPyBGaWx0ZXIgZXh0ZW5kcyBSZWFkb25seVNldDxpbmZlciBGaWx0ZXJWYWx1ZXM+XG4gICAgPyBSZWFkb25seVNldDxEZWVwUGljazxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFdlYWtTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IEZpbHRlciBleHRlbmRzIFdlYWtTZXQ8aW5mZXIgRmlsdGVyVmFsdWVzPlxuICAgID8gV2Vha1NldDxEZWVwUGljazxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIEFycmF5PGluZmVyIFZhbHVlcz5cbiAgPyBGaWx0ZXIgZXh0ZW5kcyBBcnJheTxpbmZlciBGaWx0ZXJWYWx1ZXM+XG4gICAgPyBBcnJheTxEZWVwUGljazxWYWx1ZXMsIEZpbHRlclZhbHVlcz4+XG4gICAgOiBUeXBlXG4gIDogVHlwZSBleHRlbmRzIFByb21pc2U8aW5mZXIgVmFsdWU+XG4gID8gRmlsdGVyIGV4dGVuZHMgUHJvbWlzZTxpbmZlciBGaWx0ZXJWYWx1ZT5cbiAgICA/IFByb21pc2U8RGVlcFBpY2s8VmFsdWUsIEZpbHRlclZhbHVlPj5cbiAgICA6IFR5cGVcbiAgOiBGaWx0ZXIgZXh0ZW5kcyBBbnlSZWNvcmRcbiAgPyB7XG4gICAgICAvLyBpdGVyYXRlIG92ZXIga2V5cyBvZiBUeXBlLCB3aGljaCBrZWVwcyB0aGUgaW5mb3JtYXRpb24gYWJvdXQga2V5czogb3B0aW9uYWwsIHJlcXVpcmVkIG9yIHJlYWRvbmx5XG4gICAgICBbS2V5IGluIGtleW9mIFR5cGUgYXMgS2V5IGV4dGVuZHMga2V5b2YgRmlsdGVyID8gS2V5IDogbmV2ZXJdOiBGaWx0ZXJbS2V5ICYga2V5b2YgRmlsdGVyXSBleHRlbmRzIHRydWVcbiAgICAgICAgPyBUeXBlW0tleV1cbiAgICAgICAgOiBLZXkgZXh0ZW5kcyBrZXlvZiBGaWx0ZXJcbiAgICAgICAgPyBEZWVwUGljazxUeXBlW0tleV0sIEZpbHRlcltLZXldPlxuICAgICAgICA6IG5ldmVyO1xuICAgIH1cbiAgOiBuZXZlcjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC1yZWFkb25seS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW55QXJyYXkgfSBmcm9tIFwiLi4vYW55LWFycmF5XCI7XG5pbXBvcnQgeyBCdWlsdGluIH0gZnJvbSBcIi4uL2J1aWx0LWluXCI7XG5pbXBvcnQgeyBJc05ldmVyIH0gZnJvbSBcIi4uL2lzLW5ldmVyXCI7XG5pbXBvcnQgeyBJc1R1cGxlIH0gZnJvbSBcIi4uL2lzLXR1cGxlXCI7XG5pbXBvcnQgeyBJc1Vua25vd24gfSBmcm9tIFwiLi4vaXMtdW5rbm93blwiO1xuXG5leHBvcnQgdHlwZSBEZWVwUmVhZG9ubHk8VHlwZT4gPSBUeXBlIGV4dGVuZHMgRXhjbHVkZTxCdWlsdGluLCBFcnJvcj5cbiAgPyBUeXBlXG4gIDogVHlwZSBleHRlbmRzIE1hcDxpbmZlciBLZXlzLCBpbmZlciBWYWx1ZXM+XG4gID8gUmVhZG9ubHlNYXA8RGVlcFJlYWRvbmx5PEtleXM+LCBEZWVwUmVhZG9ubHk8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgUmVhZG9ubHlNYXA8aW5mZXIgS2V5cywgaW5mZXIgVmFsdWVzPlxuICA/IFJlYWRvbmx5TWFwPERlZXBSZWFkb25seTxLZXlzPiwgRGVlcFJlYWRvbmx5PFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFdlYWtNYXA8aW5mZXIgS2V5cywgaW5mZXIgVmFsdWVzPlxuICA/IFdlYWtNYXA8RGVlcFJlYWRvbmx5PEtleXM+LCBEZWVwUmVhZG9ubHk8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgU2V0PGluZmVyIFZhbHVlcz5cbiAgPyBSZWFkb25seVNldDxEZWVwUmVhZG9ubHk8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgUmVhZG9ubHlTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IFJlYWRvbmx5U2V0PERlZXBSZWFkb25seTxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyBXZWFrU2V0PGluZmVyIFZhbHVlcz5cbiAgPyBXZWFrU2V0PERlZXBSZWFkb25seTxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyBQcm9taXNlPGluZmVyIFZhbHVlPlxuICA/IFByb21pc2U8RGVlcFJlYWRvbmx5PFZhbHVlPj5cbiAgOiBUeXBlIGV4dGVuZHMgQW55QXJyYXk8aW5mZXIgVmFsdWVzPlxuICA/IElzTmV2ZXI8SXNUdXBsZTxUeXBlPj4gZXh0ZW5kcyBmYWxzZVxuICAgID8geyByZWFkb25seSBbS2V5IGluIGtleW9mIFR5cGVdOiBEZWVwUmVhZG9ubHk8VHlwZVtLZXldPiB9XG4gICAgOiBSZWFkb25seUFycmF5PERlZXBSZWFkb25seTxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyB7fVxuICA/IHsgcmVhZG9ubHkgW0tleSBpbiBrZXlvZiBUeXBlXTogRGVlcFJlYWRvbmx5PFR5cGVbS2V5XT4gfVxuICA6IElzVW5rbm93bjxUeXBlPiBleHRlbmRzIHRydWVcbiAgPyB1bmtub3duXG4gIDogUmVhZG9ubHk8VHlwZT47XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC1yZXF1aXJlZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVpbHRpbiB9IGZyb20gXCIuLi9idWlsdC1pblwiO1xuaW1wb3J0IHR5cGUgeyBJc05ldmVyIH0gZnJvbSBcIi4uL2lzLW5ldmVyXCI7XG5pbXBvcnQgeyBJc1R1cGxlIH0gZnJvbSBcIi4uL2lzLXR1cGxlXCI7XG5cbmV4cG9ydCB0eXBlIERlZXBSZXF1aXJlZDxUeXBlPiA9IFR5cGUgZXh0ZW5kcyBFcnJvclxuICA/IFJlcXVpcmVkPFR5cGU+XG4gIDogVHlwZSBleHRlbmRzIEJ1aWx0aW5cbiAgPyBUeXBlXG4gIDogVHlwZSBleHRlbmRzIE1hcDxpbmZlciBLZXlzLCBpbmZlciBWYWx1ZXM+XG4gID8gTWFwPERlZXBSZXF1aXJlZDxLZXlzPiwgRGVlcFJlcXVpcmVkPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFJlYWRvbmx5TWFwPGluZmVyIEtleXMsIGluZmVyIFZhbHVlcz5cbiAgPyBSZWFkb25seU1hcDxEZWVwUmVxdWlyZWQ8S2V5cz4sIERlZXBSZXF1aXJlZDxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyBXZWFrTWFwPGluZmVyIEtleXMsIGluZmVyIFZhbHVlcz5cbiAgPyBXZWFrTWFwPERlZXBSZXF1aXJlZDxLZXlzPiwgRGVlcFJlcXVpcmVkPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFNldDxpbmZlciBWYWx1ZXM+XG4gID8gU2V0PERlZXBSZXF1aXJlZDxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyBSZWFkb25seVNldDxpbmZlciBWYWx1ZXM+XG4gID8gUmVhZG9ubHlTZXQ8RGVlcFJlcXVpcmVkPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFdlYWtTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IFdlYWtTZXQ8RGVlcFJlcXVpcmVkPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFByb21pc2U8aW5mZXIgVmFsdWU+XG4gID8gUHJvbWlzZTxEZWVwUmVxdWlyZWQ8VmFsdWU+PlxuICA6IFR5cGUgZXh0ZW5kcyBSZWFkb25seUFycmF5PGluZmVyIFZhbHVlcz5cbiAgPyBJc05ldmVyPElzVHVwbGU8VHlwZT4+IGV4dGVuZHMgZmFsc2VcbiAgICA/IHsgW0tleSBpbiBrZXlvZiBUeXBlXS0/OiBEZWVwUmVxdWlyZWQ8VHlwZVtLZXldPiB9XG4gICAgOiBUeXBlIGV4dGVuZHMgQXJyYXk8VmFsdWVzPlxuICAgID8gQXJyYXk8RXhjbHVkZTxEZWVwUmVxdWlyZWQ8VmFsdWVzPiwgdW5kZWZpbmVkPj5cbiAgICA6IFJlYWRvbmx5QXJyYXk8RXhjbHVkZTxEZWVwUmVxdWlyZWQ8VmFsdWVzPiwgdW5kZWZpbmVkPj5cbiAgOiBUeXBlIGV4dGVuZHMge31cbiAgPyB7IFtLZXkgaW4ga2V5b2YgVHlwZV0tPzogRGVlcFJlcXVpcmVkPFR5cGVbS2V5XT4gfVxuICA6IFJlcXVpcmVkPFR5cGU+O1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC11bmRlZmluYWJsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVpbHRpbiB9IGZyb20gXCIuLi9idWlsdC1pblwiO1xuaW1wb3J0IHsgSXNUdXBsZSB9IGZyb20gXCIuLi9pcy10dXBsZVwiO1xuXG5leHBvcnQgdHlwZSBEZWVwVW5kZWZpbmFibGU8VHlwZT4gPSBUeXBlIGV4dGVuZHMgQnVpbHRpblxuICA/IFR5cGUgfCB1bmRlZmluZWRcbiAgOiBUeXBlIGV4dGVuZHMgTWFwPGluZmVyIEtleXMsIGluZmVyIFZhbHVlcz5cbiAgPyBNYXA8RGVlcFVuZGVmaW5hYmxlPEtleXM+LCBEZWVwVW5kZWZpbmFibGU8VmFsdWVzPj5cbiAgOiBUeXBlIGV4dGVuZHMgUmVhZG9ubHlNYXA8aW5mZXIgS2V5cywgaW5mZXIgVmFsdWVzPlxuICA/IFJlYWRvbmx5TWFwPERlZXBVbmRlZmluYWJsZTxLZXlzPiwgRGVlcFVuZGVmaW5hYmxlPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFdlYWtNYXA8aW5mZXIgS2V5cywgaW5mZXIgVmFsdWVzPlxuICA/IC8vIFRPRE86IHJlcGxhY2UgaXQgd2l0aCBXZWFrS2V5IChpbnRyb2R1Y2VkIGF0IFR5cGVTY3JpcHRANS4yKVxuICAgIC8vIFdlYWtNYXAga2V5IGhhcyB0byBzYXRpc2Z5IFdlYWtLZXkgd2hpY2ggaXMgb2JqZWN0IGF0IHRoZSBtb21lbnRcbiAgICBEZWVwVW5kZWZpbmFibGU8S2V5cz4gZXh0ZW5kcyBvYmplY3RcbiAgICA/IFdlYWtNYXA8RGVlcFVuZGVmaW5hYmxlPEtleXM+LCBEZWVwVW5kZWZpbmFibGU8VmFsdWVzPj5cbiAgICA6IG5ldmVyXG4gIDogVHlwZSBleHRlbmRzIFNldDxpbmZlciBWYWx1ZXM+XG4gID8gU2V0PERlZXBVbmRlZmluYWJsZTxWYWx1ZXM+PlxuICA6IFR5cGUgZXh0ZW5kcyBSZWFkb25seVNldDxpbmZlciBWYWx1ZXM+XG4gID8gUmVhZG9ubHlTZXQ8RGVlcFVuZGVmaW5hYmxlPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFdlYWtTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IC8vIFRPRE86IHJlcGxhY2UgaXQgd2l0aCBXZWFrS2V5IChpbnRyb2R1Y2VkIGF0IFR5cGVTY3JpcHRANS4yKVxuICAgIC8vIFdlYWtTZXQga2V5IGhhcyB0byBzYXRpc2Z5IFdlYWtLZXkgd2hpY2ggaXMgb2JqZWN0IGF0IHRoZSBtb21lbnRcbiAgICBEZWVwVW5kZWZpbmFibGU8VmFsdWVzPiBleHRlbmRzIG9iamVjdFxuICAgID8gV2Vha1NldDxEZWVwVW5kZWZpbmFibGU8VmFsdWVzPj5cbiAgICA6IG5ldmVyXG4gIDogVHlwZSBleHRlbmRzIFJlYWRvbmx5QXJyYXk8aW5mZXIgVmFsdWVzPlxuICA/IFR5cGUgZXh0ZW5kcyBJc1R1cGxlPFR5cGU+XG4gICAgPyB7IFtLZXkgaW4ga2V5b2YgVHlwZV06IERlZXBVbmRlZmluYWJsZTxUeXBlW0tleV0+IHwgdW5kZWZpbmVkIH1cbiAgICA6IFR5cGUgZXh0ZW5kcyBBcnJheTxWYWx1ZXM+XG4gICAgPyBBcnJheTxEZWVwVW5kZWZpbmFibGU8VmFsdWVzPj5cbiAgICA6IFJlYWRvbmx5QXJyYXk8RGVlcFVuZGVmaW5hYmxlPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFByb21pc2U8aW5mZXIgVmFsdWU+XG4gID8gUHJvbWlzZTxEZWVwVW5kZWZpbmFibGU8VmFsdWU+PlxuICA6IFR5cGUgZXh0ZW5kcyB7fVxuICA/IHsgW0tleSBpbiBrZXlvZiBUeXBlXTogRGVlcFVuZGVmaW5hYmxlPFR5cGVbS2V5XT4gfVxuICA6IFR5cGUgfCB1bmRlZmluZWQ7XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC13cml0YWJsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVpbHRpbiB9IGZyb20gXCIuLi9idWlsdC1pblwiO1xuaW1wb3J0IHsgSXNVbmtub3duIH0gZnJvbSBcIi4uL2lzLXVua25vd25cIjtcblxuZXhwb3J0IHR5cGUgRGVlcFdyaXRhYmxlPFR5cGU+ID0gVHlwZSBleHRlbmRzIEV4Y2x1ZGU8QnVpbHRpbiwgRXJyb3I+XG4gID8gVHlwZVxuICA6IFR5cGUgZXh0ZW5kcyBNYXA8aW5mZXIgS2V5LCBpbmZlciBWYWx1ZT5cbiAgPyBNYXA8RGVlcFdyaXRhYmxlPEtleT4sIERlZXBXcml0YWJsZTxWYWx1ZT4+XG4gIDogVHlwZSBleHRlbmRzIFJlYWRvbmx5TWFwPGluZmVyIEtleSwgaW5mZXIgVmFsdWU+XG4gID8gTWFwPERlZXBXcml0YWJsZTxLZXk+LCBEZWVwV3JpdGFibGU8VmFsdWU+PlxuICA6IFR5cGUgZXh0ZW5kcyBXZWFrTWFwPGluZmVyIEtleSwgaW5mZXIgVmFsdWU+XG4gID8gV2Vha01hcDxEZWVwV3JpdGFibGU8S2V5PiwgRGVlcFdyaXRhYmxlPFZhbHVlPj5cbiAgOiBUeXBlIGV4dGVuZHMgU2V0PGluZmVyIFZhbHVlcz5cbiAgPyBTZXQ8RGVlcFdyaXRhYmxlPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFJlYWRvbmx5U2V0PGluZmVyIFZhbHVlcz5cbiAgPyBTZXQ8RGVlcFdyaXRhYmxlPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFdlYWtTZXQ8aW5mZXIgVmFsdWVzPlxuICA/IFdlYWtTZXQ8RGVlcFdyaXRhYmxlPFZhbHVlcz4+XG4gIDogVHlwZSBleHRlbmRzIFByb21pc2U8aW5mZXIgVmFsdWU+XG4gID8gUHJvbWlzZTxEZWVwV3JpdGFibGU8VmFsdWU+PlxuICA6IFR5cGUgZXh0ZW5kcyB7fVxuICA/IHsgLXJlYWRvbmx5IFtLZXkgaW4ga2V5b2YgVHlwZV06IERlZXBXcml0YWJsZTxUeXBlW0tleV0+IH1cbiAgOiBJc1Vua25vd248VHlwZT4gZXh0ZW5kcyB0cnVlXG4gID8gdW5rbm93blxuICA6IFR5cGU7XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvc3RyaWN0LWRlZXAtb21pdC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVlcE1vZGlmeSB9IGZyb20gXCIuLi9kZWVwLW1vZGlmeVwiO1xuaW1wb3J0IHsgRGVlcE9taXQgfSBmcm9tIFwiLi4vZGVlcC1vbWl0XCI7XG5cbmV4cG9ydCB0eXBlIFN0cmljdERlZXBPbWl0PFR5cGUsIEZpbHRlciBleHRlbmRzIERlZXBNb2RpZnk8VHlwZT4+ID0gRGVlcE9taXQ8VHlwZSwgRmlsdGVyPjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvc3RyaWN0LWRlZXAtcGljay9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVlcE1vZGlmeSB9IGZyb20gXCIuLi9kZWVwLW1vZGlmeVwiO1xuaW1wb3J0IHsgRGVlcFBpY2sgfSBmcm9tIFwiLi4vZGVlcC1waWNrXCI7XG5cbmV4cG9ydCB0eXBlIFN0cmljdERlZXBQaWNrPFR5cGUsIEZpbHRlciBleHRlbmRzIERlZXBNb2RpZnk8VHlwZT4+ID0gRGVlcFBpY2s8VHlwZSwgRmlsdGVyPjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvb3B0aW9uYWwta2V5cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgT3B0aW9uYWxLZXlzPFR5cGU+ID0gVHlwZSBleHRlbmRzIG9iamVjdFxuICA/IGtleW9mIHtcbiAgICAgIFtLZXkgaW4ga2V5b2YgVHlwZSBhcyBUeXBlIGV4dGVuZHMgUmVxdWlyZWQ8UGljazxUeXBlLCBLZXk+PiA/IG5ldmVyIDogS2V5XTogbmV2ZXI7XG4gICAgfVxuICA6IG5ldmVyO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcGljay1rZXlzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaWNrUHJvcGVydGllcyB9IGZyb20gXCIuLi9waWNrLXByb3BlcnRpZXNcIjtcblxuZXhwb3J0IHR5cGUgUGlja0tleXM8VHlwZSwgVmFsdWU+ID0ga2V5b2YgUGlja1Byb3BlcnRpZXM8VHlwZSwgVmFsdWU+O1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcmVhZG9ubHkta2V5cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXNGdWxseVdyaXRhYmxlIH0gZnJvbSBcIi4uL2lzLWZ1bGx5LXdyaXRhYmxlXCI7XG5cbmV4cG9ydCB0eXBlIFJlYWRvbmx5S2V5czxUeXBlIGV4dGVuZHMgb2JqZWN0PiA9IFR5cGUgZXh0ZW5kcyB1bmtub3duXG4gID8ga2V5b2Yge1xuICAgICAgW0tleSBpbiBrZXlvZiBUeXBlIGFzIElzRnVsbHlXcml0YWJsZTxQaWNrPFR5cGUsIEtleT4+IGV4dGVuZHMgdHJ1ZSA/IG5ldmVyIDogS2V5XTogbmV2ZXI7XG4gICAgfVxuICA6IG5ldmVyO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcmVxdWlyZWQta2V5cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uYWxLZXlzIH0gZnJvbSBcIi4uL29wdGlvbmFsLWtleXNcIjtcblxuZXhwb3J0IHR5cGUgUmVxdWlyZWRLZXlzPFR5cGU+ID0gVHlwZSBleHRlbmRzIHVua25vd24gPyBFeGNsdWRlPGtleW9mIFR5cGUsIE9wdGlvbmFsS2V5czxUeXBlPj4gOiBuZXZlcjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvd3JpdGFibGUta2V5cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhZG9ubHlLZXlzIH0gZnJvbSBcIi4uL3JlYWRvbmx5LWtleXNcIjtcblxuZXhwb3J0IHR5cGUgV3JpdGFibGVLZXlzPFR5cGUgZXh0ZW5kcyBvYmplY3Q+ID0gVHlwZSBleHRlbmRzIHVua25vd24gPyBFeGNsdWRlPGtleW9mIFR5cGUsIFJlYWRvbmx5S2V5czxUeXBlPj4gOiBuZXZlcjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZXhhY3QvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFueVJlY29yZCB9IGZyb20gXCIuLi9hbnktcmVjb3JkXCI7XG5pbXBvcnQgeyBJc05ldmVyIH0gZnJvbSBcIi4uL2lzLW5ldmVyXCI7XG5cbnR5cGUgSXNVbmlvbjxUVW5pb24+ID0gVW5pb25Ub1R1cGxlPFRVbmlvbj5bXCJsZW5ndGhcIl0gZXh0ZW5kcyAxID8gZmFsc2UgOiB0cnVlO1xuXG50eXBlIFVuaW9uVG9GdW5jdGlvbkluc2VydGlvbjxUVW5pb24+ID0gKFRVbmlvbiBleHRlbmRzIGFueSA/IChhcmc6ICgpID0+IFRVbmlvbikgPT4gYW55IDogbmV2ZXIpIGV4dGVuZHMgKFxuICBhcmc6IGluZmVyIFRQYXJhbSxcbikgPT4gYW55XG4gID8gVFBhcmFtXG4gIDogbmV2ZXI7XG5cbi8vIE5PVEU6IFdoZW4gcmVwbGFjaW5nIHRoZSB1dGlsaXR5IHR5cGUgd2l0aCBgVW5pb25Ub1R1cGxlYCBmcm9tIGAuLi91bmlvbi10by10dXBsZWAsXG4vLyBgaXNCQyhiY09yQmMzKWAgZmFpbHMgYmVjYXVzZSBgaXNCQ2AgYWxsb3dzIGBCQyB8IHtyZWFkb25seSBiOiAyO3JlYWRvbmx5IGM6IDM7fWAgYXMgcGFyYW1ldGVyPz8/XG50eXBlIFVuaW9uVG9UdXBsZTxUVW5pb24+ID0gVW5pb25Ub0Z1bmN0aW9uSW5zZXJ0aW9uPFRVbmlvbj4gZXh0ZW5kcyAoKSA9PiBpbmZlciBUUmV0dXJuVHlwZVxuICA/IFsuLi5VbmlvblRvVHVwbGU8RXhjbHVkZTxUVW5pb24sIFRSZXR1cm5UeXBlPj4sIFRSZXR1cm5UeXBlXVxuICA6IFtdO1xuXG50eXBlIEV4YWN0VW5pb25MZW5ndGg8VFZhbHVlLCBUU2hhcGU+ID0gVW5pb25Ub1R1cGxlPFRWYWx1ZT5bXCJsZW5ndGhcIl0gZXh0ZW5kcyBVbmlvblRvVHVwbGU8VFNoYXBlPltcImxlbmd0aFwiXVxuICA/IHRydWVcbiAgOiBmYWxzZTtcblxuLy8gTk9URTogYFhPUmAgY2Fubm90IGJlIHVzZWQgYXMgaXQncyBvbmx5IGhhbmR5IHdpdGggb2JqZWN0cywgbm90IGJvb2xlYW5zXG50eXBlIEJvb2xlYW5Yb3I8VCwgVT4gPSBUIGV4dGVuZHMgdHJ1ZSA/IChVIGV4dGVuZHMgdHJ1ZSA/IHRydWUgOiBmYWxzZSkgOiBVIGV4dGVuZHMgZmFsc2UgPyB0cnVlIDogZmFsc2U7XG5cbnR5cGUgQm9vbGVhbkFuZDxUVHVwbGU+ID0gVFR1cGxlIGV4dGVuZHMgW2luZmVyIEhlYWQsIC4uLmluZmVyIFJlc3RdXG4gID8gSGVhZCBleHRlbmRzIHRydWVcbiAgICA/IEJvb2xlYW5BbmQ8UmVzdD5cbiAgICA6IGZhbHNlXG4gIDogVFR1cGxlIGV4dGVuZHMgW11cbiAgPyB0cnVlXG4gIDogZmFsc2U7XG5cbnR5cGUgT2JqZWN0S2V5RXhhY3Q8VFZhbHVlLCBUU2hhcGU+ID0gQm9vbGVhbkFuZDxcbiAgW0lzTmV2ZXI8RXhjbHVkZTxrZXlvZiBUVmFsdWUsIGtleW9mIFRTaGFwZT4+LCBJc05ldmVyPEV4Y2x1ZGU8a2V5b2YgVFNoYXBlLCBrZXlvZiBUVmFsdWU+Pl1cbj47XG5cbnR5cGUgT2JqZWN0VmFsdWVEaWZmPFRWYWx1ZSwgVFNoYXBlPiA9IHtcbiAgW1RLZXkgaW4ga2V5b2YgVFZhbHVlXTogRXhjbHVkZTxUVmFsdWVbVEtleV0sIFRTaGFwZVtUS2V5ICYga2V5b2YgVFNoYXBlXT47XG59W2tleW9mIFRWYWx1ZV07XG5cbnR5cGUgT2JqZWN0VmFsdWVFeGFjdDxUVmFsdWUsIFRTaGFwZT4gPSBCb29sZWFuQW5kPFxuICBbSXNOZXZlcjxPYmplY3RWYWx1ZURpZmY8VFZhbHVlLCBUU2hhcGU+PiwgSXNOZXZlcjxPYmplY3RWYWx1ZURpZmY8VFNoYXBlLCBUVmFsdWU+Pl1cbj47XG5cbnR5cGUgT2JqZWN0RXhhY3Q8VFZhbHVlLCBUU2hhcGU+ID0gW1RWYWx1ZV0gZXh0ZW5kcyBbVFNoYXBlXVxuICA/IEJvb2xlYW5BbmQ8XG4gICAgICBbXG4gICAgICAgIEJvb2xlYW5Yb3I8SXNVbmlvbjxUVmFsdWU+LCBJc1VuaW9uPFRTaGFwZT4+LFxuICAgICAgICBFeGFjdFVuaW9uTGVuZ3RoPFRWYWx1ZSwgVFNoYXBlPixcbiAgICAgICAgT2JqZWN0S2V5RXhhY3Q8VFZhbHVlLCBUU2hhcGU+LFxuICAgICAgICBPYmplY3RWYWx1ZUV4YWN0PFRWYWx1ZSwgVFNoYXBlPixcbiAgICAgIF1cbiAgICA+IGV4dGVuZHMgdHJ1ZVxuICAgID8gVFZhbHVlXG4gICAgOiBuZXZlclxuICA6IG5ldmVyO1xuXG50eXBlIElzQXJyYXk8VFZhbHVlPiA9IFtUVmFsdWVdIGV4dGVuZHMgW3JlYWRvbmx5IGFueVtdXSA/IHRydWUgOiBmYWxzZTtcblxudHlwZSBJc1JlYWRvbmx5PFRBcnJheT4gPSBSZWFkb25seTxUQXJyYXk+IGV4dGVuZHMgVEFycmF5ID8gdHJ1ZSA6IGZhbHNlO1xuXG50eXBlIFNhbWVMZW5ndGg8VFZhbHVlIGV4dGVuZHMgcmVhZG9ubHkgYW55W10sIFRTaGFwZSBleHRlbmRzIHJlYWRvbmx5IGFueVtdPiA9IElzTmV2ZXI8XG4gIFByaW1pdGl2ZUV4YWN0PFRWYWx1ZVtcImxlbmd0aFwiXSwgVFNoYXBlW1wibGVuZ3RoXCJdPlxuPiBleHRlbmRzIHRydWVcbiAgPyBmYWxzZVxuICA6IHRydWU7XG5cbnR5cGUgQXJyYXlFeGFjdDxUVmFsdWUgZXh0ZW5kcyByZWFkb25seSBhbnlbXSwgVFNoYXBlIGV4dGVuZHMgcmVhZG9ubHkgYW55W10+ID0gQm9vbGVhbkFuZDxcbiAgW1xuICAgIC8vIGJvdGggYXJyYXlzXG4gICAgSXNBcnJheTxUVmFsdWU+LFxuICAgIElzQXJyYXk8VFNoYXBlPixcbiAgICAvLyBzYW1lIGxlbmd0aFxuICAgIFNhbWVMZW5ndGg8VFZhbHVlLCBUU2hhcGU+LFxuICAgIC8vIGJvdGggcmVhZG9ubHkgb3Igbm90XG4gICAgQm9vbGVhblhvcjxJc1JlYWRvbmx5PFRWYWx1ZT4sIElzUmVhZG9ubHk8VFNoYXBlPj4sXG4gIF1cbj4gZXh0ZW5kcyB0cnVlXG4gID8gW1RWYWx1ZSwgVFNoYXBlXSBleHRlbmRzIFtyZWFkb25seSAoaW5mZXIgVFZhbHVlRWxlbWVudClbXSwgcmVhZG9ubHkgKGluZmVyIFRTaGFwZUVsZW1lbnQpW11dXG4gICAgPyBFeGFjdDxUVmFsdWVFbGVtZW50LCBUU2hhcGVFbGVtZW50PiBleHRlbmRzIFRWYWx1ZUVsZW1lbnRcbiAgICAgID8gVFZhbHVlXG4gICAgICA6IG5ldmVyXG4gICAgOiBuZXZlclxuICA6IG5ldmVyO1xuXG4vLyBOT1RFOiBXaGVuIHJlcGxhY2luZyB0aGUgYm9keSB3aXRoIGBBcmVOb25EaXN0cmlidXRpdmVFcXVhbDxUVmFsdWUsIFRTaGFwZT4gZXh0ZW5kcyB0cnVlID8gVFZhbHVlIDogbmV2ZXJgLFxuLy8gYGlzQkNvckJDMyhiY09yQmMzKWAgZmFpbHMgYmVjYXVzZSBgYmNPckJjM2AgaXMgaW5mZXJyZWQgYXMgYEJDYD8/P1xudHlwZSBQcmltaXRpdmVFeGFjdDxUVmFsdWUsIFRTaGFwZT4gPSBbVFZhbHVlXSBleHRlbmRzIFtUU2hhcGVdID8gKFtUU2hhcGVdIGV4dGVuZHMgW1RWYWx1ZV0gPyBUVmFsdWUgOiBuZXZlcikgOiBuZXZlcjtcblxuZXhwb3J0IHR5cGUgRXhhY3Q8VFZhbHVlLCBUU2hhcGU+ID0gW1RWYWx1ZV0gZXh0ZW5kcyBbcmVhZG9ubHkgYW55W11dXG4gID8gW1RTaGFwZV0gZXh0ZW5kcyBbcmVhZG9ubHkgYW55W11dXG4gICAgPyBBcnJheUV4YWN0PFRWYWx1ZSwgVFNoYXBlPlxuICAgIDogbmV2ZXJcbiAgOiBbVFZhbHVlXSBleHRlbmRzIFtBbnlSZWNvcmRdXG4gID8gT2JqZWN0RXhhY3Q8VFZhbHVlLCBUU2hhcGU+XG4gIDogUHJpbWl0aXZlRXhhY3Q8VFZhbHVlLCBUU2hhcGU+O1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvaXMtYW55L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTkyNzUyMy9kaXNhbGxvdy1jYWxsLXdpdGgtYW55LzQ5OTI4MzYwIzQ5OTI4MzYwXG5leHBvcnQgdHlwZSBJc0FueTxUeXBlPiA9IDAgZXh0ZW5kcyAxICYgVHlwZSA/IHRydWUgOiBmYWxzZTtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvaXMtbmV2ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIElzTmV2ZXI8VHlwZT4gPSBbVHlwZV0gZXh0ZW5kcyBbbmV2ZXJdID8gdHJ1ZSA6IGZhbHNlO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvaXMtdW5rbm93bi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXNBbnkgfSBmcm9tIFwiLi4vaXMtYW55XCI7XG5cbmV4cG9ydCB0eXBlIElzVW5rbm93bjxUeXBlPiA9IElzQW55PFR5cGU+IGV4dGVuZHMgdHJ1ZSA/IGZhbHNlIDogdW5rbm93biBleHRlbmRzIFR5cGUgPyB0cnVlIDogZmFsc2U7XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvaXMtdHVwbGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIElzVHVwbGU8VHlwZT4gPSBUeXBlIGV4dGVuZHMgcmVhZG9ubHkgYW55W10gPyAoYW55W10gZXh0ZW5kcyBUeXBlID8gbmV2ZXIgOiBUeXBlKSA6IG5ldmVyO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbm9uLWVtcHR5LW9iamVjdC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW55UmVjb3JkIH0gZnJvbSBcIi4uL2FueS1yZWNvcmRcIjtcblxuZXhwb3J0IHR5cGUgTm9uRW1wdHlPYmplY3Q8T2JqZWN0IGV4dGVuZHMgQW55UmVjb3JkPiA9IGtleW9mIE9iamVjdCBleHRlbmRzIG5ldmVyID8gbmV2ZXIgOiBPYmplY3Q7XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvYW55LWFycmF5L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBBbnlBcnJheTxUeXBlID0gYW55PiA9IEFycmF5PFR5cGU+IHwgUmVhZG9ubHlBcnJheTxUeXBlPjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvYXJyYXktb3Itc2luZ2xlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBBcnJheU9yU2luZ2xlPFR5cGU+ID0gVHlwZSB8IFR5cGVbXTtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZWxlbWVudC1vZi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgRWxlbWVudE9mPFR5cGUgZXh0ZW5kcyByZWFkb25seSBhbnlbXT4gPSBUeXBlIGV4dGVuZHMgcmVhZG9ubHkgKGluZmVyIFZhbHVlcylbXSA/IFZhbHVlcyA6IG5ldmVyO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvaGVhZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW55QXJyYXkgfSBmcm9tIFwiLi4vYW55LWFycmF5XCI7XG5cbmV4cG9ydCB0eXBlIEhlYWQ8VHlwZSBleHRlbmRzIEFueUFycmF5PiA9IFR5cGUgZXh0ZW5kcyB1bmtub3duID8gKFR5cGVbXCJsZW5ndGhcIl0gZXh0ZW5kcyAwID8gbmV2ZXIgOiBUeXBlWzBdKSA6IG5ldmVyO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbm9uLWVtcHR5LWFycmF5L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBOb25FbXB0eUFycmF5PFR5cGU+ID0gW1R5cGUsIC4uLlR5cGVbXV07XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcmVhZG9ubHktYXJyYXktb3Itc2luZ2xlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBSZWFkb25seUFycmF5T3JTaW5nbGU8VHlwZT4gPSBUeXBlIHwgcmVhZG9ubHkgVHlwZVtdO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvdGFpbC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW55QXJyYXkgfSBmcm9tIFwiLi4vYW55LWFycmF5XCI7XG5cbmV4cG9ydCB0eXBlIFRhaWw8VHlwZSBleHRlbmRzIEFueUFycmF5PiA9IFR5cGUgZXh0ZW5kcyByZWFkb25seSBbXVxuICA/IG5ldmVyXG4gIDogVHlwZSBleHRlbmRzIHJlYWRvbmx5IFthbnk/LCAuLi5pbmZlciBSZXN0XVxuICA/IFJlc3RcbiAgOiBuZXZlcjtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvdHVwbGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIFR1cGxlPFR5cGUgPSBhbnk+ID0gW1R5cGU/LCAuLi5UeXBlW11dO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvY2FtZWwtY2FzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBJc1N0cmluZ0xpdGVyYWw8VHlwZT4gPSBUeXBlIGV4dGVuZHMgc3RyaW5nID8gKHN0cmluZyBleHRlbmRzIFR5cGUgPyBmYWxzZSA6IHRydWUpIDogZmFsc2U7XG5cbnR5cGUgV29yZEluQ2FtZWxDYXNlPFR5cGUsIFdvcmQgZXh0ZW5kcyBzdHJpbmcgPSBcIlwiPiA9IFR5cGUgZXh0ZW5kcyBgJHtXb3JkfSR7aW5mZXIgTmV4dENoYXJhY3Rlcn0ke2luZmVyIF99YFxuICA/IE5leHRDaGFyYWN0ZXIgZXh0ZW5kcyBDYXBpdGFsaXplPE5leHRDaGFyYWN0ZXI+XG4gICAgPyBXb3JkXG4gICAgOiBXb3JkSW5DYW1lbENhc2U8VHlwZSwgYCR7V29yZH0ke05leHRDaGFyYWN0ZXJ9YD5cbiAgOiBXb3JkO1xuXG50eXBlIFNlcGFyYXRvciA9IFwiX1wiIHwgXCItXCI7XG5cbnR5cGUgSW5jbHVkZXNTZXBhcmF0b3I8VHlwZT4gPSBUeXBlIGV4dGVuZHMgYCR7c3RyaW5nfSR7U2VwYXJhdG9yfSR7c3RyaW5nfWAgPyB0cnVlIDogZmFsc2U7XG5cbnR5cGUgSXNPbmVXb3JkPFR5cGU+ID0gVHlwZSBleHRlbmRzIExvd2VyY2FzZTxUeXBlICYgc3RyaW5nPlxuICA/IHRydWVcbiAgOiBUeXBlIGV4dGVuZHMgVXBwZXJjYXNlPFR5cGUgJiBzdHJpbmc+XG4gID8gdHJ1ZVxuICA6IGZhbHNlO1xuXG50eXBlIElzQ2FtZWxDYXNlPFR5cGU+ID0gVHlwZSBleHRlbmRzIFVuY2FwaXRhbGl6ZTxUeXBlICYgc3RyaW5nPiA/IHRydWUgOiBmYWxzZTtcblxudHlwZSBJc1Bhc2NhbENhc2U8VHlwZT4gPSBUeXBlIGV4dGVuZHMgQ2FwaXRhbGl6ZTxUeXBlICYgc3RyaW5nPiA/IHRydWUgOiBmYWxzZTtcblxuLyoqIHNuYWtlX2Nhc2UsIENPTlNUQU5UX0NBU0UsIGtlYmFiLWNhc2Ugb3IgQ09CT0wtQ0FTRSAqL1xudHlwZSBTZXBhcmF0b3JDYXNlUGFyc2VyPFxuICBUeXBlLFxuICBUdXBsZSBleHRlbmRzIHJlYWRvbmx5IGFueVtdID0gW10sXG4+ID0gVHlwZSBleHRlbmRzIGAke2luZmVyIFdvcmR9JHtTZXBhcmF0b3J9JHtpbmZlciBUYWlsfWBcbiAgPyBTZXBhcmF0b3JDYXNlUGFyc2VyPFRhaWwsIFsuLi5UdXBsZSwgTG93ZXJjYXNlPFdvcmQ+XT5cbiAgOiBUeXBlIGV4dGVuZHMgYCR7aW5mZXIgV29yZH1gXG4gID8gWy4uLlR1cGxlLCBMb3dlcmNhc2U8V29yZD5dXG4gIDogVHVwbGU7XG5cbnR5cGUgQ2FtZWxDYXNlUGFyc2VyPFR5cGUsIFR1cGxlIGV4dGVuZHMgcmVhZG9ubHkgYW55W10gPSBbXT4gPSBUeXBlIGV4dGVuZHMgXCJcIlxuICA/IFR1cGxlXG4gIDogVHlwZSBleHRlbmRzIGAke1dvcmRJbkNhbWVsQ2FzZTxUeXBlPn0ke2luZmVyIFRhaWx9YFxuICA/IFR5cGUgZXh0ZW5kcyBgJHtpbmZlciBXb3JkfSR7VGFpbH1gXG4gICAgPyBDYW1lbENhc2VQYXJzZXI8VW5jYXBpdGFsaXplPFRhaWw+LCBbLi4uVHVwbGUsIExvd2VyY2FzZTxXb3JkPl0+XG4gICAgOiBuZXZlclxuICA6IG5ldmVyO1xuXG4vLyBDb252ZXJ0IGZpcnN0IGNoYXJhY3RlciBvZiBzdHJpbmcgbGl0ZXJhbCB0eXBlIHRvIGxvd2VyY2FzZSBhbmQgcmV1c2UgQ2FtZWxDYXNlUGFyc2VyXG50eXBlIFBhc2NhbENhc2VQYXJzZXI8VHlwZT4gPSBUeXBlIGV4dGVuZHMgc3RyaW5nID8gQ2FtZWxDYXNlUGFyc2VyPFVuY2FwaXRhbGl6ZTxUeXBlPj4gOiBuZXZlcjtcblxudHlwZSBTcGxpdEFueUNhc2U8VHlwZT4gPSBJbmNsdWRlc1NlcGFyYXRvcjxUeXBlPiBleHRlbmRzIHRydWVcbiAgPyBTZXBhcmF0b3JDYXNlUGFyc2VyPFR5cGU+XG4gIDogSXNPbmVXb3JkPFR5cGU+IGV4dGVuZHMgdHJ1ZVxuICA/IFtMb3dlcmNhc2U8VHlwZSAmIHN0cmluZz5dXG4gIDogSXNDYW1lbENhc2U8VHlwZT4gZXh0ZW5kcyB0cnVlXG4gID8gQ2FtZWxDYXNlUGFyc2VyPFR5cGU+XG4gIDogSXNQYXNjYWxDYXNlPFR5cGU+IGV4dGVuZHMgdHJ1ZVxuICA/IFBhc2NhbENhc2VQYXJzZXI8VHlwZT5cbiAgOiBbXTtcblxudHlwZSBQYXNjYWxDYXBpdGFsaXplcjxUeXBlLCBUdXBsZSBleHRlbmRzIHJlYWRvbmx5IGFueVtdID0gW10+ID0gVHlwZSBleHRlbmRzIFtpbmZlciBIZWFkLCAuLi5pbmZlciBUYWlsXVxuICA/IEhlYWQgZXh0ZW5kcyBzdHJpbmdcbiAgICA/IFBhc2NhbENhcGl0YWxpemVyPFRhaWwsIFsuLi5UdXBsZSwgQ2FwaXRhbGl6ZTxIZWFkPl0+XG4gICAgOiBQYXNjYWxDYXBpdGFsaXplcjxUYWlsLCBUdXBsZT5cbiAgOiBUdXBsZTtcblxudHlwZSBDYW1lbENhcGl0YWxpemVyPFR5cGU+ID0gVHlwZSBleHRlbmRzIFtpbmZlciBGaXJzdCwgLi4uaW5mZXIgVGFpbF0gPyBQYXNjYWxDYXBpdGFsaXplcjxUYWlsLCBbRmlyc3RdPiA6IFtdO1xuXG50eXBlIEpvaW48VHlwZSwgSm9pbmVkU3RyaW5nIGV4dGVuZHMgc3RyaW5nID0gXCJcIj4gPSBUeXBlIGV4dGVuZHMgW2luZmVyIEhlYWQsIC4uLmluZmVyIFRhaWxdXG4gID8gSGVhZCBleHRlbmRzIHN0cmluZ1xuICAgID8gSm9pbjxUYWlsLCBgJHtKb2luZWRTdHJpbmd9JHtIZWFkfWA+XG4gICAgOiBKb2luPFRhaWw+XG4gIDogSm9pbmVkU3RyaW5nO1xuXG5leHBvcnQgdHlwZSBDYW1lbENhc2U8VHlwZT4gPSBJc1N0cmluZ0xpdGVyYWw8VHlwZT4gZXh0ZW5kcyB0cnVlID8gSm9pbjxDYW1lbENhcGl0YWxpemVyPFNwbGl0QW55Q2FzZTxUeXBlPj4+IDogVHlwZTtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGVlcC1jYW1lbC1jYXNlLXByb3BlcnRpZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbWVsQ2FzZSB9IGZyb20gXCIuLi9jYW1lbC1jYXNlXCI7XG5cbmV4cG9ydCB0eXBlIERlZXBDYW1lbENhc2VQcm9wZXJ0aWVzPFR5cGU+ID0gVHlwZSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4gID8geyBbS2V5IGluIGtleW9mIFR5cGUgYXMgQ2FtZWxDYXNlPEtleT5dOiBEZWVwQ2FtZWxDYXNlUHJvcGVydGllczxUeXBlW0tleV0+IH1cbiAgOiBUeXBlO1xuIl19", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvYW55LWZ1bmN0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBBbnlGdW5jdGlvbjxBcmdzIGV4dGVuZHMgYW55W10gPSBhbnlbXSwgUmV0dXJuVHlwZSA9IGFueT4gPSAoLi4uYXJnczogQXJncykgPT4gUmV0dXJuVHlwZTtcbiJdfQ==", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcHJlZGljYXRlLWZ1bmN0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBQcmVkaWNhdGVGdW5jdGlvbiA9ICh4OiBhbnksIC4uLl96OiBhbnlbXSkgPT4geCBpcyBhbnk7XG4iXX0=", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcHJlZGljYXRlLXR5cGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByZWRpY2F0ZUZ1bmN0aW9uIH0gZnJvbSBcIi4uL3ByZWRpY2F0ZS1mdW5jdGlvblwiO1xuXG5leHBvcnQgdHlwZSBQcmVkaWNhdGVUeXBlPFR5cGUgZXh0ZW5kcyBQcmVkaWNhdGVGdW5jdGlvbj4gPSBUeXBlIGV4dGVuZHMgKFxuICB0YXJnZXQ6IGFueSxcbiAgLi4ucmVzdDogYW55W11cbikgPT4gdGFyZ2V0IGlzIGluZmVyIE5hcnJvd2VkVHlwZVxuICA/IE5hcnJvd2VkVHlwZVxuICA6IG5ldmVyO1xuIl19", "export class UnreachableCaseError extends Error {\n  constructor(value: never) {\n    super(`Unreachable case: ${value}`);\n  }\n}\n", "export function assert(condition: any, message: string = \"no additional info provided\"): asserts condition {\n  if (!condition) {\n    throw new Error(\"Assertion Error: \" + message);\n  }\n}\n", "export const createFactoryWithConstraint =\n  <Constraint>() =>\n  <Value extends Constraint>(value: Value): Value =>\n    value;\n", "import { Exact } from \"../../exact\";\n\nexport const isExact =\n  <ExpectedShape>() =>\n  <ActualShape>(x: Exact<ActualShape, ExpectedShape>) =>\n    x as ExpectedShape;\n", "export function noop(..._args: unknown[]): void {}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvYXdhaXRlZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBkZXByZWNhdGVkIHBsZWFzZSB1c2UgYnVpbHRpbiBgQXdhaXRlZGAgKi9cbmV4cG9ydCB0eXBlIEF3YWl0ZWQ8VHlwZT4gPSBUeXBlIGV4dGVuZHMgUHJvbWlzZUxpa2U8aW5mZXIgVmFsdWU+ID8gVmFsdWUgOiBuZXZlcjtcbiJdfQ==", "// Basic\n\nexport * from \"./primitive\";\nexport * from \"./built-in\";\nexport * from \"./key-of-base\";\nexport * from \"./strict-exclude\";\nexport * from \"./strict-extract\";\nexport * from \"./strict-omit\";\nexport * from \"./writable\";\n\n// Utility types\n\nexport * from \"./async-or-sync\";\nexport * from \"./async-or-sync-type\";\nexport * from \"./dictionary\";\nexport * from \"./dictionary-values\";\nexport * from \"./merge\";\nexport * from \"./merge-n\";\nexport * from \"./newable\";\nexport * from \"./non-never\";\nexport * from \"./omit-properties\";\nexport * from \"./opaque\";\nexport * from \"./path-value\";\nexport * from \"./paths\";\nexport * from \"./pick-properties\";\nexport * from \"./prettify\";\nexport * from \"./safe-dictionary\";\nexport * from \"./union-to-intersection\";\nexport * from \"./value-of\";\nexport * from \"./xor\";\n\n// Mark wrapper types\n\nexport * from \"./mark-optional\";\nexport * from \"./mark-readonly\";\nexport * from \"./mark-required\";\nexport * from \"./mark-writable\";\n\n// Deep wrapper types\n\nexport * from \"./buildable\";\nexport * from \"./deep-mark-optional\";\nexport * from \"./deep-mark-required\";\nexport * from \"./deep-non-nullable\";\nexport * from \"./deep-nullable\";\nexport * from \"./deep-omit\";\nexport * from \"./deep-partial\";\nexport * from \"./deep-pick\";\nexport * from \"./deep-readonly\";\nexport * from \"./deep-required\";\nexport * from \"./deep-undefinable\";\nexport * from \"./deep-writable\";\nexport * from \"./strict-deep-omit\";\nexport * from \"./strict-deep-pick\";\n\n// Key types\n\nexport * from \"./optional-keys\";\nexport * from \"./pick-keys\";\nexport * from \"./readonly-keys\";\nexport * from \"./required-keys\";\nexport * from \"./writable-keys\";\n\n// Type checkers\n\nexport * from \"./exact\";\nexport * from \"./is-any\";\nexport * from \"./is-never\";\nexport * from \"./is-unknown\";\nexport * from \"./is-tuple\";\nexport * from \"./non-empty-object\";\n\n// Arrays and Tuples\n\nexport * from \"./any-array\";\nexport * from \"./array-or-single\";\nexport * from \"./element-of\";\nexport * from \"./head\";\nexport * from \"./non-empty-array\";\nexport * from \"./readonly-array-or-single\";\nexport * from \"./tail\";\nexport * from \"./tuple\";\n\n// Change case\n\nexport * from \"./camel-case\";\nexport * from \"./deep-camel-case-properties\";\n\n// Function types\n\nexport * from \"./any-function\";\nexport * from \"./predicate-function\";\nexport * from \"./predicate-type\";\n\n// Utility functions\n\nexport * from \"./functions/unreachable-case-error\";\nexport * from \"./functions/assert\";\nexport * from \"./functions/create-factory-with-constraint\";\nexport * from \"./functions/is-exact\";\nexport * from \"./functions/noop\";\n\n// Build-in types\n\nexport * from \"./awaited\";\n", "import { EnumerateLiteral, APIVersion } from './types';\n\nimport type { ContractMethod } from '@paraswap/core';\n\nexport {\n  SwapSide,\n  ContractMethod,\n  ContractMethodV5,\n  ContractMethodV6,\n} from '@paraswap/core';\n\n// allows to pass by name instead of importing enum first\nexport type ContractMethodByName = EnumerateLiteral<typeof ContractMethod>;\n\nexport const API_URL = 'https://api.paraswap.io';\nexport const DEFAULT_VERSION = '6.2' satisfies APIVersion;\n", "import type { Primitive } from 'ts-essentials';\n\nexport const objectToFilledEntries = <T extends Record<string, unknown>>(\n  object: T\n): [string, string][] => {\n  return (\n    Object.entries(object)\n      // removes keys with undefined values\n      .filter(([, value]) => value !== undefined)\n      .map(([key, value]) => [key, String(value)])\n  );\n};\n\nexport const constructSearchString = <\n  //                               not arrays or mappings\n  U extends Record<string, Exclude<Primitive, symbol>>\n>(\n  queryOptions: U\n): `?${string}` | '' => {\n  const queryEntries = objectToFilledEntries(queryOptions);\n\n  const queryString = new URLSearchParams(queryEntries).toString();\n\n  // returns empty string or `?${string}`\n  return queryString && `?${queryString}`;\n};\n\ntype MinAxiosError = {\n  code?: string;\n  request?: any;\n  isAxiosError: boolean;\n  message: string;\n};\n\ntype MinAxiosResponse = {\n  data: any;\n  status: number;\n  statusText: string;\n  headers: Record<string, any>;\n  config: { url?: string; method?: string };\n};\n\ntype FetcherErrorConstructorInput = MinAxiosError & {\n  response?: MinAxiosResponse;\n};\n\nexport interface FetcherErrorInterface extends FetcherErrorConstructorInput {\n  status?: number;\n  code?: string;\n}\n\nexport const isFetcherError = (error: unknown): error is FetcherError => {\n  return error instanceof FetcherError;\n};\n\nexport class FetcherError extends Error implements FetcherErrorInterface {\n  code;\n  status;\n  request;\n  response;\n  isAxiosError = false;\n\n  public constructor({\n    code,\n    request,\n    response,\n    isAxiosError,\n    message,\n  }: FetcherErrorConstructorInput) {\n    super();\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetcherError);\n    }\n\n    this.name = this.constructor.name;\n    this.code = code;\n    this.request = request;\n    this.isAxiosError = isAxiosError;\n\n    // no response on AxiosError\n    if (!response) {\n      this.message = message;\n      return;\n    }\n\n    this.response = response;\n\n    const { data, status } = response;\n    this.status = status;\n    this.message = isDataWithError(data) ? data.error : message;\n    this.message = isDataWithError2(data)\n      ? `${data.errorType}${data.description ? `: ${data.description}` : ''}`\n      : this.message;\n  }\n}\n// to turn `object -> Record` for indexed variable access\nfunction isObject(obj: unknown): obj is Record<string | symbol, any> {\n  return !!obj && typeof obj === 'object';\n}\n\nexport function isDataWithError(data: unknown): data is { error: string } {\n  return isObject(data) && typeof data['error'] === 'string';\n}\nexport function isDataWithError2(\n  data: unknown\n): data is { errorType: string; description?: string } {\n  return isObject(data) && typeof data['errorType'] === 'string';\n}\n\nexport type ExtractAbiMethodNames<T extends readonly { name: string }[]> =\n  T[number]['name'];\n\n// reduce element[] to Object{key: prop, val?: element}\n// for example\n// gatherObjectsByProp(Token[], token => token.address) => Record<address, Token|undefined>\nexport function gatherObjectsByProp<T>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string\n): Record<string, T>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transfrom: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, U>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transform?: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, T> | Record<string, U> {\n  return elements.reduce<Record<string, T> | Record<string, U>>(\n    (accum, element, index) => {\n      const key = pickProp(element, index);\n\n      const accumElem: T | U | undefined = accum[key];\n      const transformedElement = transform\n        ? //                       if transform is available, can only be U | undefined\n          transform(element, accumElem as U | undefined, index)\n        : element;\n\n      accum[key] = transformedElement;\n\n      return accum;\n    },\n    {}\n  );\n}\n\n// checks that array has at least one element\nexport const isFilledArray = <T>(array: T[]): array is [T, ...T[]] => {\n  return array.length > 0;\n};\n\nexport function getRandomInt(): number {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nexport function runOnceAndCache<T, Args extends any[]>(\n  // can pass `(...any[]) => any but null | undefined`\n  func: (...args: Args) => NonNullable<T>\n): (...args: Args) => NonNullable<T> {\n  let result: NonNullable<T>;\n\n  return (...args) => {\n    return result ?? (result = func(...args));\n  };\n}\n", "import { API_URL, DEFAULT_VERSION } from '../../constants';\nimport { constructSearchString, runOnceAndCache } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  Address,\n  RequestParameters,\n} from '../../types';\n\nexport type GetSpender = (\n  requestParams?: RequestParameters\n) => Promise<Address>;\ntype GetContracts = (\n  requestParams?: RequestParameters\n) => Promise<AdaptersContractsResult>;\n\nexport type GetSpenderFunctions = {\n  getSpender: GetSpender;\n  getAugustusSwapper: GetSpender;\n  getAugustusRFQ: GetSpender;\n  getContracts: GetContracts;\n};\n\nexport interface AdaptersContractsResult {\n  AugustusSwapper: string;\n  TokenTransferProxy: string;\n  AugustusRFQ: string;\n  Executors: {\n    [key: `Executor${number}`]: string;\n  };\n  ParaswapDelta?: string; // only available on chains with Delta support\n}\n\nexport const constructGetSpender = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetSpenderFunctions => {\n  const search = constructSearchString<{ network: number; version: string }>({\n    network: chainId,\n    version,\n  });\n\n  const fetchURL = `${apiURL}/adapters/contracts${search}` as const;\n\n  const _getContracts: GetContracts = async (requestParams) => {\n    const data = await fetcher<AdaptersContractsResult>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  // cached for the same instance of `{getContracts, getSpender, getAugustusSwapper, getAugustusRFQ} = constructGetSpender()`\n  // so should persist across same apiUrl & network\n  const getContracts = runOnceAndCache(_getContracts);\n\n  const getSpender: GetSpender = async (requestParams) => {\n    const { TokenTransferProxy } = await getContracts(requestParams);\n    return TokenTransferProxy;\n  };\n\n  const getAugustusSwapper: GetSpender = async (requestParams) => {\n    const { AugustusSwapper } = await getContracts(requestParams);\n    return AugustusSwapper;\n  };\n\n  const getAugustusRFQ: GetSpender = async (requestParams) => {\n    const { AugustusRFQ } = await getContracts(requestParams);\n    return AugustusRFQ;\n  };\n\n  return { getContracts, getSpender, getAugustusSwapper, getAugustusRFQ };\n};\n", "import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../types';\nimport type { ExtractAbiMethodNames } from '../helpers/misc';\nimport type { Address, PriceString } from './token';\n\n// much smaller than the whole ERC20_ABI\nconst MinERC20Abi = [\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinERC20Abi>;\n\ntype ApproveContractCaller<T> = ConstructProviderFetchInput<\n  T,\n  'transactCall'\n>['contractCaller'];\n\nexport type ApproveToken<T> = (\n  amount: PriceString,\n  tokenAddress: Address,\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type GetSpenderAsyncOrSync = (\n  requestParams?: RequestParameters\n) => Address | Promise<Address>;\n\nexport function approveTokenMethodFactory<T>(\n  contractCaller: ApproveContractCaller<T>,\n  getSpender: GetSpenderAsyncOrSync\n): ApproveToken<T> {\n  return async (amount, tokenAddress, overrides = {}, requestParams) => {\n    const spender = await getSpender(requestParams);\n\n    const res = await contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinERC20Abi,\n      contractMethod: 'approve',\n      args: [spender, amount],\n      overrides,\n    });\n\n    return res;\n  };\n}\n", "import { constructGetSpender } from './spender';\nimport type {\n  ConstructProviderFetchInput,\n  TxSendOverrides,\n  Address,\n  PriceString,\n  RequestParameters,\n} from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\n\ntype ApproveTokenBulk<T> = (\n  amount: PriceString,\n  tokenAddresses: Address[],\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<Awaited<T>[]>;\n\nexport type ApproveTokenFunctions<T> = {\n  approveToken: ApproveToken<T>;\n  approveTokenBulk: ApproveTokenBulk<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveToken = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenFunctions<T> => {\n  // getSpender is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getSpender } = constructGetSpender(options);\n\n  const approveToken: ApproveToken<T> = approveTokenMethodFactory<T>(\n    options.contractCaller,\n    getSpender\n  );\n\n  const approveTokenBulk: ApproveTokenBulk<T> = async (\n    amount,\n    tokenAddresses,\n    overrides,\n    requestParams\n  ) => {\n    return Promise.all(\n      tokenAddresses.map((tokenAddress) =>\n        approveToken(amount, tokenAddress, overrides, requestParams)\n      )\n    );\n  };\n\n  return { approveToken, approveTokenBulk };\n};\n", "import type { MarkOptional } from 'ts-essentials';\n\n/**\n * @type hex token or account address\n */\nexport type Address = string;\n/**\n * @type hex token address or token symbol\n */\nexport type AddressOrSymbol = string;\n/**\n * @type number in string form\n */\nexport type PriceString = string;\n/**\n * @type transaction hash\n */\nexport type TxHash = `0x${string}`;\n\n// @TODO sync with what it actually is\nexport type LendingToken =\n  | 'cToken'\n  | 'iToken'\n  | 'aToken'\n  | 'aToken2'\n  | 'idleToken'\n  | 'Chai'\n  | 'bDAI';\n\nexport type TokenType = 'ETH' | 'ERC20' | 'SYNTH';\n\n/**\n * @type Token object returned from API used internally in API\n */\n// consider if need the old class Token for backwards compatipility\n// otherwise no real need\nexport type Token = {\n  address: string;\n  decimals: number;\n  symbol?: string | undefined;\n  tokenType: LendingToken | TokenType;\n  mainConnector: string;\n  connectors: string[];\n  network: number;\n  img?: string | undefined;\n  allowance?: string | undefined;\n  balance?: string | undefined;\n};\n\ntype ConstructTokenInput = MarkOptional<\n  Token,\n  // these props are constructed from other, required props\n  'tokenType' | 'mainConnector' | 'connectors' | 'network'\n>;\n\nexport const constructToken = (tokenProps: ConstructTokenInput): Token => {\n  const {\n    tokenType = 'ERC20',\n    mainConnector = 'ETH',\n    connectors: connectorsInput = [],\n    network = 1,\n    ...rest\n  } = tokenProps;\n\n  const connectors: Token['connectors'] =\n    connectorsInput.length > 0 ? connectorsInput : [mainConnector];\n\n  return {\n    tokenType,\n    connectors,\n    mainConnector,\n    network,\n    ...rest,\n  };\n};\n", "import { API_URL } from '../../constants';\nimport {\n  Token,\n  Address,\n  constructToken,\n  AddressOrSymbol,\n} from '../../helpers/token';\nimport type {\n  ConstructFetchInput,\n  TokenApiResponse,\n  TokensApiResponse,\n  RequestParameters,\n} from '../../types';\n\ntype GetBalances = (\n  userAddress: Address,\n  requestParams?: RequestParameters\n) => Promise<Token[]>;\ntype GetBalance = (\n  userAddress: Address,\n  tokenAddressOrSymbol: AddressOrSymbol,\n  requestParams?: RequestParameters\n) => Promise<Token | typeof NOT_FOUND_RESPONSE>;\n\nexport interface Allowance {\n  tokenAddress: Address;\n  allowance: string;\n}\n\ntype GetAllowances = (\n  userAddress: Address,\n  tokenAddresses: Address[],\n  requestParams?: RequestParameters\n) => Promise<Allowance[]>;\ntype GetAllowance = (\n  userAddress: Address,\n  tokenAddress: Address,\n  requestParams?: RequestParameters\n) => Promise<Allowance | typeof NOT_FOUND_RESPONSE>;\n\nexport const isAllowance = (\n  arg: Awaited<ReturnType<GetAllowance>>\n): arg is Allowance => {\n  return 'allowance' in arg;\n};\n\nexport type GetBalancesFunctions = {\n  getBalance: GetBalance;\n  getBalances: GetBalances;\n  getAllowance: GetAllowance;\n  getAllowances: GetAllowances;\n};\n\nconst NOT_FOUND_RESPONSE = { message: 'Not Found' } as const;\n\nexport const constructGetBalances = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetBalancesFunctions => {\n  const tokensUrl = `${apiURL}/users/tokens/${chainId}` as const;\n\n  const getBalances: GetBalances = async (userAddress, requestParams) => {\n    const fetchURL = `${tokensUrl}/${userAddress}` as const;\n\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n\n    return tokens;\n  };\n\n  const getBalance: GetBalance = async (\n    userAddress,\n    tokenAddressOrSymbol,\n    requestParams\n  ) => {\n    const fetchURL =\n      `${tokensUrl}/${userAddress}/${tokenAddressOrSymbol}` as const;\n\n    const data = await fetcher<TokenApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    if (!data.token) {\n      return NOT_FOUND_RESPONSE;\n    }\n\n    return constructToken(data.token);\n  };\n\n  const getAllowances: GetAllowances = async (\n    userAddress,\n    tokenAddresses,\n    requestParams\n  ) => {\n    const tokenAddressesLowercaseSet = new Set(\n      tokenAddresses.map((address) => address.toLowerCase())\n    );\n\n    const balances = await getBalances(userAddress, requestParams);\n\n    const allowances: Allowance[] = balances\n      .filter((token) =>\n        tokenAddressesLowercaseSet.has(token.address.toLowerCase())\n      )\n      .map(({ address, allowance = '0' }) => ({\n        tokenAddress: address,\n        allowance,\n      }));\n\n    return allowances;\n  };\n\n  const getAllowance: GetAllowance = async (\n    userAddress,\n    tokenAddress,\n    requestParams\n  ) => {\n    const balanceOrNotFound = await getBalance(\n      userAddress,\n      tokenAddress,\n      requestParams\n    );\n\n    if ('message' in balanceOrNotFound) {\n      return balanceOrNotFound;\n    }\n\n    const { address, allowance = '0' } = balanceOrNotFound;\n\n    return { tokenAddress: address, allowance };\n  };\n\n  return {\n    getBalance,\n    getBalances,\n    getAllowance,\n    getAllowances,\n  };\n};\n", "import type {\n  ConstructFetchInput,\n  APIVersion,\n  RequestParameters,\n} from '../../types';\nimport { constructSearchString } from '../../helpers/misc';\nimport { API_URL, DEFAULT_VERSION } from '../../constants';\n\ntype AdaptersAsStrings = string[];\n\nexport type GetAdaptersFunctions = {\n  getAdapters: (\n    requestParams?: RequestParameters\n  ) => Promise<AdaptersAsStrings>;\n};\n\ntype SearchStringParams = {\n  network: number;\n  version?: APIVersion;\n};\n\nexport const constructGetAdapters = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetAdaptersFunctions => {\n  const getAdapters: GetAdaptersFunctions['getAdapters'] = async (\n    requestParams\n  ): Promise<AdaptersAsStrings> => {\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const query = constructSearchString<SearchStringParams>({\n      network: chainId,\n      version,\n    });\n\n    const fetchURL = `${apiURL}/adapters/list${query}` as const;\n\n    const data = await fetcher<AdaptersAsStrings>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  return { getAdapters };\n};\n", "import type { PickKeys } from 'ts-essentials';\nimport type { RateOptions } from '../rates';\n\ntype StringArrKeys = PickKeys<RateOptions, string[] | undefined>;\n\ntype MinRateOptionsInput = Pick<RateOptions, StringArrKeys> &\n  Pick<RateOptions, 'partner'>;\n\ntype NormalizedRateOptions<\n  O extends MinRateOptionsInput,\n  T extends { options?: Partial<O> }\n> = Partial<Record<StringArrKeys | 'partner', string>> &\n  Partial<Omit<O, StringArrKeys | 'partner'>> &\n  Omit<T, 'options'>;\n\nexport function normalizeRateOptions<\n  O extends MinRateOptionsInput,\n  T extends { options?: Partial<O> }\n>({ options = {}, ...restInput }: T): NormalizedRateOptions<O, T> {\n  const {\n    excludeContractMethods,\n    includeContractMethods,\n    partner,\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    ...restOptions\n  } = options;\n\n  const [\n    _includeDEXS,\n    _excludeDEXS,\n    _excludePools,\n    _excludeContractMethods,\n    _includeContractMethods,\n  ] = [\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    excludeContractMethods,\n    includeContractMethods,\n    //                                                                                              no \"\" empty string\n  ].map((array) => array?.join(',') || undefined);\n\n  const transformed: Partial<Record<StringArrKeys | 'partner', string>> = {\n    excludeContractMethods: _excludeContractMethods,\n    includeContractMethods: _includeContractMethods,\n    partner,\n    includeDEXS: _includeDEXS,\n    excludeDEXS: _excludeDEXS,\n    excludePools: _excludePools,\n  };\n\n  return { ...transformed, ...restOptions, ...restInput };\n}\n", "import {\n  API_URL,\n  DEFAULT_VERSION,\n  ContractMethodByName,\n} from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  PriceRouteApiResponse,\n  Address,\n  AddressOrSymbol,\n  PriceString,\n  OptimalRate,\n  RequestParameters,\n} from '../../types';\nimport { normalizeRateOptions } from './helpers/normalizeRateOptions';\n\ntype RateQueryParams = {\n  /**\n   * @description Source Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  srcToken: string;\n\n  /**\n   * @description Source Token Decimals. (Can be omitted if Token Symbol is used in `srcToken`).\n   */\n  srcDecimals?: number;\n\n  /**\n   * @description Destination Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  destToken: string;\n\n  /**\n   * @description srcToken amount (in case of SELL) or destToken amount (in case of BUY). The amount should be in **WEI/Raw units** (eg. 1WBTC -> 100000000).\n   */\n  amount: string;\n\n  /**\n   * @description **SELL** or **BUY**. Default: `SELL`.\n   */\n  side?: 'SELL' | 'BUY';\n\n  /**\n   * @description Network ID. (Mainnet - 1, Optimism - 10, BSC - 56, Polygon - 137, Fantom - 250, zkEVM - 1101, Base - 8453, Arbitrum - 42161, Avalanche - 43114). Default: `1`.\n   */\n  network?: number;\n\n  /**\n   * @description If provided, **others** object is filled in the response with price quotes from other exchanges _(if available for comparison)_. Default: `false`.\n   */\n  otherExchangePrices?: boolean;\n\n  /**\n   * @description Comma Separated List of DEXs to include. **Supported DEXs:** UniswapV2, UniswapV3, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, Balancer, MakerDAO, Chai, Aave, Aave2 and more. You can view all currently supported dexes filtered by chain [here](https://api.paraswap.io/adapters/list/1) eg: `UniswapV3,MakerDAO`.\n   */\n  includeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to include in pricing (without spaces). View the list of the supported methods for [V5](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v5#supported-methods) and [V6](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v6.2#supported-methods) eg: `swapExactAmountIn,swapExactAmountInOnUniswapV2`.\n   */\n  includeContractMethods?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to exclude from pricing (without spaces). View the list of the supported methods for [V5](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v5#supported-methods) and [V6](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v6.2#supported-methods).\n   */\n  excludeContractMethods?: string;\n\n  /**\n   * @description User's Wallet Address.\n   */\n  userAddress?: string;\n\n  /**\n   * @description Dash (-) separated list of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string;\n\n  /**\n   * @description Partner string.\n   */\n  partner?: string;\n\n  /**\n   * @description Destination Token Decimals. (Can be omitted if Token Symbol is used in `destToken`).\n   */\n  destDecimals?: number;\n\n  /**\n   * @description In %. It's a way to bypass the API price impact check (default = 15%).\n   */\n  maxImpact?: number;\n\n  /**\n   * @description Receiver's Wallet address. (Can be omitted if swapping tokens from and to same account).\n   */\n  receiver?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  srcTokenTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  destTokenTransferFee?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.\n   */\n  srcTokenDexTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs, not on ordinary transfers.\n   */\n  destTokenDexTransferFee?: string;\n\n  /**\n   * @description To specify the protocol version. **Values:** 5 or 6.2 **Default**: 5.\n   */\n  version?: number | string;\n\n  /**\n   * @description Specify that methods without fee support should be excluded from the price route. Default: `false`.\n   */\n  excludeContractMethodsWithoutFeeModel?: boolean;\n\n  /**\n   * @description If tokens USD prices are not available, `Bad USD Price` error will be thrown. Use this param to skip this check. Default: `false`.\n   */\n  ignoreBadUsdPrice?: boolean;\n  /**\n   * @description \tExclude all RFQs from pricing, e.g.: AugustusRFQ, Hashflow. Default: false\n   */\n  excludeRFQ?: boolean;\n};\n\n// more details in the docs https://developers.velora.xyz/api/velora-api/velora-market-api/get-rate-for-a-token-pair#query-parameters\nexport type RateOptions = {\n  excludeDEXS?: string[];\n  includeDEXS?: string[];\n  excludePools?: string[];\n  excludeContractMethods?: ContractMethodByName[];\n  includeContractMethods?: ContractMethodByName[];\n  partner?: string;\n  /** @description In %. It's a way to bypass the API price impact check (default = 15%) */\n  maxImpact?: number;\n  maxUSDImpact?: number;\n  otherExchangePrices?: boolean;\n  /** @description proceed with priceRoute building even when tokens don't have USD price. Default: false */\n  ignoreBadUsdPrice?: boolean;\n  /** @description Exclude all RFQs from pricing, e.g.: AugustusRFQ, Hashflow. Default: false */\n  excludeRFQ?: boolean;\n  /** @description \tSpecify that methods without fee support should be excluded from the price route. Default: false */\n  excludeContractMethodsWithoutFeeModel?: boolean;\n  /** @description If the source token is a tax token, you should specify the tax amount in BPS.  */\n  srcTokenTransferFee?: string;\n  /** @description If the destination token is a tax token, you should specify the tax amount in BPS.  */\n  destTokenTransferFee?: string;\n  /** @description Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.  */\n  srcTokenDexTransferFee?: string;\n  /** @description Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.  */\n  destTokenDexTransferFee?: string;\n};\n\ntype CommonGetRateInput = {\n  amount: PriceString;\n  userAddress?: Address;\n  side?: 'SELL' | 'BUY';\n  options?: RateOptions;\n  srcDecimals?: number;\n  destDecimals?: number;\n};\n\nexport type GetRateInput = CommonGetRateInput & {\n  srcToken: AddressOrSymbol;\n  destToken: AddressOrSymbol;\n};\n\nexport type GetRate = (\n  options: GetRateInput,\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\ntype GetRateByRouteInput = CommonGetRateInput & {\n  route: AddressOrSymbol[];\n};\n\ntype GetRateByRoute = (\n  options: GetRateByRouteInput,\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\nexport type GetRateFunctions = {\n  getRate: GetRate;\n  getRateByRoute: GetRateByRoute;\n};\nconst INVALID_ROUTE = 'Invalid Route';\n\nexport const constructGetRate = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetRateFunctions => {\n  const pricesUrl = `${apiURL}/prices` as const;\n\n  const getRate: GetRate = async (\n    { srcToken, destToken, ...rest },\n    requestParams\n  ) => {\n    const parsedOptions = normalizeRateOptions(rest);\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<Omit<RateQueryParams, 'route'>>({\n      srcToken,\n      destToken,\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.priceRoute;\n  };\n\n  const getRateByRoute: GetRateByRoute = async (\n    { route, ...rest },\n    requestParams\n  ) => {\n    if (route.length < 2) {\n      throw new Error(INVALID_ROUTE);\n    }\n\n    const parsedOptions = normalizeRateOptions(rest);\n\n    const _route = route.join('-');\n\n    const search = constructSearchString<\n      Omit<RateQueryParams, 'srcToken' | 'destToken'>\n    >({\n      route: _route, // route can be used in place of srcToken+destToken\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.priceRoute;\n  };\n\n  return {\n    getRate,\n    getRateByRoute,\n  };\n};\n", "import {\n  API_URL,\n  DEFAULT_VERSION,\n  ContractMethodByName,\n} from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  RequestParameters,\n  SwapApiResponse,\n} from '../../types';\nimport { normalizeRateOptions } from './helpers/normalizeRateOptions';\n\n/**\n * Types for transaction parameters.\n */\ntype SwapQueryParams = {\n  /**\n   * @description Source Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  srcToken: string;\n\n  /**\n   * @description Source Token Decimals. (Can be omitted if Token Symbol is used in `srcToken`).\n   */\n  srcDecimals?: number;\n\n  /**\n   * @description Destination Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  destToken: string;\n\n  /**\n   * @description srcToken amount (in case of SELL) or destToken amount (in case of BUY). The amount should be in **WEI/Raw units** (eg. 1WBTC -> 100000000).\n   */\n  amount: string;\n\n  /**\n   * @description **SELL** or **BUY**. Default: `SELL`.\n   */\n  side: 'SELL' | 'BUY';\n\n  /**\n   * @description Network ID. (Mainnet - 1, Optimism - 10, BSC - 56, Polygon - 137, Fantom - 250, zkEVM - 1101, Base - 8453, Arbitrum - 42161, Avalanche - 43114). Default: `1`.\n   */\n  network?: number;\n\n  /**\n   * @description Comma Separated List of DEXs to include. **Supported DEXs:** Uniswap, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, 0x, MakerDAO, Chai, Aave, Aave2, MultiPath, MegaPath, Curve, Curve3, Saddle, IronV2, BDai, idle, Weth, Beth, UniswapV2, Balancer, 0xRFQt, SushiSwap, LINKSWAP, Synthetix, DefiSwap, Swerve, CoFiX, Shell, DODOV1, DODOV2, OnChainPricing, PancakeSwap, PancakeSwapV2, ApeSwap, Wbnb, acryptos, streetswap, bakeryswap, julswap, vswap, vpegswap, beltfi, ellipsis, QuickSwap, COMETH, Wmatic, Nerve, Dfyn, UniswapV3, Smoothy, PantherSwap, OMM1, OneInchLP, CurveV2, mStable, WaultFinance, MDEX, ShibaSwap, CoinSwap, SakeSwap, JetSwap, Biswap, BProtocol eg: `UniswapV3,0x`.\n   */\n  includeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to include without spaces. **Available values:** swapOnUniswap, buyOnUniswap, swapOnUniswapFork, buyOnUniswapFork, swapOnUniswapV2Fork, buyOnUniswapV2Fork, simpleBuy, simpleSwap, multiSwap, megaSwap, protectedMultiSwap, protectedMegaSwap, protectedSimpleSwap, protectedSimpleBuy, swapOnZeroXv2, swapOnZeroXv4, buy. eg: `simpleSwap,multiSwap`.\n   */\n  includeContractMethods?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to exclude without spaces. (from the list of contract methods mentioned above).\n   */\n  excludeContractMethods?: string;\n\n  /**\n   * @description User's Wallet Address.\n   */\n  userAddress: string;\n\n  /**\n   * @description Dash (-) separated list of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string;\n\n  /**\n   * @description Partner string.\n   */\n  partner?: string;\n\n  /**\n   * @description If provided it is used together with `partnerAddress`. Should be in basis points percentage. Look at `slippage` parameter description for understanding better. Eg: `200` (for 2% fee percent). Fees have to be claimed from the Fee Claimer contract unless `_isSurplusToUser_` or `_isDirectFeeTransfer_` are used.\n   */\n  partnerFeeBps?: string;\n\n  /**\n   * @description Address that will be entitled to claim fees or surplus. Fees have to be claimed from the Fee Claimer contract unless `_isSurplusToUser_` or `_isDirectFeeTransfer_` are used.\n   */\n  partnerAddress?: string;\n\n  /**\n   * @description Allowed slippage percentage represented in basis points. _Eg:_ for **2.5%** slippage, set the value to **2.5 \\* 100 = 250**; for 10% = 1000.\n   */\n  slippage: number;\n\n  /**\n   * @description Destination Token Decimals. (Can be omitted if Token Symbol is used in `destToken`).\n   */\n  destDecimals?: number;\n\n  /**\n   * @description In %. It's a way to bypass the API price impact check (default = 15%).\n   */\n  maxImpact?: number;\n\n  /**\n   * @description Receiver's Wallet address. (Can be omitted if swapping tokens from and to same account).\n   */\n  receiver?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  srcTokenTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  destTokenTransferFee?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.\n   */\n  srcTokenDexTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs, not on ordinary transfers.\n   */\n  destTokenDexTransferFee?: string;\n\n  /**\n   * @description To specify the protocol version. **Values:** 5 or 6.2 **Default**: 5.\n   */\n  version?: number | string;\n\n  /**\n   * @description If tokens USD prices are not available, `Bad USD Price` error will be thrown. Use this param to skip this check. Default: `false`.\n   */\n  ignoreBadUsdPrice?: boolean;\n\n  /**\n   * @description Specify if user should receive surplus instead of partner. Default: `false`.\n   */\n  isSurplusToUser?: boolean;\n\n  /**\n   * @description Specify if fees should be sent directly to the partner instead of registering them on FeeClaimer. Default: `false`.\n   */\n  isDirectFeeTransfer?: boolean;\n\n  /**\n   * @description Allows for capping the surplus at 1% maximum. Default: `true`.\n   */\n  isCapSurplus?: boolean;\n\n  /**\n   * @description Allows to collect surplus. Works with `partnerAddress`. Default: `false`.\n   */\n  takeSurplus?: boolean;\n};\n\ntype SwapTxInputFields =\n  | 'srcToken'\n  | 'destToken'\n  | 'amount'\n  | 'side'\n  | 'srcDecimals'\n  | 'destDecimals'\n  | 'userAddress'\n  | 'slippage';\ntype SwapTxInputListFields =\n  | 'includeDEXS'\n  | 'excludeDEXS'\n  | 'includeContractMethods'\n  | 'excludeContractMethods'\n  | 'route';\n\ntype SwapRateOptions = Omit<\n  SwapQueryParams,\n  SwapTxInputFields | SwapTxInputListFields | 'network' | 'version'\n> & {\n  /**\n   * @description List of DEXs to include. **Supported DEXs:** Uniswap, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, 0x, MakerDAO, Chai, Aave, Aave2, MultiPath, MegaPath, Curve, Curve3, Saddle, IronV2, BDai, idle, Weth, Beth, UniswapV2, Balancer, 0xRFQt, SushiSwap, LINKSWAP, Synthetix, DefiSwap, Swerve, CoFiX, Shell, DODOV1, DODOV2, OnChainPricing, PancakeSwap, PancakeSwapV2, ApeSwap, Wbnb, acryptos, streetswap, bakeryswap, julswap, vswap, vpegswap, beltfi, ellipsis, QuickSwap, COMETH, Wmatic, Nerve, Dfyn, UniswapV3, Smoothy, PantherSwap, OMM1, OneInchLP, CurveV2, mStable, WaultFinance, MDEX, ShibaSwap, CoinSwap, SakeSwap, JetSwap, Biswap, BProtocol eg: `UniswapV3,0x`.\n   */\n  includeDEXS?: string[];\n\n  /**\n   * @description List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string[];\n\n  /**\n   * @description List of Contract Methods to include without spaces. **Available values:** swapOnUniswap, buyOnUniswap, swapOnUniswapFork, buyOnUniswapFork, swapOnUniswapV2Fork, buyOnUniswapV2Fork, simpleBuy, simpleSwap, multiSwap, megaSwap, protectedMultiSwap, protectedMegaSwap, protectedSimpleSwap, protectedSimpleBuy, swapOnZeroXv2, swapOnZeroXv4, buy. eg: `simpleSwap,multiSwap`.\n   */\n  includeContractMethods?: ContractMethodByName[];\n\n  /**\n   * @description List of Contract Methods to exclude without spaces. (from the list of contract methods mentioned above).\n   */\n  excludeContractMethods?: ContractMethodByName[];\n};\n\ntype SwapTxInput = Pick<SwapQueryParams, SwapTxInputFields> & {\n  /**\n   * @description List of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string[];\n\n  options?: SwapRateOptions;\n};\n\nexport type SwapTxResult = SwapApiResponse;\n\nexport type GetSwapTxData = (\n  options: SwapTxInput,\n  requestParams?: RequestParameters\n) => Promise<SwapTxResult>;\n\nexport type GetSwapTxFunctions = {\n  getSwapTxData: GetSwapTxData;\n};\n\nexport const constructSwapTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetSwapTxFunctions => {\n  const pricesUrl = `${apiURL}/swap` as const;\n\n  const getSwapTxData: GetSwapTxData = async (\n    { srcToken, destToken, amount, route, ...rest },\n    requestParams\n  ) => {\n    const parsedOptions = normalizeRateOptions(rest);\n\n    const _route = route?.join('-');\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SwapQueryParams>({\n      amount,\n      srcToken,\n      destToken,\n      route: _route,\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<SwapApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  return {\n    getSwapTxData,\n  };\n};\n", "import { API_URL } from '../../constants';\nimport { constructToken } from '../../helpers/token';\nimport type {\n  RequestParameters,\n  ConstructFetchInput,\n  Token,\n  TokensApiResponse,\n} from '../../types';\n\ntype GetTokens = (extra?: RequestParameters) => Promise<Token[]>;\n\nexport type GetTokensFunctions = {\n  getTokens: GetTokens;\n};\n\nexport const constructGetTokens = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetTokensFunctions => {\n  const fetchURL = `${apiURL}/tokens/${chainId}` as const;\n\n  const getTokens: GetTokens = async (requestParams) => {\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n    return tokens;\n  };\n\n  return { getTokens };\n};\n", "export const name = 'AUGUSTUS RFQ';\nexport const version = '1';\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\n\ntype TypedDataDomain = {\n  name?: string;\n  version?: string;\n  chainId?: bigint | string | number;\n  verifyingContract?: string;\n  salt?: string;\n};\n\nexport type TypedDataField = {\n  name: string;\n  type: string;\n};\n\nexport type SignableTypedData = {\n  types: Record<string, TypedDataField[]>;\n  domain: TypedDataDomain;\n  data: Record<string, any>;\n};\n\nexport type Domain = {\n  name: string;\n  version: string;\n  chainId: number;\n  verifyingContract: string;\n};\n", "import type { LimitOrderFromApi } from '../../limitOrders/helpers/types';\nimport { ZERO_ADDRESS } from './buildOrderData';\nimport type { OrderType } from './types';\n\ntype GetBaseFetchUrlInput = {\n  apiURL: string;\n  chainId: number;\n};\n\nexport type BaseFetchUrlInputConstructor<Kind extends OrderKind> = (\n  params: GetBaseFetchUrlInput\n) => UrlByTypeFunction<Kind>;\n\ntype OrderType2URLPart = {\n  LIMIT: 'orders';\n  P2P: 'p2p';\n};\n\ntype OrderKind = 'nft' | 'ft';\n\nexport type BaseFetchUrl<\n  Kind extends OrderKind,\n  Type extends OrderType = OrderType\n> = `${string}/${Kind}/${OrderType2URLPart[Type]}/${number}`;\n\nexport type MinFetchUrl<Kind extends OrderKind> = `${string}/${Kind}/order`;\nexport type OrderFillableBalanceFetchUrl<Kind extends OrderKind> =\n  `${string}/${Kind}/fillablebalance/${number}`;\n\ninterface UrlByTypeFunction<Kind extends OrderKind> {\n  (): MinFetchUrl<Kind>;\n  (type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n  (type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n  (type: OrderType): BaseFetchUrl<Kind>;\n  (type: 'fillablebalance'): OrderFillableBalanceFetchUrl<Kind>;\n  (type?: OrderType | 'fillablebalance'):\n    | BaseFetchUrl<Kind>\n    | MinFetchUrl<Kind>\n    | OrderFillableBalanceFetchUrl<Kind>;\n}\n\nexport function baseFetchUrlGetterFactory<Kind extends OrderKind>(\n  orderKind: Kind\n): BaseFetchUrlInputConstructor<Kind> {\n  return function constructBaseFetchUrlGetter({\n    chainId,\n    apiURL,\n  }: GetBaseFetchUrlInput): UrlByTypeFunction<Kind> {\n    function urlGetter(type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n    function urlGetter(type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n    function urlGetter(type: OrderType): BaseFetchUrl<Kind>;\n    function urlGetter(\n      type: 'fillablebalance'\n    ): OrderFillableBalanceFetchUrl<Kind>;\n    function urlGetter(): MinFetchUrl<Kind>;\n    function urlGetter(\n      type?: OrderType | 'fillablebalance'\n    ):\n      | BaseFetchUrl<Kind>\n      | MinFetchUrl<Kind>\n      | OrderFillableBalanceFetchUrl<Kind> {\n      if (!type) return `${apiURL}/${orderKind}/order` as const;\n\n      if (type === 'fillablebalance')\n        return `${apiURL}/${orderKind}/fillablebalance/${chainId}` as const;\n\n      const orderURLpart = type === 'LIMIT' ? 'orders' : 'p2p';\n      return `${apiURL}/${orderKind}/${orderURLpart}/${chainId}` as const;\n    }\n\n    return urlGetter;\n  };\n}\n\n// orders with taker = EOA address\n// that can't be filled through AugustusSwapper,\n// only through AugustusRFQ\nexport function isOrderFillableDirectlyOnRFQOnly(\n  order: Pick<LimitOrderFromApi, 'taker' | 'takerFromMeta'>\n): boolean {\n  // with 0x taker fillable by anyone\n  if (order.taker === ZERO_ADDRESS) return false;\n\n  // same intended EOA taker and msg.sender taker\n  return order.taker.toLowerCase() === order.takerFromMeta.toLowerCase();\n}\n", "import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n  OrderFillableBalanceFetchUrl,\n} from '../../common/orders/misc';\nimport type { OrderData } from './buildOrderData';\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset,\n  takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n}: OrderData & Record<string, any>): OrderData {\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n}\n\n/* \nGET\n/ft/orders/:chainId/maker/:walletAddress\n/ft/orders/:chainId/taker/:walletAddress\n/ft/p2p/:chainId/maker/:walletAddress\n/ft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'ft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/ft/fillablebalance/:chainId/:walletAddress/:makerAsset?\n*/\nexport type GetRequiredAllowanceURL =\n  `${OrderFillableBalanceFetchUrl<'ft'>}/${string}${`/${string}` | ''}`;\n\n/*\nGET\n/ft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'ft'>}/${string}`;\n\n/* \nPOST create order\n/ft/orders/:chainId/\n/ft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'ft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'ft'> =\n  baseFetchUrlGetterFactory('ft');\n", "import type { Address } from '../../../types';\nimport type { AssetTypeVariant } from './types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\nimport { getRandomInt } from '../../../helpers/misc';\n\nconst OrderNFT = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'uint256' },\n  { name: 'makerAssetId', type: 'uint256' },\n  { name: 'takerAsset', type: 'uint256' },\n  { name: 'takerAssetId', type: 'uint256' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildNFTOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  makerAssetId: string; // required when BUYing NFT\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  takerAssetId?: string;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  makerAssetType: AssetTypeVariant;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  takerAssetType: AssetTypeVariant;\n  maker: Address;\n  // OrderData.taker must be Augustus for p2p limitOrders to involve swap through Augustus\n  // this is the actual user taker which will go into nonceAndMeta\n  taker?: Address;\n  AugustusAddress: Address;\n}\n\nexport type SignableNFTOrderData = {\n  types: { OrderNFT: typeof OrderNFT };\n  domain: Domain;\n  data: NFTOrderData;\n};\n\nexport type BigIntAsString = string;\n\nexport type NFTOrderData = {\n  expiry: number;\n  // '1' when trading 1 NFT token\n  makerAmount: BigIntAsString;\n  makerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  makerAssetId: BigIntAsString;\n  // '1' when trading 1 NFT token\n  takerAmount: BigIntAsString;\n  takerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  takerAssetId: BigIntAsString;\n  nonceAndMeta: BigIntAsString;\n  maker: Address;\n  taker: Address;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset: _makerAssetAddress,\n  takerAsset: _takerAssetAddress,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId = '0',\n  makerAssetType,\n  takerAssetType,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus -- taker = Augustus, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus -- taker = Augustus, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS, //@TODO allow Orders outside of AugustusRFQ\n}: BuildNFTOrderDataInput): SignableNFTOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  const makerAsset = assetAddressToUint(_makerAssetAddress, makerAssetType);\n\n  const takerAsset = assetAddressToUint(_takerAssetAddress, takerAssetType);\n\n  const orderNFT: NFTOrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker: AugustusAddress,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n\n  return {\n    types: { OrderNFT },\n    domain: { name, version, chainId, verifyingContract },\n    data: orderNFT,\n  };\n}\n\n// create a packed number that contains assetAddress and AssetType\nexport function assetAddressToUint(\n  assetAddress: Address,\n  assetType: AssetTypeVariant\n): BigIntAsString {\n  return (BigInt(assetAddress) + (BigInt(assetType) << BigInt(160))).toString(\n    10\n  );\n}\n", "import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n} from '../../common/orders/misc';\nimport {\n  assetAddressToUint,\n  BuildNFTOrderDataInput,\n  NFTOrderData,\n} from './buildOrderData';\n\n// any number can be assigned to AssetType enum\n// https://github.com/Microsoft/TypeScript/issues/22311\n// export enum AssetType {\n//   ERC20 = 0,\n//   ERC1155 = 1,\n//   ERC721 = 2,\n// }\n\nexport const AssetType = {\n  ERC20: 0,\n  ERC1155: 1,\n  ERC721: 2,\n} as const;\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset: _makerAsset,\n  takerAsset: _takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId,\n  // asset types provided when Order has them ,e.g. got Order by hash from API\n  makerAssetType,\n  takerAssetType,\n}: NFTOrderData &\n  Partial<Pick<BuildNFTOrderDataInput, 'makerAssetType' | 'takerAssetType'>> &\n  Record<string, any>): NFTOrderData {\n  const makerAsset =\n    makerAssetType !== undefined && _makerAsset.startsWith('0x')\n      ? assetAddressToUint(_makerAsset, makerAssetType)\n      : _makerAsset;\n  const takerAsset =\n    takerAssetType !== undefined && _takerAsset.startsWith('0x')\n      ? assetAddressToUint(_takerAsset, takerAssetType)\n      : _takerAsset;\n\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n}\n\n/* \nGET\n/nft/orders/:chainId/maker/:walletAddress\n/nft/orders/:chainId/taker/:walletAddress\n/nft/p2p/:chainId/maker/:walletAddress\n/nft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'nft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/nft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'nft'>}/${string}`;\n\n/* \nPOST create order\n/nft/orders/:chainId/\n/nft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'nft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'nft'> =\n  baseFetchUrlGetterFactory('nft');\n", "import type { WithGasPrice, WithMaxFee } from '../../gas';\nimport type {\n  ConstructFetchInput,\n  Address,\n  FetcherPostInput,\n  PriceString,\n  OptimalRate,\n  RequestParameters,\n} from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { OrderData } from '../limitOrders/buildOrder';\nimport { sanitizeOrderData as sanitizeLimitOrderData } from '../limitOrders/helpers/misc';\nimport { sanitizeOrderData as sanitizeNFTOrderData } from '../nftOrders/helpers/misc';\nimport { AssetTypeVariant } from '../nftOrders/helpers/types';\n\nexport interface TransactionParams {\n  to: string;\n  from: string;\n  value: string;\n  data: string;\n  gas?: string;\n  chainId: number;\n  // either gasPrice or maxFeePerGas & maxPriorityFeePerGas will be present\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n}\n\nexport type SwappableOrder = OrderData & {\n  permitMakerAsset?: string;\n  signature: string;\n};\n\nexport type SwappableNFTOrder = SwappableOrder & {\n  makerAssetId: string;\n  takerAssetId: string;\n  makerAssetType: AssetTypeVariant;\n  takerAssetType: AssetTypeVariant;\n};\n\n// when priceRoute with side=SELL, slippage can replace destAmount\nexport type TxInputAmountsPartSell = {\n  slippage: number;\n  srcAmount: PriceString;\n  destAmount?: never; // disallowed\n};\n// when priceRoute with side=BUY, slippage can replace srcAmount\nexport type TxInputAmountsPartBuy = {\n  slippage: number;\n  srcAmount?: never; // disallowed\n  destAmount: PriceString;\n};\n// both srcAmount and destAmount can be present in absence of slippage\nexport type TxInputAmountsPartBuyOrSell = {\n  slippage?: never; // disallowed\n  srcAmount: PriceString;\n  destAmount: PriceString;\n};\n\n// more details in the docs https://developers.velora.xyz/api/velora-api/velora-market-api/build-parameters-for-transaction#request-body\nexport type BuildTxInputBase = {\n  srcToken: Address;\n  destToken: Address;\n  userAddress: Address;\n  /** @description Whenever msg.sender (`userAddress`) i.e. address calling the Velora contract is different than the address sending the transaction, `txOrigin` must be passed along with `userAddress` */\n  txOrigin?: string;\n  /** @description used with referral link */\n  referrer?: string;\n  partner?: string;\n  partnerAddress?: string;\n  partnerFeeBps?: number;\n  /** @description If user should receive surplus instead of partner. Default: false */\n  isSurplusToUser?: boolean;\n  /** @description If fees should be sent directly to the partner instead of registering them on FeeClaimer. v6 only. Default: false */\n  isDirectFeeTransfer?: boolean;\n  /** @deprecated Use \"takeSurplus\" instead. Positive slippage goes to user, true by default */\n  positiveSlippageToUser?: boolean;\n  /** @description Set to true to take positive slippage. Works with partnerAddress. Default: false */\n  takeSurplus?: boolean;\n  /** @description Cap the surplus at 1% maximum. Default: true */\n  isCapSurplus?: boolean;\n  receiver?: Address;\n  srcDecimals?: number;\n  destDecimals?: number;\n  permit?: string;\n  deadline?: string;\n};\n\n// for Swap transaction\nexport type BuildSwapTxInput = BuildTxInputBase & {\n  priceRoute: OptimalRate;\n} & (\n    | TxInputAmountsPartSell\n    | TxInputAmountsPartBuy\n    | TxInputAmountsPartBuyOrSell\n  ); // this union doesn't allow to mix srcAmount & destAmount & slippage together\n\n// building block for LimitOrders and NFT Orders swaps\n// can only use priceRoute.side=BUY and related TxInputAmountsPart*\ntype BuildTxInputBaseBUYForOrders<\n  // to Omit extra keys\n  // can't do Omit<> around union, breaks discriminated union\n  K extends keyof TxInputAmountsPartBuy | keyof BuildTxInputBase = never\n> = Omit<BuildTxInputBase, K> &\n  // destAmount is sum(orders[].makerAmount)\n  (| Omit<TxInputAmountsPartBuy, 'destAmount' | K>\n    | Omit<TxInputAmountsPartBuyOrSell, 'destAmount' | K>\n  );\n\n// for LimitOrder Fill, without swap\nexport type BuildLimitOrderTxInput = BuildTxInputBaseBUYForOrders & {\n  orders: SwappableOrder[];\n  srcDecimals: number;\n  destDecimals: number;\n};\n\n// for NFT Order Fill, without swap\nexport type BuildNFTOrderTxInput =\n  // @TODO if NFT can ever be srcToken, change logic\n  //                           for NFT token destDecimals = 0 is acceptable\n  BuildTxInputBaseBUYForOrders<'destDecimals'> & {\n    orders: SwappableNFTOrder[];\n    srcDecimals: number;\n  };\n\nexport interface BuildSwapAndLimitOrderTxInput0\n  // destAmount is sum(orders[].makerAmount)\n  extends Omit<BuildTxInputBase, 'destAmount'> {\n  priceRoute: OptimalRate; // priceRoute.side=BUY\n  orders: SwappableOrder[];\n  destDecimals: number;\n}\n// for Swap + LimitOrder, priceRoute must have side=BUY\nexport type BuildSwapAndLimitOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableOrder[];\n    destDecimals: number;\n  };\n\n// with slippage for a swap and fill - p2p - order, without to fill a p2p order directly with the intended taker asset\n\n// for Swap + NFT Order, priceRoute must have side=BUY\nexport type BuildSwapAndNFTOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableNFTOrder[];\n  };\n\nexport type BuildTxInput =\n  | BuildSwapTxInput\n  | BuildLimitOrderTxInput\n  | BuildNFTOrderTxInput\n  | BuildSwapAndLimitOrderTxInput\n  | BuildSwapAndNFTOrderTxInput;\n\nexport type BuildOptionsBase = {\n  /** @description Allows the API to skip performing onchain checks such as balances, allowances, as well as transaction simulations. The response does not contain `gas` parameter when set to `true` */\n  ignoreChecks?: boolean;\n  /** @description Allows the API to skip gas checks. The response does not contain `gas` parameter when set to `true` */\n  ignoreGasEstimate?: boolean;\n  /** @description Allows the API to skip performing onchain allowance checks. */\n  ignoreAllowance?: boolean;\n  /** @description Allows the API to return the contract parameters only. */\n  onlyParams?: boolean;\n};\n\nexport type BuildOptionsWithGasPrice = BuildOptionsBase & Partial<WithGasPrice>;\nexport type BuildOptionsWitWithMaxFee = BuildOptionsBase & Partial<WithMaxFee>;\n\nexport type BuildOptions = BuildOptionsWithGasPrice | BuildOptionsWitWithMaxFee;\n\ntype BuildTx = (\n  params: BuildTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\nexport type BuildTxFunctions = {\n  buildTx: BuildTx;\n};\n\ntype SearchStringParams = BuildOptions;\n\nexport const constructBuildTx = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildTxFunctions => {\n  const transactionsURL = `${apiURL}/transactions/${chainId}` as const;\n\n  const buildTx: BuildTx = async (params, options = {}, requestParams) => {\n    if (\n      'priceRoute' in params &&\n      'destAmount' in params && // isn't provided together with `orders`\n      !('orders' in params) // when present, destAmount becomes sum(orders[].makerAmount)\n    ) {\n      const {\n        priceRoute,\n        priceRoute: { side },\n      } = params;\n      const AmountMismatchError =\n        side === SwapSide.SELL\n          ? 'Source Amount Mismatch'\n          : 'Destination Amount Mismatch';\n\n      // user provides srcAmount or slippage but not both. so we only validate accordingly.\n      assert(\n        areAmountsCorrect({\n          queryParams: params,\n          side,\n          priceRoute,\n        }),\n        AmountMismatchError\n      );\n    }\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SearchStringParams>(options);\n\n    const fetchURL = `${transactionsURL}/${search}` as const;\n\n    const sanitizedParams =\n      'orders' in params && params.orders.length > 0\n        ? {\n            ...params,\n            //  make sure we don't pass more with orders than API expects\n            orders: params.orders.map((order) => {\n              const sanitizedOrderData =\n                'makerAssetId' in order\n                  ? sanitizeNFTOrderData(order) // assetType is provided here, because Order.*Asset may be address\n                  : // if Order received from API by hash\n                    sanitizeLimitOrderData(order);\n\n              const sanitizedOrder: SwappableOrder = {\n                ...sanitizedOrderData,\n                signature: order.signature,\n              };\n\n              if (order.permitMakerAsset) {\n                sanitizedOrder.permitMakerAsset = order.permitMakerAsset;\n              }\n\n              return sanitizedOrder;\n            }),\n          }\n        : params;\n\n    const takeSurplus =\n      params.takeSurplus ??\n      (params.positiveSlippageToUser !== undefined\n        ? !params.positiveSlippageToUser\n        : undefined);\n\n    if ('positiveSlippageToUser' in sanitizedParams) {\n      // positiveSlippageToUser & takeSurplus together will Error in API\n      delete sanitizedParams.positiveSlippageToUser;\n    }\n    if (takeSurplus !== undefined) {\n      sanitizedParams.takeSurplus = takeSurplus;\n    }\n\n    const fetchParams: FetcherPostInput = {\n      url: fetchURL,\n      method: 'POST',\n      data: sanitizedParams,\n      requestParams,\n    };\n\n    const builtTx = await fetcher<TransactionParams>(fetchParams);\n\n    return builtTx;\n  };\n\n  return { buildTx };\n};\n\ninterface AreAmountsCorrectInput {\n  queryParams: { srcAmount?: string; destAmount?: string; slippage?: number };\n  side: SwapSide;\n  priceRoute: OptimalRate;\n}\n\nfunction areAmountsCorrect({\n  queryParams,\n  side,\n  priceRoute,\n}: AreAmountsCorrectInput): boolean {\n  // return early after a simpler check if the user was swapping before filling\n  if (queryParams.slippage) {\n    return (\n      (side === SwapSide.BUY &&\n        queryParams.destAmount === priceRoute.destAmount) ||\n      (side === SwapSide.SELL && queryParams.srcAmount === priceRoute.srcAmount)\n    );\n  }\n\n  // provided amounts match the previously queried price route\n  const [inputAmount, priceRouteAmount] =\n    side === SwapSide.SELL\n      ? [queryParams.srcAmount, priceRoute.srcAmount]\n      : [queryParams.destAmount, priceRoute.destAmount];\n\n  return inputAmount === priceRouteAmount;\n}\n", "import { getRandomInt } from '../../../helpers/misc';\nimport type { Address, APIVersion } from '../../../types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\n\nconst Order = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'address' },\n  { name: 'takerAsset', type: 'address' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  maker: Address;\n  // OrderData.taker must be Augustus (or other Executor) for p2p limitOrders to involve swap through Augustus\n  /** @description actual user taker which will go into nonceAndMeta */\n  taker?: Address;\n  /** @description contract executor (Augustus or similar) that is allowed to execute the order, gois in Order.taker */\n  contractTaker?: Address;\n\n  AugustusAddress: Address;\n  AppVersion: APIVersion;\n}\n\nexport type SignableOrderData = {\n  types: { Order: typeof Order };\n  domain: Domain;\n  data: OrderData;\n};\n\nexport type OrderData = {\n  nonceAndMeta: string;\n  expiry: number;\n  makerAsset: string;\n  takerAsset: string;\n  maker: string;\n  taker: string;\n  makerAmount: string;\n  takerAmount: string;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset,\n  takerAsset,\n  makerAmount,\n  takerAmount,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus (v5) or directly (v6)-- taker = Augustus | _taker, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus or not -- taker = Zero, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS,\n  // if given, overrides the above choices made based on `taker`\n  contractTaker,\n  // for v6 only support taker=_taker for OTC orders\n  AppVersion,\n}: BuildOrderDataInput): SignableOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  let taker: string;\n  // contractTaker overrides always\n  if (contractTaker) {\n    taker = contractTaker;\n  } else if (takerInNonce === ZERO_ADDRESS) {\n    // no takerInNonce -> not p2p order -> allow anyone to fill (not only Augustus)\n    taker = ZERO_ADDRESS;\n  } else {\n    // otherwise for p2p order ->\n    if (AppVersion.startsWith('6.')) {\n      //support 6.1+ versions\n\n      // limit taker to EOA for v6 version (no Arbitrary Token Swaps + OTC Fill, or OTC Fill through AugustusSwapper)\n      taker = takerInNonce;\n    } else {\n      // on v5\n      // -> fill through Augustus only\n      taker = AugustusAddress;\n    }\n  }\n\n  const order: OrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n\n  return {\n    types: { Order },\n    domain: { name, version, chainId, verifyingContract },\n    data: order,\n  };\n}\n", "import { DEFAULT_VERSION } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildOrderDataInput,\n  SignableOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildLimitOrderInput = Omit<\n  BuildOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress' | 'AppVersion'\n>;\n\ntype BuildLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  requestParams?: RequestParameters\n) => Promise<SignableOrderData>;\n\nexport type BuildLimitOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildLimitOrder: BuildLimitOrder;\n};\n\nexport const constructBuildLimitOrder = (\n  options: ConstructFetchInput\n): BuildLimitOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildLimitOrder: BuildLimitOrder = async (\n    buildLimitOrderParams,\n    requestParams\n  ) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(requestParams);\n\n    const AppVersion = options.version ?? DEFAULT_VERSION;\n\n    return buildOrderData({\n      ...buildLimitOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n      AppVersion,\n    });\n  };\n\n  return {\n    buildLimitOrder,\n  };\n};\n", "import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignLimitOrderFunctions = {\n  signLimitOrder: (signableOrderData: SignableOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignLimitOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignLimitOrderFunctions => {\n  const signLimitOrder: SignLimitOrderFunctions['signLimitOrder'] = (\n    typedData\n  ) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableOrderData = {\n      ...typedData,\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signLimitOrder };\n};\n", "import type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../../types';\nimport { constructGetSpender } from '../swap/spender';\n\nexport type CancelOrder<T> = (\n  orderHash: string,\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type CancelOrderBulk<T> = (\n  orderHashes: string[],\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type CancelLimitOrderFunctions<T> = {\n  cancelLimitOrder: CancelOrder<T>;\n  cancelLimitOrderBulk: CancelOrderBulk<T>;\n};\n\n// much smaller than the whole AugustusRFQ_ABI\nconst MinAugustusRFQAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'cancelOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'orderHashes',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'cancelOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype AvailableMethods = ExtractAbiMethodNames<typeof MinAugustusRFQAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructCancelLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const cancelLimitOrder: CancelOrder<T> = async (\n    orderHash,\n    overrides = {},\n    requestParams\n  ) => {\n    const verifyingContract = await getAugustusRFQ(requestParams);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrder',\n      args: [orderHash],\n      overrides,\n    });\n\n    return res;\n  };\n\n  const cancelLimitOrderBulk: CancelOrderBulk<T> = async (\n    orderHashes,\n    overrides = {},\n    requestParams\n  ) => {\n    const verifyingContract = await getAugustusRFQ(requestParams);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrders',\n      args: [orderHashes],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return {\n    cancelLimitOrder,\n    cancelLimitOrderBulk,\n  };\n};\n", "type SplitSignatureResult = {\n  v: number;\n  r: string;\n  s: string;\n  compact: string;\n};\n\nexport function splitSignature(signature: string): SplitSignatureResult {\n  // Remove \"0x\" prefix if present\n  if (signature.startsWith('0x')) {\n    signature = signature.slice(2);\n  }\n\n  // Convert the hex string to a byte array\n  const bytes = new Uint8Array(signature.length / 2);\n  for (let i = 0; i < signature.length; i += 2) {\n    bytes[i / 2] = parseInt(signature.slice(i, i + 2), 16);\n  }\n\n  // Validate the signature length (64 or 65 bytes)\n  if (bytes.length !== 64 && bytes.length !== 65) {\n    throw new Error('Invalid signature length: must be 64 or 65 bytes');\n  }\n\n  // Extract r and s components\n  const r = `0x${Array.from(bytes.slice(0, 32), (b) =>\n    b.toString(16).padStart(2, '0')\n  ).join('')}`;\n  let s: string;\n  let v;\n\n  // Handle 64-byte (EIP-2098 compact) and 65-byte signatures\n  if (bytes.length === 64) {\n    // Extract v from the highest bit of s and clear the bit in s\n    v = 27 + (bytes[32]! >> 7);\n    bytes[32]! &= 0x7f; // Clear the highest bit\n    s = `0x${Array.from(bytes.slice(32, 64))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('')}`;\n  } else {\n    s = `0x${Array.from(bytes.slice(32, 64))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('')}`;\n\n    // Extract v directly for 65-byte signature\n    v = bytes[64]!;\n\n    // Normalize v to canonical form (27 or 28)\n    if (v < 27) {\n      v += 27;\n    }\n  }\n\n  // Compute yParityAndS (_vs) for the compact signature\n  const sBytes = Array.from(bytes.slice(32, 64));\n  if (v === 28) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    sBytes[0]! |= 0x80; // Set the highest bit if v is 28\n  }\n  const yParityAndS = `0x${sBytes\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('')}`;\n\n  // Construct the compact signature by concatenating r and yParityAndS\n  const compactSignature = r + yParityAndS.slice(2);\n\n  return { v, r, s, compact: compactSignature };\n}\n", "import { splitSignature } from './signature';\n\ntype EncodeEIP_2612PermitFunctionInput = {\n  permitSignature: string;\n  owner: string;\n  spender: string;\n  value: string | bigint;\n  deadline: string | number | bigint;\n};\n\n// encoding params for Token.permit() Permit1 function\nexport function encodeEIP_2612PermitFunctionInput({\n  owner,\n  spender,\n  value,\n  deadline,\n  permitSignature,\n}: EncodeEIP_2612PermitFunctionInput): string {\n  const { v, r, s } = splitSignature(permitSignature);\n\n  const encodedOwner = encodeAddress(owner);\n  const encodedSpender = encodeAddress(spender);\n  const encodedValue = encodeUint256(value);\n  const encodedDeadline = encodeUint256(deadline.toString());\n  const encodedV = encodeUint8(v);\n  const encodedR = encodeBytes32(r);\n  const encodedS = encodeBytes32(s);\n\n  // Concatenate all encoded values, stripping the \"0x\" prefix from each (except the first one)\n  return (\n    '0x' +\n    [\n      encodedOwner,\n      encodedSpender,\n      encodedValue,\n      encodedDeadline,\n      encodedV,\n      encodedR,\n      encodedS,\n    ]\n      .map((val) => val.slice(2)) // Remove \"0x\" prefix from each encoded value\n      .join('') // Concatenate the values\n  );\n}\n\ntype EncodeDAIlikePermitFunctionInput = {\n  permitSignature: string;\n  holder: string;\n  spender: string;\n  nonce: number | bigint | string;\n  expiry: number | bigint | string;\n};\n\n// encoding params for DAIlike.permit() function\nexport function encodeDAIlikePermitFunctionInput({\n  permitSignature,\n  holder,\n  spender,\n  nonce,\n  expiry,\n}: EncodeDAIlikePermitFunctionInput): string {\n  const { v, r, s } = splitSignature(permitSignature);\n\n  const encodedHolder = encodeAddress(holder);\n  const encodedSpender = encodeAddress(spender);\n  const encodedNonce = encodeUint256(nonce.toString());\n  const encodedExpiry = encodeUint256(expiry.toString());\n  const encodedV = encodeUint8(v);\n  const encodedR = encodeBytes32(r);\n  const encodedS = encodeBytes32(s);\n\n  // Concatenate all encoded values, stripping the \"0x\" prefix from each (except the first one)\n  return (\n    '0x' +\n    [\n      encodedHolder,\n      encodedSpender,\n      encodedNonce,\n      encodedExpiry,\n      encodeBool(true), //allowed=true\n      encodedV,\n      encodedR,\n      encodedS,\n    ]\n      .map((val) => val.slice(2)) // Remove \"0x\" prefix from each encoded value\n      .join('') // Concatenate the values\n  );\n}\n\n// encode an address (20 bytes) into 32 bytes\nexport function encodeAddress(address: string): string {\n  const strippedAddress = address.replace(/^0x/, ''); // Remove \"0x\" prefix\n  return '0x' + strippedAddress.toLowerCase().padStart(64, '0');\n}\n\n// encode a uint256 value\nexport function encodeUint256(value: string | bigint): string {\n  const bn = BigInt(value);\n  return '0x' + bn.toString(16).padStart(64, '0');\n}\n\n// encode a uint8 value\nexport function encodeUint8(value: number | bigint): string {\n  return '0x' + value.toString(16).padStart(64, '0');\n}\n\n// encode a bytes32 value\nexport function encodeBytes32(value: string): string {\n  const strippedValue = value.replace(/^0x/, ''); // Remove \"0x\" prefix\n  return '0x' + strippedValue.padStart(64, '0').toLowerCase();\n}\n\n//encode a boolean\nexport function encodeBool(value: boolean): string {\n  const encodedValue = value ? '1' : '0';\n  // padded to 32 bytes\n  return '0x' + encodedValue.padStart(64, '0');\n}\n\n/* \nconst EIP_2612_PERMIT_ABI = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        name: 'value',\n        type: 'uint256',\n      },\n      {\n        name: 'deadline',\n        type: 'uint256',\n      },\n      {\n        name: 'v',\n        type: 'uint8',\n      },\n      {\n        name: 'r',\n        type: 'bytes32',\n      },\n      {\n        name: 's',\n        type: 'bytes32',\n      },\n    ],\n    name: 'permit',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n]; \n*/\n\n/* \nconst DAI_EIP_2612_PERMIT_ABI = [\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'holder',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'expiry',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bool',\n        name: 'allowed',\n        type: 'bool',\n      },\n      {\n        internalType: 'uint8',\n        name: 'v',\n        type: 'uint8',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'r',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 's',\n        type: 'bytes32',\n      },\n    ],\n    name: 'permit',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n */\n", "import type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../../types';\nimport type { OrderData } from './buildOrder';\nimport { constructGetSpender } from '../swap/spender';\nimport { sanitizeOrderData } from './helpers/misc';\nimport {\n  encodeDAIlikePermitFunctionInput,\n  encodeEIP_2612PermitFunctionInput,\n} from '../common/orders/encoding';\n\nexport type FillOrderDirectlyFunctions<T> = {\n  fillOrderDirectly: FillOrderDirectly<T>;\n};\n\ntype TakerPermitEncodedInputParams = {\n  encodedPermitParams: string;\n};\n\ntype TakerPermit1Data = {\n  signature: string;\n  deadline: number | bigint | string;\n  amount?: string;\n  isDaiPermit?: false;\n};\n\ntype TakerDaiPermitData = {\n  signature: string;\n  expiry: number | bigint | string;\n  nonce: number | bigint | string;\n  isDaiPermit: true;\n};\n\ntype TakerPermitObject =\n  | TakerPermitEncodedInputParams\n  | TakerPermit1Data\n  | TakerDaiPermitData;\n\nexport type FillOrderDirectly<T> = (\n  orderFillData: {\n    order: OrderData;\n    signature: string;\n    /** @description Permit1 data or DAI Permit data or Token.parmit() input params encoded; Permit by taker for Taker Asset with AugustusRFQ as spender */\n    takerPermit?: TakerPermitObject;\n  },\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\n// much smaller than the whole AugustusRFQ_ABI\nconst MinAugustusRFQAbi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'nonceAndMeta',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint128',\n            name: 'expiry',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'makerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct AugustusRFQ.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'fillOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'nonceAndMeta',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint128',\n            name: 'expiry',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'makerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct AugustusRFQ.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'takerTokenFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address',\n        name: 'target',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes',\n        name: 'permitTakerAsset',\n        type: 'bytes',\n      },\n      {\n        internalType: 'bytes',\n        name: 'permitMakerAsset',\n        type: 'bytes',\n      },\n    ],\n    name: 'partialFillOrderWithTargetPermit',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'makerTokenFilledAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype FillOrderMethods = ExtractAbiMethodNames<typeof MinAugustusRFQAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport function constructFillOrderDirectly<T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): FillOrderDirectlyFunctions<T> {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const fillOrderDirectly: FillOrderDirectly<T> = async (\n    { order, signature, takerPermit },\n    overrides = {},\n    requestParams\n  ) => {\n    const AugustusRFQ = await getAugustusRFQ(requestParams);\n\n    const sanitizedOrder = sanitizeOrderData(order);\n\n    if (!takerPermit) {\n      const res = await options.contractCaller.transactCall<FillOrderMethods>({\n        address: AugustusRFQ,\n        abi: MinAugustusRFQAbi,\n        contractMethod: 'fillOrder',\n        args: [sanitizedOrder, signature],\n        overrides,\n      });\n\n      return res;\n    }\n\n    let permitTakerAsset: string;\n    if ('encodedPermitParams' in takerPermit) {\n      permitTakerAsset = takerPermit.encodedPermitParams;\n    } else if ('isDaiPermit' in takerPermit && takerPermit.isDaiPermit) {\n      // encoded DAI.permit() function params by taker with AugustusRFQ as spender\n      permitTakerAsset = encodeDAIlikePermitFunctionInput({\n        holder: order.taker,\n        spender: AugustusRFQ,\n        expiry: takerPermit.expiry,\n        nonce: takerPermit.nonce,\n        permitSignature: takerPermit.signature,\n      });\n    } else {\n      // encoded TakerAsset.permit() function params by taker with AugustusRFQ as spender, Permit1 only\n      permitTakerAsset = encodeEIP_2612PermitFunctionInput({\n        owner: order.taker,\n        spender: AugustusRFQ,\n        value: takerPermit.amount || order.takerAmount, // can use permit with a bigger value, fallback to exact Order takerAmount\n        deadline: takerPermit.deadline,\n        permitSignature: takerPermit.signature,\n      });\n    }\n\n    const res = await options.contractCaller.transactCall<FillOrderMethods>({\n      address: AugustusRFQ,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'partialFillOrderWithTargetPermit',\n      args: [\n        sanitizedOrder, // order\n        signature, // order.signature\n        order.takerAmount, // takerTokenFillAmount, can even partially fill\n        order.taker, // target\n        permitTakerAsset,\n        '0x', // permitMakerAsset, unused because hard to account for changing nonce for long running Orders\n      ],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return { fillOrderDirectly };\n}\n", "// @TODO getOrder, getOrders from API\n// onchain from contract can't distinguish between filled or cancelled\nimport { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n  GetRequiredAllowanceURL as GetRequiredBalanceURL,\n} from './helpers/misc';\nimport type {\n  LimitOrderFromApi,\n  LimitOrdersApiResponse,\n  LimitOrderType,\n} from './helpers/types';\n\ntype PaginationParams = {\n  limit?: number;\n  offset?: number;\n  hideSmallBalances?: boolean;\n  orderBy?: 'createdAt' | 'updatedAt' | 'expiry';\n};\n\n//                     get orders by `maker` or `taker`\nexport type LimitOrdersUserParams = (\n  | { maker: Address; type: LimitOrderType }\n  | { taker: Address; type: LimitOrderType }\n) &\n  PaginationParams;\n\nexport type GetRequiredAllowanceParams = {\n  maker: Address;\n  token?: Address;\n};\n\ntype GetLimitOrderByHash = (\n  orderHash: string,\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\ntype GetLimitOrders = (\n  userParams: LimitOrdersUserParams,\n  requestParams?: RequestParameters\n) => Promise<LimitOrdersApiResponse>;\n\ntype GetRequiredBalance = (\n  userParams: GetRequiredAllowanceParams,\n  requestParams?: RequestParameters\n) => Promise<Record<string, string>>;\n\nexport type GetLimitOrdersFunctions = {\n  getLimitOrders: GetLimitOrders;\n  getLimitOrderByHash: GetLimitOrderByHash;\n  /**\n   * Gets fillableBalance for tokens from user's active orders.\n   * User needs to have enough balance & allowance to cover active orders before creating new orders.\n   * @param userParams - parameters to get allowance for active orders\n   * @param {string} userParams.maker - user to get required allowances for\n   * @param {string=} userParams.token - if given `token`, the mapping will contain that token address only\n   * @param {RequestParameters=} requestParams - requestParams passed to fetcher, can include {signal: AbortSignal, timeout: for axios, etc.}\n   * @returns `{Lowercase<Address> => wei number as string}` mapping of token to fillableBalance\n   */\n  getRequiredBalance: GetRequiredBalance;\n};\n\nexport const constructGetLimitOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetLimitOrdersFunctions => {\n  const getBaseFetchURLByEntityType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getLimitOrders: GetLimitOrders = async (userParams, requestParams) => {\n    const baseFetchURL = getBaseFetchURLByEntityType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n\n    const { offset, limit, hideSmallBalances, orderBy } = userParams;\n    const search = constructSearchString<PaginationParams>({\n      offset,\n      limit,\n      hideSmallBalances,\n      orderBy,\n    });\n\n    const fetchURL = `${baseFetchURL}/${userURL}${search}` as const;\n\n    const response = await fetcher<LimitOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getRequiredBalance: GetRequiredBalance = async (\n    userParams,\n    requestParams\n  ) => {\n    const baseFetchURL = getBaseFetchURLByEntityType('fillablebalance');\n    const userURL = `${baseFetchURL}/${userParams.maker}` as const;\n    const fetchURL = userParams.token\n      ? (`${userURL}/${userParams.token}` as const)\n      : userURL;\n\n    const response = await fetcher<\n      Record<string, string>,\n      GetRequiredBalanceURL\n    >({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getLimitOrderByHash: GetLimitOrderByHash = async (\n    orderHash,\n    requestParams\n  ) => {\n    const baseFetchURL = getBaseFetchURLByEntityType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<LimitOrderFromApi, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  return {\n    getLimitOrders,\n    getLimitOrderByHash,\n    getRequiredBalance,\n  };\n};\n", "import { API_URL } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  LimitOrderApiResponse,\n  LimitOrderToSend,\n  LimitOrderFromApi,\n  LimitOrderType,\n} from './helpers/types';\n\ntype PostLimitOrder = (\n  limitOrderWithSignatureAndPermit: LimitOrderToSend,\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\n\nexport type PostLimitOrderFunctions = {\n  postLimitOrder: PostLimitOrder;\n  postP2POrder: PostLimitOrder;\n};\n\nexport const constructPostLimitOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostLimitOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    limitOrderWithSignatureAndPermit: LimitOrderToSend,\n    type: LimitOrderType,\n    requestParams?: RequestParameters\n  ): Promise<LimitOrderFromApi> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    const { order: newOrder } = await fetcher<\n      LimitOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: limitOrderWithSignatureAndPermit,\n      requestParams,\n    });\n\n    return newOrder;\n  };\n\n  const postLimitOrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(\n      limitOrderWithSignatureAndPermit,\n      'LIMIT',\n      requestParams\n    );\n  };\n\n  const postP2POrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(\n      limitOrderWithSignatureAndPermit,\n      'P2P',\n      requestParams\n    );\n  };\n\n  return { postLimitOrder, postP2POrder };\n};\n", "import type { ConstructProviderFetchInput } from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetSpender } from '../swap/spender';\n\nexport type ApproveTokenForLimitOrderFunctions<T> = {\n  /** @description approving AugustusRFQ as spender for makerAsset */\n  approveMakerTokenForLimitOrder: ApproveToken<T>;\n  /** @description approving AugustusRFQ as spender for takerAsset to call SDK.fillOrderDirectly */\n  approveTakerTokenForFillingP2POrderDirectly: ApproveToken<T>;\n  /** @description approving AugustusSwapper as spender for takerAsset for Limit Orders that will be executed through it */\n  approveTakerTokenForLimitOrder: ApproveToken<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const approveMakerTokenForLimitOrder: ApproveToken<T> =\n    approveTokenMethodFactory<T>(options.contractCaller, getAugustusRFQ);\n\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveTakerTokenForLimitOrder } =\n    constructApproveToken(options);\n\n  return {\n    approveMakerTokenForLimitOrder,\n    approveTakerTokenForFillingP2POrderDirectly: approveMakerTokenForLimitOrder,\n    approveTakerTokenForLimitOrder,\n  };\n};\n", "import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetLimitOrdersContractFunctions = {\n  getLimitOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\nexport const constructGetLimitOrdersContract = (\n  options: ConstructFetchInput\n): GetLimitOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getLimitOrdersContract,\n  } = constructGetSpender(options);\n\n  return { getLimitOrdersContract, getTokenTransferProxy };\n};\n", "import type { ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport {\n  API_URL,\n  SwapSide,\n  ContractMethod,\n  DEFAULT_VERSION,\n} from '../../constants';\nimport {\n  BuildLimitOrderTxInput,\n  BuildOptions,\n  BuildSwapAndLimitOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { OrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\nimport type { RequestParameters } from '../../types';\n\ntype MinBuildSwapAndLimitOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndLimitOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndLimitOrdersTx = (\n  params: MinBuildSwapAndLimitOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\ntype MinBuildLimitOrderTxInput = Omit<\n  BuildLimitOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildLimitOrdersTx = (\n  params: MinBuildLimitOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\nexport type BuildLimitOrdersTxFunctions = {\n  getLimitOrdersRate: GetLimitOrdersRate;\n  buildLimitOrderTx: BuildLimitOrdersTx;\n  buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx;\n};\n\ntype GetLimitOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\nexport const constructBuildLimitOrderTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildLimitOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    chainId,\n    fetcher,\n    version,\n  });\n\n  const { getRate: getSwapAndLimitOrderRate } = constructGetRate({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow to swap from srcToken to destToken(=order.takerAsset) followed by filling limit orders\n  const getLimitOrdersRate: GetLimitOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    requestParams\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndLimitOrderRate(\n      rateInput,\n      requestParams\n    );\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildLimitOrderTx: BuildLimitOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    const { makerAsset, takerAsset, totalTakerAmount } = checkAndParseOrders(\n      params.orders\n    );\n\n    const fillParams: BuildLimitOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      // no `slippage` in `params`\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: makerAsset,\n    };\n\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n\n  const buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    const { makerAsset } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndLimitOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // which is swapped for makerAsset, that would go towards filling the orders\n      destToken: makerAsset,\n      destDecimals: params.priceRoute.destDecimals,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n    };\n\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n\n  return {\n    getLimitOrdersRate,\n    buildLimitOrderTx,\n    buildSwapAndLimitOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  OrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: OrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset,\n    takerAsset,\n  };\n}\n", "import type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildNFTOrderDataInput,\n  SignableNFTOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildNFTOrderInput = Omit<\n  BuildNFTOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress'\n>;\n\ntype BuildNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  requestParams?: RequestParameters\n) => Promise<SignableNFTOrderData>;\n\nexport type BuildNFTOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildNFTOrder: BuildNFTOrder;\n};\n\nexport const constructBuildNFTOrder = (\n  options: ConstructFetchInput\n): BuildNFTOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildNFTOrder: BuildNFTOrder = async (\n    buildNFTOrderParams,\n    requestParams\n  ) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(requestParams);\n\n    return buildOrderData({\n      ...buildNFTOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n    });\n  };\n\n  return {\n    buildNFTOrder,\n  };\n};\n", "import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableNFTOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignNFTOrderFunctions = {\n  signNFTOrder: (signableOrderData: SignableNFTOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignNFTOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignNFTOrderFunctions => {\n  const signNFTOrder: SignNFTOrderFunctions['signNFTOrder'] = (typedData) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableNFTOrderData = {\n      ...typedData,\n      // here assetType isn't provided, SignableData must already have corrent BigIntAsString\n      // @TODO consider using `template_${types}` for Address, likely bad idea when considering 3rd-party code\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signNFTOrder };\n};\n", "import type { ConstructProviderFetchInput } from '../../types';\nimport {\n  CancelOrder,\n  CancelOrderBulk,\n  constructCancelLimitOrder,\n} from '../limitOrders/cancelOrder';\n\nexport type CancelNFTOrderFunctions<T> = {\n  cancelNFTOrder: CancelOrder<T>;\n  cancelNFTOrderBulk: CancelOrderBulk<T>;\n};\n\n// should work the same as for LimitOrders\nexport const constructCancelNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelNFTOrderFunctions<T> => {\n  const { cancelLimitOrder, cancelLimitOrderBulk } =\n    constructCancelLimitOrder(options);\n  return {\n    cancelNFTOrder: cancelLimitOrder,\n    cancelNFTOrderBulk: cancelLimitOrderBulk,\n  };\n};\n", "import { API_URL } from '../../constants';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n} from './helpers/misc';\nimport type {\n  NFTOrderFromAPI,\n  NFTOrdersApiResponse,\n  NFTOrderType,\n} from './helpers/types';\n\n//                     get orders by `maker` or `taker`\nexport type NFTOrdersUserParams =\n  | { maker: Address; type: NFTOrderType }\n  | { taker: Address; type: NFTOrderType };\ntype GetNFTOrderByHash = (\n  orderHash: string,\n  requestParams?: RequestParameters\n) => Promise<NFTOrderFromAPI>;\ntype GetNFTOrders = (\n  userParams: NFTOrdersUserParams,\n  requestParams?: RequestParameters\n) => Promise<NFTOrdersApiResponse>;\n\nexport type GetNFTOrdersFunctions = {\n  getNFTOrders: GetNFTOrders;\n  getNFTOrderByHash: GetNFTOrderByHash;\n};\n\nexport const constructGetNFTOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetNFTOrdersFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getNFTOrders: GetNFTOrders = async (userParams, requestParams) => {\n    const baseFetchURL = getBaseFetchURLByOrderType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n    const fetchURL = `${baseFetchURL}/${userURL}` as const;\n\n    const response = await fetcher<NFTOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getNFTOrderByHash: GetNFTOrderByHash = async (\n    orderHash,\n    requestParams\n  ) => {\n    const baseFetchURL = getBaseFetchURLByOrderType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<NFTOrderFromAPI, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  return {\n    getNFTOrders,\n    getNFTOrderByHash,\n  };\n};\n", "import { API_URL } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  NFTOrderToSend,\n  NFTOrderType,\n  NFTOrderFromAPI,\n  NFTOrderApiResponse,\n} from './helpers/types';\n\ntype PostNFTOrder = (\n  NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n  requestParams?: RequestParameters\n) => Promise<NFTOrderFromAPI>;\n\nexport type PostNFTOrderFunctions = {\n  postNFTLimitOrder: PostNFTOrder;\n  postNFTP2POrder: PostNFTOrder;\n};\n\nexport const constructPostNFTOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostNFTOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n    type: NFTOrderType,\n    requestParams?: RequestParameters\n  ): Promise<NFTOrderFromAPI> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    // @TODO check API return matches\n    const { order: newOrder } = await fetcher<\n      NFTOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: NFTOrderWithSignatureAndPermit,\n      requestParams,\n    });\n\n    return { ...newOrder };\n  };\n\n  const postNFTLimitOrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(\n      NFTOrderWithSignatureAndPermit,\n      'LIMIT',\n      requestParams\n    );\n  };\n\n  const postNFTP2POrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(NFTOrderWithSignatureAndPermit, 'P2P', requestParams);\n  };\n\n  return { postNFTLimitOrder, postNFTP2POrder };\n};\n", "import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetNFTOrdersContractFunctions = {\n  getNFTOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\n// should work the same as LimitOrders\nexport const constructGetNFTOrdersContract = (\n  options: ConstructFetchInput\n): GetNFTOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getNFTOrdersContract,\n  } = constructGetSpender(options);\n\n  return {\n    getNFTOrdersContract,\n    getTokenTransferProxy,\n  };\n};\n", "import type { ApproveToken } from '../../helpers/approve';\nimport type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../../types';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetNFTOrdersContract } from './getOrdersContract';\n\ntype ApproveNFT<T> = (\n  tokenAddress: Address,\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type ApproveTokenForNFTOrderFunctions<T> = {\n  /** @description approving AugustusSwapper as spender for takerAsset (ERC20) for Limit Orders that will be executed through it */\n  approveERC20ForNFTOrder: ApproveToken<T>;\n  /** @description approving AugustusRFQ as spender for makerAsset (NFT) */\n  approveNFTForNFTOrder: ApproveNFT<T>;\n};\n\nconst MinNFTAbi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        name: '_approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinNFTAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForNFTOrderFunctions<T> => {\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveERC20ForNFTOrder } =\n    constructApproveToken(options);\n\n  const { getNFTOrdersContract } = constructGetNFTOrdersContract(options);\n\n  const approveNFTForNFTOrder: ApproveNFT<T> = async (\n    tokenAddress,\n    overrides = {},\n    requestParams\n  ) => {\n    // @TODO add approvetakerAssetForNFTOrder to use AugustusSwapper as spender if we ever have SELL NFT swaps\n    const AugustusRFQ = await getNFTOrdersContract(requestParams);\n\n    const res = await options.contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinNFTAbi,\n      contractMethod: 'setApprovalForAll',\n      args: [AugustusRFQ, true],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return { approveERC20ForNFTOrder, approveNFTForNFTOrder };\n};\n", "import type { Address, ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport {\n  API_URL,\n  SwapSide,\n  ContractMethod,\n  DEFAULT_VERSION,\n} from '../../constants';\nimport {\n  BuildNFTOrderTxInput,\n  BuildOptions,\n  BuildSwapAndNFTOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { BigIntAsString, NFTOrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\nimport type { RequestParameters } from '../../types';\ntype MinBuildSwapAndNFTOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndNFTOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndNFTOrdersTx = (\n  params: MinBuildSwapAndNFTOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\ntype MinBuildNFTOrderTxInput = Omit<\n  BuildNFTOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildNFTOrdersTx = (\n  params: MinBuildNFTOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\nexport type BuildNFTOrdersTxFunctions = {\n  getNFTOrdersRate: GetNFTOrdersRate;\n  buildNFTOrderTx: BuildNFTOrdersTx;\n  buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx;\n};\n\ntype GetNFTOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\nexport const constructBuildNFTOrderTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildNFTOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  const { getRate: getSwapAndNFTOrderRate } = constructGetRate({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow from swap from srcToken to destToken(=order.takerAsset) followed by filling NFT orders\n  const getNFTOrdersRate: GetNFTOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    requestParams\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndNFTOrderRate(rateInput, requestParams);\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildNFTOrderTx: BuildNFTOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    const { takerAsset, totalTakerAmount } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildNFTOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: 'NFT', // support any NFT\n    };\n\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n  const buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndNFTOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n      destToken: 'NFT', // support any NFT,\n      destDecimals: params.priceRoute.destDecimals,\n    };\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n\n  return {\n    getNFTOrdersRate,\n    buildNFTOrderTx,\n    buildSwapAndNFTOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  NFTOrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: NFTOrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset: makerAsset.startsWith('0x')\n      ? makerAsset\n      : uintToAssetAddress(makerAsset),\n    takerAsset: takerAsset.startsWith('0x')\n      ? takerAsset\n      : uintToAssetAddress(takerAsset),\n  };\n}\n\n// extract asset address from makerAsset or takerAsset packed number encoded to contain AssetType\nfunction uintToAssetAddress(assetUint: BigIntAsString): Address {\n  return (\n    '0x' +\n    (BigInt(assetUint) & ((BigInt(1) << BigInt(160)) - BigInt(1))).toString(16)\n  );\n}\n", "import type { ExtraFetchParams, FetcherFunction } from '../../types';\nimport type { AxiosStatic } from 'axios';\nimport { FetcherError } from '../misc';\n\nexport type AxiosRequirement = Pick<AxiosStatic, 'request' | 'isAxiosError'>;\n\nexport const constructFetcher =\n  (axios: AxiosRequirement, extra?: ExtraFetchParams): FetcherFunction =>\n  async (params) => {\n    try {\n      const { requestParams, ...rest } = params;\n      // adding apiKey to headers if it's provided\n      const headers = extra?.apiKey\n        ? {\n            'X-API-KEY': extra.apiKey,\n            ...rest.headers,\n            ...requestParams?.headers,\n          }\n        : { ...rest.headers, ...requestParams?.headers };\n\n      const allParams = { ...rest, ...requestParams, headers };\n\n      const { data } = await axios.request(allParams);\n\n      return data;\n    } catch (error: any) {\n      if (axios.isAxiosError(error)) {\n        // attach a more meaningful message and other props\n        throw new FetcherError(error);\n      }\n\n      throw error;\n    }\n  };\n", "import type { ExtraFetchParams, FetcherFunction } from '../../types';\nimport { FetcherError } from '../misc';\n\n// @TODO may not work with node-fetch\ntype Fetch = typeof fetch;\n\nexport const constructFetcher =\n  (fetch: Fetch, extra?: ExtraFetchParams): FetcherFunction =>\n  async (params) => {\n    try {\n      const { url, method, requestParams } = params;\n      const body = method === 'POST' ? JSON.stringify(params.data) : null;\n      // Only JSON response for POST requests\n      const POSTheaders =\n        method === 'POST' && body\n          ? {\n              'Content-Type': 'application/json',\n            }\n          : undefined;\n\n      // adding apiKey to headers if it's provided\n      const apiHeaders = extra?.apiKey\n        ? { 'X-API-KEY': extra.apiKey }\n        : undefined;\n\n      // all headers combined\n      const headers =\n        POSTheaders || apiHeaders || params.headers || requestParams?.headers\n          ? {\n              ...apiHeaders,\n              ...POSTheaders,\n              ...params.headers,\n              ...requestParams?.headers,\n            }\n          : undefined;\n\n      const response = await fetch(url, {\n        method,\n        body,\n        ...requestParams,\n        headers,\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // @TODO figure out if this works analogous to AxiosError, especially code ==? status\n        throw new FetcherError({\n          code: String(response.status),\n          response: {\n            data,\n            status: response.status,\n            statusText: response.statusText,\n            headers: Object.fromEntries(response.headers.entries()),\n            config: { url, method },\n          },\n          message: response.statusText,\n          isAxiosError: false,\n        });\n      }\n\n      return data;\n    } catch (error: any) {\n      if (error instanceof FetcherError) throw error;\n      throw new FetcherError(error);\n    }\n  };\n", "import type {\n  Address,\n  ContractCallerFunctions,\n  NoExtraKeysCheck,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type {\n  JsonRpcProvider,\n  BaseProvider,\n  JsonRpcSigner,\n} from '@ethersproject/providers';\nimport type { Signer } from '@ethersproject/abstract-signer';\nimport type {\n  Contract as EthersV5Contract,\n  ContractFunction as EthersContractFunctionV5,\n  PopulatedTransaction as EthersPopulatedTransactionV5,\n  PayableOverrides,\n  CallOverrides,\n  ContractTransaction,\n} from '@ethersproject/contracts';\n\nimport type { BigNumber as EthersBigNumberV5 } from '@ethersproject/bignumber';\n\nimport { assert } from 'ts-essentials';\n\nexport interface EthersV5ProviderDeps {\n  ethersProviderOrSigner: BaseProvider | Signer;\n  EthersContract: typeof EthersV5Contract; // passing Contract in allows not to include ethers as dependency\n}\n\nexport const constructEthersV5ContractCaller = (\n  {\n    ethersProviderOrSigner: providerOrSigner,\n    EthersContract: Contract,\n  }: EthersV5ProviderDeps,\n  account?: Address\n): ContractCallerFunctions<ContractTransaction> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new Contract(address, abi, providerOrSigner);\n\n    assertEthersContractHasMethodsV5(contract, contractMethod);\n    // drop keys not in CallOverrides\n    const { block, gas, ...restOverrides } = overrides;\n    // reassign values to keys in CallOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      blockTag: block,\n      gasLimit: gas,\n    };\n\n    // type FinalCallOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalCallOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      CallOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in CallOverrides\n    const callOverrides: FinalCallOverrides = normalizedOverrides;\n    // returns whatever the Contract.method returns: BigNumber, string, boolean\n    return contract.callStatic[contractMethod](...args, callOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<ContractTransaction> = async (\n    params\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const contract = new Contract(address, abi, signer);\n\n    assertEthersContractHasMethodsV5(contract, contractMethod);\n    // drop keys not in PayableOverrides\n    const { gas, from, ...restOverrides } = overrides;\n    // reassign values to keys in PayableOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      gasLimit: gas,\n    };\n\n    // type FinalPayableOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalPayableOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      PayableOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in PayableOverrides\n    const txOverrides: FinalPayableOverrides = normalizedOverrides;\n    const txResponse: ContractTransaction = await contract[contractMethod](\n      ...args,\n      txOverrides\n    );\n\n    return txResponse;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    assert(isTypedDataCapableSigner(signer), 'Signer can sign typed data');\n\n    const { data, domain, types } = typedData;\n\n    return signer._signTypedData(domain, types, data);\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isEthersProvider(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is BaseProvider {\n  return '_isProvider' in providerOrSigner && providerOrSigner._isProvider;\n}\n\nfunction isEthersProviderWithSigner(\n  providerOrSigner: JsonRpcProvider | BaseProvider | Signer\n): providerOrSigner is JsonRpcProvider {\n  return isEthersProvider(providerOrSigner) && 'getSigner' in providerOrSigner;\n}\n\nfunction isEthersSigner(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is Signer {\n  return '_isSigner' in providerOrSigner && providerOrSigner._isSigner;\n}\n\nfunction isTypedDataCapableSigner(\n  signer: Signer\n): signer is Signer & Pick<JsonRpcSigner, '_signTypedData'> {\n  return '_signTypedData' in signer;\n}\n\n/// ethers v5\ntype EthersContractWithMethodV5<T extends string> = EthersV5Contract & {\n  readonly [method in T]: EthersContractFunctionV5;\n} & {\n  readonly functions: { [method in T]: EthersContractFunctionV5 };\n\n  readonly callStatic: { [method in T]: EthersContractFunctionV5 };\n  readonly estimateGas: {\n    [method in T]: EthersContractFunctionV5<EthersBigNumberV5>;\n  };\n  readonly populateTransaction: {\n    [method in T]: EthersContractFunctionV5<EthersPopulatedTransactionV5>;\n  };\n};\n\nfunction ethersContractHasMethodsV5<T extends string>(\n  contract: EthersV5Contract,\n  ...methods: T[]\n): contract is EthersContractWithMethodV5<T> {\n  return methods.every((method) => typeof contract[method] === 'function');\n}\n\nfunction assertEthersContractHasMethodsV5<T extends string>(\n  contract: EthersV5Contract,\n  ...methods: T[]\n): asserts contract is EthersContractWithMethodV5<T> {\n  assert(\n    ethersContractHasMethodsV5(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n", "import type {\n  Address,\n  ContractCallerFunctions,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport { assert } from 'ts-essentials';\nimport type {\n  JsonRpcProvider,\n  Signer,\n  ContractRunner,\n  Contract as EthersContract,\n  Overrides,\n  ContractTransactionResponse,\n} from 'ethers';\n\nexport interface EthersV6ProviderDeps {\n  ethersV6ProviderOrSigner: ContractRunner | Signer;\n  EthersV6Contract: typeof EthersContract; // passing Contract in allows not to include ethers as dependency\n}\n\nexport const constructContractCaller = (\n  {\n    ethersV6ProviderOrSigner: providerOrSigner,\n    EthersV6Contract: Contract,\n  }: EthersV6ProviderDeps,\n  account?: Address\n): ContractCallerFunctions<ContractTransactionResponse> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new Contract(address, abi, providerOrSigner);\n\n    // drop keys not in CallOverrides\n    const { block, gas, ...restOverrides } = overrides;\n    // reassign values to keys in CallOverrides\n    const normalizedOverrides: Overrides = {\n      ...restOverrides,\n      blockTag: block,\n      gasLimit: gas,\n    };\n\n    const callableContractFunction = contract.getFunction(contractMethod);\n\n    // returns whatever the Contract[\"method\"].staticCall returns: BigNumber, string, boolean\n    return callableContractFunction.staticCall(...args, normalizedOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<\n    ContractTransactionResponse\n  > = async (params) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? await providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const contract = new Contract(address, abi, signer);\n\n    // drop keys not in PayableOverrides\n    const { gas, from, ...restOverrides } = overrides;\n    // reassign values to keys in PayableOverrides\n    const normalizedOverrides: Overrides = {\n      ...restOverrides,\n      gasLimit: gas,\n    };\n\n    // if no method for contractMethod, ethers will throw\n    const callableContractFunction = contract.getFunction(contractMethod);\n\n    const txResponse = await callableContractFunction.send(\n      ...args,\n      normalizedOverrides\n    );\n\n    return txResponse;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? await providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const { data, domain, types } = typedData;\n\n    return signer.signTypedData(domain, types, data);\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isEthersProviderWithSigner(\n  providerOrSigner: JsonRpcProvider | ContractRunner | Signer\n): providerOrSigner is JsonRpcProvider {\n  return 'getSigner' in providerOrSigner;\n}\n\nfunction isEthersSigner(\n  providerOrSigner: ContractRunner | Signer\n): providerOrSigner is Signer {\n  return 'getAddress' in providerOrSigner;\n}\n", "import { assert } from 'ts-essentials';\nimport { TypedDataField } from '../../methods/common/orders/buildOrderData';\n\n// regex from @ethersproject/hash TypedDataEncoder.constructor\n// may be overly strict, but reliable\nconst baseTypeRegex = /^([^\\x5b]*)(\\x5b|$)/;\n\nexport function findPrimaryType(\n  types: Record<string, TypedDataField[]>\n): string {\n  const candidates = Object.keys(types);\n  const candidatesSet = new Set(candidates);\n\n  candidates.forEach((candidate) => {\n    const typedDataFields = types[candidate];\n    if (!typedDataFields) return;\n\n    typedDataFields.forEach(({ type }) => {\n      // Get the base type (drop any array specifiers)\n      const baseType = type.match(baseTypeRegex)?.[1];\n      if (!baseType) return;\n\n      // if type was referred to as a child of another type, it can't be the primaryType\n      candidatesSet.delete(baseType);\n    });\n  });\n\n  const [primaryType] = Array.from(candidatesSet);\n\n  assert(\n    primaryType,\n    `No primary type found in SignableTypedData types, ${JSON.stringify(types)}`\n  );\n\n  return primaryType;\n}\n", "import type {\n  Address,\n  ContractCallerFunctions,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type { PayableCallOptions, AbiItem } from 'web3';\nimport type Web3 from 'web3';\nimport type { ContractAbi, Contract as Web3Contract } from 'web3';\nimport type { PayableTxOptions } from 'web3-eth-contract';\nimport { assert } from 'ts-essentials';\nimport { findPrimaryType } from './helpers';\n\ntype ContractMethodRes = ReturnType<Web3ContractSendMethod>;\nexport type Web3UnpromiEvent = Pick<\n  ReturnType<ContractMethodRes['send']>,\n  'on' | 'once'\n>;\n\ntype SendOptions = PayableTxOptions;\ntype CallOptions = PayableCallOptions;\n\nexport const constructContractCaller = (\n  web3: Web3,\n  account?: Address\n): ContractCallerFunctions<Web3UnpromiEvent> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as AbiItem[], // FIXME abi types ethers dependant\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { block, gas, value, ...restOverrides } = overrides;\n\n    const normalizedOverrides: CallOptions = {\n      ...restOverrides,\n      gas: gas?.toString(10),\n      value: value?.toString(10),\n    };\n\n    return contract.methods[contractMethod](...args).call(normalizedOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<Web3UnpromiEvent> = async (\n    params\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to send transactions');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as unknown as AbiItem[], // FIXME\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { gas, from, value, nonce, ...restOverrides } = overrides;\n\n    const _from = from || account;\n\n    assert(_from, 'from is required');\n\n    const normalizedOverrides: SendOptions = {\n      ...restOverrides,\n      from: _from,\n      gas: gas?.toString(10),\n      value: value?.toString(10),\n      nonce: nonce?.toString(10),\n    };\n\n    const preparedCall = contract.methods[contractMethod](...args);\n\n    const promiEvent = preparedCall.send(normalizedOverrides);\n\n    // can't just return promiEvent, because async function returns a Promise<PromiEvent>\n    // and await Promise<PromiEvent> automatically awaits the value of PromiEvent,\n    // that is await Promise<PromiEvent> = Awaited<PromiEvent> that doesn't have .on|once\n    // so that functionality becomes lost\n    // transactCall can be made sync, but approve has to be async to await getSpender()\n    const unpromiEvent: Web3UnpromiEvent = {\n      on: promiEvent.on.bind(promiEvent),\n      once: promiEvent.once.bind(promiEvent),\n    };\n\n    return unpromiEvent;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to sign data');\n\n    const { data, domain, types } = typedData;\n\n    const _typedData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        ...types,\n      },\n      primaryType: findPrimaryType(types),\n      domain,\n      message: data,\n    };\n\n    // account must be among unlocked accounts\n    const signature = await web3.eth.signTypedData(account, _typedData as any);\n    return signature;\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\n/// web3@4\ntype Web3ContractSendMethod = Web3Contract<ContractAbi>['methods'][string];\n\ntype Web3ContractWithMethod<T extends string> = Web3Contract<ContractAbi> & {\n  methods: { [method in T]: Web3ContractSendMethod };\n};\n\nfunction web3ContractHasMethods<T extends string>(\n  contract: Web3Contract<ContractAbi>,\n  ...methods: T[]\n): contract is Web3ContractWithMethod<T> {\n  return methods.every(\n    (method) => typeof contract.methods[method] === 'function'\n  );\n}\n\nfunction assertWeb3ContractHasMethods<T extends string>(\n  contract: Web3Contract<ContractAbi>,\n  ...methods: T[]\n): asserts contract is Web3ContractWithMethod<T> {\n  assert(\n    web3ContractHasMethods(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n", "import type {\n  Address,\n  ContractCallerFunctions,\n  ContractCallStaticInput,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport { assert, MarkOptional } from 'ts-essentials';\n\nimport type {\n  PublicActions,\n  WalletActions,\n  Hex,\n  BlockTag,\n  Chain,\n  Transport,\n  TypedDataDomain,\n  Account,\n} from 'viem';\nimport { findPrimaryType } from './helpers';\nimport { TransactionParams } from '../../methods/swap/transaction';\n\nexport type MinViemClient = Partial<\n  Pick<PublicActions<Transport, Chain>, 'readContract'> &\n    Pick<\n      WalletActions<Chain>,\n      'writeContract' | 'signTypedData' | 'signMessage'\n    >\n> & { account?: Account };\n\nexport const constructContractCaller = (\n  viemClient: MinViemClient,\n  account?: Address\n): ContractCallerFunctions<Hex> => {\n  const staticCall: StaticContractCallerFn = async <\n    T,\n    M extends string = string\n  >(\n    params: ContractCallStaticInput<M>\n  ): Promise<T> => {\n    assert(\n      viemClient.readContract,\n      'Viem client must have readContract Public Action'\n    );\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const { block } = overrides;\n\n    const { blockNumber, blockTag } =\n      typeof block === 'number'\n        ? { blockNumber: BigInt(block) }\n        : { blockTag: block as BlockTag };\n\n    const result = viemClient.readContract({\n      account: viemClient.account || (account as Hex),\n      address: address as Hex,\n      abi,\n      functionName: contractMethod,\n      args,\n      blockTag,\n      blockNumber,\n    });\n\n    return result as T; // can't get specific type for generic abi & method\n  };\n\n  const transactCall: TransactionContractCallerFn<Hex> = async (params) => {\n    assert(account, 'account must be specified sign transactions');\n    assert(\n      viemClient.writeContract,\n      'Viem client must have writeContract Wallet Action'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const viemTxParams = txParamsToViemTxParams({\n      ...overrides,\n      to: address,\n      gas: overrides.gas?.toString(10),\n      value: overrides.value?.toString(10),\n    });\n\n    const gasPriceParams =\n      'maxFeePerGas' in viemTxParams\n        ? {\n            maxFeePerGas: viemTxParams.maxFeePerGas,\n            maxPriorityFeePerGas: viemTxParams.maxPriorityFeePerGas,\n          }\n        : 'gasPrice' in viemTxParams\n        ? { gasPrice: viemTxParams.gasPrice }\n        : {};\n\n    const txHash = await viemClient.writeContract({\n      // either `viemClient` has account assigned to it,\n      // or the provider `viemClient` was created with must control `account` (viemClient.getAddresses()[0]===account);\n      // otherwise breaks with ` ProviderError: Unknown account 0x...`\n      account: viemClient.account || (account as Hex),\n      address: address as Hex,\n      abi,\n      functionName: contractMethod,\n      args: argsToViemArgs(args),\n      value: viemTxParams.value,\n      gas: viemTxParams.gas,\n      // ...viemTxParams,\n      // account: (overrides.from || account) as Hex,\n      nonce: overrides.nonce,\n      ...gasPriceParams,\n    });\n\n    return txHash;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      viemClient.signTypedData,\n      'Viem client must have signTypedData Wallet Action'\n    );\n\n    const { data, domain, types } = typedData;\n\n    const primaryType = findPrimaryType(types);\n\n    const chainId =\n      domain.chainId === undefined ? undefined : Number(domain.chainId);\n    const viemDomain: TypedDataDomain = {\n      chainId,\n      name: domain.name,\n      version: domain.version,\n      verifyingContract: domain.verifyingContract as Hex,\n      salt: domain.salt as Hex,\n    };\n\n    const signature = await viemClient.signTypedData({\n      // either `viemClient` has account assigned to it,\n      // or the provider `viemClient` was created with must control `account` (viemClient.getAddresses()[0]===account)\n      account: viemClient.account || (account as Hex),\n      domain: viemDomain,\n      types,\n      primaryType,\n      message: data,\n    });\n\n    return signature;\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\ntype ViemTxParams = {\n  to: Hex;\n  data?: Hex;\n  value?: bigint;\n  nonce?: number;\n  gas?: bigint;\n} & (\n  | { maxFeePerGas?: bigint; maxPriorityFeePerGas?: bigint }\n  | { gasPrice?: bigint }\n);\n\nexport function txParamsToViemTxParams(\n  txParams: Omit<\n    MarkOptional<TransactionParams, 'data' | 'value'>,\n    'chainId' | 'from'\n  >\n): ViemTxParams {\n  const gas = txParams.gas !== undefined ? BigInt(txParams.gas) : undefined;\n  const gasPrice =\n    txParams.gasPrice !== undefined ? BigInt(txParams.gasPrice) : undefined;\n  const maxFeePerGas =\n    txParams.maxFeePerGas !== undefined\n      ? BigInt(txParams.maxFeePerGas)\n      : undefined;\n  const maxPriorityFeePerGas =\n    txParams.maxPriorityFeePerGas !== undefined\n      ? BigInt(txParams.maxPriorityFeePerGas)\n      : undefined;\n\n  const viemTxParams = {\n    to: txParams.to as Hex,\n    data: txParams.data as Hex,\n    value: txParams.value !== undefined ? BigInt(txParams.value) : undefined,\n    gas,\n    ...(txParams.maxFeePerGas !== undefined\n      ? { maxFeePerGas, maxPriorityFeePerGas }\n      : { gasPrice }),\n  };\n  return viemTxParams;\n}\n\nfunction argsToViemArgs(args: any[]): any[] {\n  return args.map((arg) => {\n    if (typeof arg === 'string') {\n      if (arg.startsWith('0x')) {\n        return arg;\n      }\n      const asNumber = Number(arg);\n      if (Number.isNaN(asNumber)) {\n        return arg;\n      }\n      return BigInt(asNumber);\n    }\n    return arg;\n  });\n}\n", "import type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport { constructGetSpender } from '../swap/spender';\n\ntype GetDeltaContract = (\n  requestParams?: RequestParameters\n) => Promise<Address | null>;\nexport type GetDeltaContractFunctions = {\n  /** @description returns ParaswapDelta contract address when Delta is available on current chain */\n  getDeltaContract: GetDeltaContract;\n};\n\nexport const constructGetDeltaContract = (\n  options: ConstructFetchInput\n): GetDeltaContractFunctions => {\n  // analogous to getSpender() but for Delta Orders Contract = ParaswapDelta\n\n  const { getContracts } = constructGetSpender(options);\n\n  const getDeltaContract: GetDeltaContract = async (requestParams) => {\n    const { ParaswapDelta } = await getContracts(requestParams);\n    return ParaswapDelta || null;\n  };\n\n  return { getDeltaContract };\n};\n", "import { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\n\nexport type PartnerFeeResponse = {\n  partnerFee: number; // in %, e.g. 0.12\n  partnerAddress: string;\n  takeSurplus: boolean;\n};\n\ntype PartnerFeeQueryParams = {\n  partner: string;\n};\n\ntype GetPartnerFee = (\n  options: PartnerFeeQueryParams,\n  requestParams?: RequestParameters\n) => Promise<PartnerFeeResponse>;\n\nexport type GetPartnerFeeFunctions = {\n  getPartnerFee: GetPartnerFee;\n};\n\nexport const constructGetPartnerFee = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetPartnerFeeFunctions => {\n  const partnerFeeUrl = `${apiURL}/prices/partnerfee/${chainId}` as const;\n\n  // going on the assumption that one `partner` will correspond to one `partnerFee` during the lifetime of SDK instance,\n  // to avoid unnecessary network requests\n  const cachedPartnerFee = new Map<string, PartnerFeeResponse>();\n\n  const getPartnerFee: GetPartnerFee = async (options, requestParams) => {\n    if (cachedPartnerFee.has(options.partner)) {\n      return cachedPartnerFee.get(options.partner)!;\n    }\n\n    const search = constructSearchString<PartnerFeeQueryParams>(options);\n\n    const fetchURL = `${partnerFeeUrl}/${search}` as const;\n\n    const data = await fetcher<PartnerFeeResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    cachedPartnerFee.set(options.partner, data);\n\n    return data;\n  };\n\n  return {\n    getPartnerFee,\n  };\n};\n", "import { MarkOptional } from 'ts-essentials';\nimport { Domain, ZERO_ADDRESS } from '../../common/orders/buildOrderData';\nimport { Bridge, DeltaAuctionOrder } from './types';\n\n// Order(address owner,address beneficiary,address srcToken,address destToken,uint256 srcAmount,uint256 destAmount,uint256 deadline,uint256 nonce,bytes permit, bridge Bridge)\";\nconst SWAP_ORDER_EIP_712_TYPES = {\n  Order: [\n    { name: 'owner', type: 'address' },\n    { name: 'beneficiary', type: 'address' },\n    { name: 'srcToken', type: 'address' },\n    { name: 'destToken', type: 'address' },\n    { name: 'srcAmount', type: 'uint256' },\n    { name: 'destAmount', type: 'uint256' },\n    { name: 'expectedAmount', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n    { name: 'kind', type: 'uint8' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'partnerAndFee', type: 'uint256' },\n    { name: 'permit', type: 'bytes' },\n    { name: 'metadata', type: 'bytes' },\n    { name: 'bridge', type: 'Bridge' },\n  ],\n  Bridge: [\n    {\n      name: 'protocolSelector',\n      type: 'bytes4',\n    },\n    {\n      name: 'destinationChainId',\n      type: 'uint256',\n    },\n    {\n      name: 'outputToken',\n      type: 'address',\n    },\n    {\n      name: 'scalingFactor',\n      type: 'int8',\n    },\n    {\n      name: 'protocolData',\n      type: 'bytes',\n    },\n  ],\n};\n\nexport type SignableDeltaOrderData = {\n  types: {\n    Order: typeof SWAP_ORDER_EIP_712_TYPES.Order;\n    Bridge: typeof SWAP_ORDER_EIP_712_TYPES.Bridge;\n  };\n  domain: Domain;\n  data: DeltaAuctionOrder;\n};\n\ntype SignDeltaOrderInput = {\n  orderInput: DeltaAuctionOrder;\n  paraswapDeltaAddress: string;\n  chainId: number;\n};\n\nfunction produceDeltaOrderTypedData({\n  orderInput,\n  chainId,\n  paraswapDeltaAddress,\n}: SignDeltaOrderInput): SignableDeltaOrderData {\n  const typedData = {\n    types: {\n      Order: SWAP_ORDER_EIP_712_TYPES.Order,\n      Bridge: SWAP_ORDER_EIP_712_TYPES.Bridge,\n    },\n    domain: {\n      name: 'Portikus',\n      version: '2.0.0',\n      chainId,\n      verifyingContract: paraswapDeltaAddress,\n    },\n    data: orderInput,\n  };\n\n  return typedData;\n}\n\nexport type DeltaOrderDataInput = MarkOptional<\n  Omit<DeltaAuctionOrder, 'partnerAndFee'>,\n  'beneficiary' | 'deadline' | 'nonce' | 'permit'\n>;\n\nexport type BuildDeltaOrderDataInput = MarkOptional<\n  DeltaOrderDataInput,\n  'metadata'\n> & {\n  partnerAddress: string;\n  paraswapDeltaAddress: string;\n  partnerFeeBps: number;\n  partnerTakesSurplus?: boolean;\n  chainId: number;\n  bridge: Bridge;\n};\n\n// default deadline = 1 hour for now (may be changed later)\nexport const DELTA_DEFAULT_EXPIRY = 60 * 60; // seconds\n\nexport function buildDeltaSignableOrderData({\n  owner,\n  beneficiary = owner,\n\n  srcToken,\n  destToken,\n  srcAmount,\n  destAmount,\n  expectedAmount,\n\n  deadline = Math.floor(Date.now() / 1000 + DELTA_DEFAULT_EXPIRY),\n  nonce = Date.now().toString(10), // random enough to not cause collisions\n\n  permit = '0x',\n\n  kind,\n  metadata = '0x',\n\n  partnerAddress,\n  partnerFeeBps,\n  partnerTakesSurplus = false,\n\n  chainId,\n  paraswapDeltaAddress,\n  bridge,\n}: BuildDeltaOrderDataInput): SignableDeltaOrderData {\n  const orderInput: DeltaAuctionOrder = {\n    owner,\n    beneficiary,\n    srcToken,\n    destToken,\n    srcAmount,\n    destAmount,\n    expectedAmount,\n    deadline,\n    nonce,\n    permit,\n    partnerAndFee: producePartnerAndFee({\n      partnerFeeBps,\n      partnerAddress,\n      partnerTakesSurplus,\n    }),\n    bridge,\n    kind,\n    metadata,\n  };\n\n  return produceDeltaOrderTypedData({\n    orderInput,\n    chainId,\n    paraswapDeltaAddress,\n  });\n}\n\ntype ProducePartnerAndFeeInput = {\n  partnerFeeBps: number;\n  partnerAddress: string;\n  partnerTakesSurplus: boolean;\n};\n\n// fee and address are encoded together\nfunction producePartnerAndFee({\n  partnerFeeBps,\n  partnerAddress,\n  partnerTakesSurplus,\n}: ProducePartnerAndFeeInput): string {\n  if (partnerAddress === ZERO_ADDRESS) return '0';\n\n  const partnerAndFee =\n    (BigInt(partnerAddress) << BigInt(96)) |\n    BigInt(partnerFeeBps.toFixed(0)) |\n    (BigInt(partnerTakesSurplus) << BigInt(8));\n\n  return partnerAndFee.toString(10);\n}\n", "import { SwapSide } from '../../../constants';\n\nenum OrderKind {\n  Sell = 0,\n  Buy = 1,\n}\n\nexport const SwapSideToOrderKind = {\n  [SwapSide.SELL]: OrderKind.Sell,\n  [SwapSide.BUY]: OrderKind.Buy,\n} as const;\n\nexport type DeltaAuctionOrder = {\n  /** @description The address of the order owner */\n  owner: string;\n  /** @description The address of the order beneficiary */\n  beneficiary: string; // beneficiary==owner if no transferTo\n  /** @description The address of the src token */\n  srcToken: string; // lowercase\n  /** @description The address of the dest token */\n  destToken: string; // lowercase\n  /** @description The amount of src token to swap */\n  srcAmount: string; // wei\n  /** @description The minimum amount of dest token to receive */\n  destAmount: string; // wei\n  /** @description The expected amount of token to receive */\n  expectedAmount: string; // wei\n  /** @description The kind of the order */\n  kind: OrderKind;\n  /** @description Metadata for the order, hex string */\n  metadata: string;\n  /** @description The deadline for the order */\n  deadline: number; // seconds\n  /** @description The nonce of the order */\n  nonce: string; // can be random, can even be Date.now()\n  /** @description Optional permit signature for the src token */\n  permit: string; //can be \"0x\"\n  /** @description Encoded partner address, fee bps, and flags for the order. partnerAndFee = (partner << 96) | (partnerTakesSurplus << 8) | fee in bps (max fee is 2%) */\n  partnerAndFee: string;\n  /** @description The bridge input */\n  bridge: Bridge;\n};\n\nexport type Bridge = {\n  protocolSelector: string; // Hex string\n  destinationChainId: number;\n  /** @description The address of the output token. Same as Order.destToken but on destination chain, so can still be a different address */\n  outputToken: string;\n  scalingFactor: number;\n\n  /** @description Data specific to the protocol */\n  protocolData: string; // Hex string\n};\n\nexport type DeltaAuctionStatus =\n  | 'NOT_STARTED'\n  | 'RUNNING'\n  | 'EXECUTING'\n  | 'EXECUTED'\n  | 'FAILED'\n  | 'EXPIRED'\n  | 'CANCELLED'\n  | 'SUSPENDED';\n\ntype DeltaAuctionTransaction = {\n  id: string;\n  hash: string;\n  orderId: string;\n  bidId: string | null;\n  blockNumber: number;\n  blockHash: string;\n  gasUsed: bigint;\n  gasPrice: bigint;\n  blobGasUsed: bigint;\n  blobGasPrice: bigint;\n  index: number;\n  status: number;\n  from: string;\n  to: string;\n  receivedAmount: string;\n  receivedAmountUSD: number;\n  spentAmount: string;\n  spentAmountUSD: number;\n  filledPercent: number; // in base points\n  protocolFee: string;\n  partnerFee: string;\n  agent: string;\n  auctionId: string;\n};\n\nexport type DeltaAuction = {\n  id: string;\n  deltaVersion: string; // 1.0 or 2.0 currently\n  user: string;\n  signature: string;\n  status: DeltaAuctionStatus;\n  order: DeltaAuctionOrder;\n  orderHash: string | null; // not available on old Orders only\n  transactions: DeltaAuctionTransaction[];\n  chainId: number;\n  partner: string;\n  referrerAddress: string | null;\n  expiresAt: string;\n  createdAt: string;\n  updatedAt: string;\n  partiallyFillable: boolean;\n\n  excludeAgents: string[] | null;\n  includeAgents: string[] | null;\n\n  bridgeMetadata: BridgeMetadata | null;\n  bridgeStatus: BridgeStatus | null;\n\n  // @TODO only returned after POST Order so far\n  // orderVersion: string; // \"2.0.0\"\n  // deltaGasOverhead: number;\n\n  type: 'MARKET' | 'LIMIT'; // @TODO when available in API for individual /order/:hash|:id\n};\n\nexport type BridgeMetadata = {\n  /** @description The amount that user should expect to get */\n  outputAmount: string;\n  /** @description The cross-chain deadline. If deadline passes, the bridgeStatus would be expired */\n  fillDeadline: number;\n  /** @description The deposit id */\n  depositId: number;\n  /** @description The transaction hash on the destination chain that fulfilled the order. When bridgeStatus='filled' */\n  fillTx?: string;\n  /** @description The transaction hash on the source chain that refunded the deposit. When bridgeStatus='refunded' */\n  depositRefundTxHash?: string;\n};\n\n//                                                             refunded is basically failed\nexport type BridgeStatus = 'pending' | 'filled' | 'expired' | 'refunded';\n\n//// available on BridgePrice ////\n\n// so far\ntype ProtocolName = 'Across' | 'StargateBus' | 'StargateTaxi';\n\ntype BridgeQuoteFee = {\n  feeToken: string;\n  amount: string;\n  amountInSrcToken: string;\n  amountInUSD: string;\n};\n\nexport type BridgePriceInfo = {\n  protocolName: ProtocolName;\n  destAmountAfterBridge: string;\n  destUSDAfterBridge: string;\n  fees: BridgeQuoteFee[];\n  estimatedTimeMs: number;\n};\n", "import type {\n  ConstructFetchInput,\n  EnumerateLiteral,\n  RequestParameters,\n} from '../../types';\nimport { constructGetDeltaContract } from './getDeltaContract';\nimport { BridgePrice } from './getDeltaPrice';\nimport { constructGetPartnerFee } from './getPartnerFee';\nimport {\n  buildDeltaSignableOrderData,\n  type BuildDeltaOrderDataInput,\n  type SignableDeltaOrderData,\n} from './helpers/buildDeltaOrderData';\nimport { SwapSideToOrderKind } from './helpers/types';\nimport { BeneficiaryType } from '../common/orders/types';\nimport { SwapSide } from '../../constants';\nexport type { SignableDeltaOrderData } from './helpers/buildDeltaOrderData';\n\nexport type SwapSideUnion = EnumerateLiteral<typeof SwapSide>;\n\nexport type BuildDeltaOrderDataParams = {\n  /** @description The address of the order owner */\n  owner: string;\n  /** @description The address of the order beneficiary */\n  beneficiary?: string; // beneficiary==owner if no transferTo\n  /** @description The address of the src token */\n  srcToken: string; // lowercase\n  /** @description The address of the dest token. For Crosschain Order - destination token on the destination chain */\n  destToken: string; // lowercase\n  /** @description The amount of src token to swap */\n  srcAmount: string; // wei\n  /** @description The minimum amount of dest token to receive */\n  destAmount: string; // wei, deltaPrice.destAmount - slippage\n  /** @description The deadline for the order */\n  deadline?: number; // seconds\n  /** @description The nonce of the order */\n  nonce?: number | string; // can be random, can even be Date.now()\n  /** @description Optional permit signature for the src token https://developers.velora.xyz/api/velora-api/velora-delta-api/build-a-delta-order-to-sign#supported-permits-order#supported-permits */\n  permit?: string; //can be \"0x\"\n  /** @description Partner string. */\n  partner?: string;\n\n  /** @description Destination Chain ID for Crosschain Orders */\n  destChainId?: number;\n  /** @description Whether the beneficiary is a contract. Needed to automatically fill in crosschain Bridge */\n  beneficiaryType?: BeneficiaryType;\n\n  /** @description price response received from /delta/prices (getDeltaPrice method) */\n  deltaPrice: Pick<\n    BridgePrice,\n    | 'destAmount'\n    | 'partner'\n    | 'partnerFee'\n    | 'destToken'\n    | 'srcAmount'\n    | 'bridge'\n  >;\n\n  /** @description partner fee in basis points (bps), 50bps=0.5% */\n  partnerFeeBps?: number;\n  /** @description partner address */\n  partnerAddress?: string;\n  /** @description take surplus */\n  partnerTakesSurplus?: boolean;\n\n  /** @description The side of the order. Default is SELL */\n  side?: SwapSideUnion;\n  /** @description Metadata for the order, hex string */\n  metadata?: string;\n};\n\ntype BuildDeltaOrder = (\n  buildOrderParams: BuildDeltaOrderDataParams,\n  requestParams?: RequestParameters\n) => Promise<SignableDeltaOrderData>;\n\nexport type BuildDeltaOrderFunctions = {\n  /** @description Build Orders to be posted to Delta API for execution */\n  buildDeltaOrder: BuildDeltaOrder;\n};\n\nexport const constructBuildDeltaOrder = (\n  options: ConstructFetchInput\n): BuildDeltaOrderFunctions => {\n  const { chainId } = options;\n\n  // cached internally\n  const { getDeltaContract } = constructGetDeltaContract(options);\n  // cached internally for `partner`\n  const { getPartnerFee } = constructGetPartnerFee(options);\n\n  const buildDeltaOrder: BuildDeltaOrder = async (options, requestParams) => {\n    const ParaswapDelta = await getDeltaContract(requestParams);\n    if (!ParaswapDelta) {\n      throw new Error(`Delta is not available on chain ${chainId}`);\n    }\n\n    ////// Partner logic //////\n\n    // externally supplied partner fee data takes precedence\n    let partnerAddress = options.partnerAddress;\n    let partnerFeeBps =\n      options.partnerFeeBps ?? options.deltaPrice.partnerFee * 100;\n    let partnerTakesSurplus = options.partnerTakesSurplus;\n\n    // if fee given, takeSurplus is ignored\n    const feeOrTakeSurplusSupplied =\n      partnerFeeBps !== undefined || partnerTakesSurplus !== undefined;\n\n    if (partnerAddress === undefined || feeOrTakeSurplusSupplied) {\n      const partner = options.partner || options.deltaPrice.partner;\n      const partnerFeeResponse = await getPartnerFee(\n        { partner },\n        requestParams\n      );\n\n      partnerAddress = partnerAddress ?? partnerFeeResponse.partnerAddress;\n      // deltaPrice.partnerFee and partnerFeeResponse.partnerFee should be the same, but give priority to externally provided\n      partnerFeeBps = partnerFeeBps ?? partnerFeeResponse.partnerFee;\n      partnerTakesSurplus =\n        partnerTakesSurplus ?? partnerFeeResponse.takeSurplus;\n    }\n\n    const swapSide = options.side ?? SwapSide.SELL;\n\n    const expectedAmount =\n      swapSide === SwapSide.SELL\n        ? options.deltaPrice.destAmount\n        : options.deltaPrice.srcAmount;\n\n    const input: BuildDeltaOrderDataInput = {\n      owner: options.owner,\n      beneficiary: options.beneficiary,\n      srcToken: options.srcToken,\n      // for some cases of WETH->ETH crosschain swaps, the destToken is changed to WETH or ETH,\n      // this is already reflected in deltaPrice\n      destToken: options.deltaPrice.destToken,\n      srcAmount: options.srcAmount,\n      destAmount: options.destAmount,\n      expectedAmount,\n      deadline: options.deadline,\n      nonce: options.nonce?.toString(10),\n      permit: options.permit,\n      kind: SwapSideToOrderKind[swapSide],\n      metadata: options.metadata,\n\n      chainId,\n      paraswapDeltaAddress: ParaswapDelta,\n      partnerAddress,\n      partnerTakesSurplus,\n      partnerFeeBps,\n\n      bridge: options.deltaPrice.bridge, // ZERO_BRIDGE for same-chain Orders\n    };\n\n    return buildDeltaSignableOrderData(input);\n  };\n\n  return {\n    buildDeltaOrder,\n  };\n};\n", "import { assert } from 'ts-essentials';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { BridgePrice } from './getDeltaPrice';\n// import { constructGetMulticallHandlers } from './getMulticallHandlers';\nimport {\n  // getDeltaBridge,\n  GetDeltaBridgeAndDestTokenOutput,\n} from './helpers/across';\nimport { BeneficiaryType } from '../common/orders/types';\nexport type { SignableDeltaOrderData } from './helpers/buildDeltaOrderData';\n\nexport type BuildCrosschainOrderBridgeParams = {\n  /** @description The address of the destination token on the destination chain */\n  destToken: string; // lowercase\n  /** @description Destination Chain ID for Crosschain Orders */\n  destChainId: number;\n  /** @description Whether the beneficiary is a contract. Needed to automatically fill in crosschain Bridge */\n  beneficiaryType: BeneficiaryType;\n\n  /** @description price response received from /delta/prices (getDeltaPrice method) */\n  deltaPrice: BridgePrice;\n};\n\ntype BuildCrosschainOrderBridge = (\n  buildOrderParams: BuildCrosschainOrderBridgeParams,\n  requestParams?: RequestParameters\n) => Promise<GetDeltaBridgeAndDestTokenOutput>;\n\nexport { GetDeltaBridgeAndDestTokenOutput as CrosschainOrderBridgeAndChanges };\n\nexport type BuildCrosschainOrderBridgeFunctions = {\n  /** @description Build Orders to be posted to Delta API for execution */\n  buildCrosschainOrderBridge: BuildCrosschainOrderBridge;\n};\n\nexport const constructBuildCrosschainOrderBridge = (\n  options: ConstructFetchInput\n): BuildCrosschainOrderBridgeFunctions => {\n  const { chainId } = options;\n\n  // cached internally for `multicall` contracts\n  // const { getMulticallHandlers } = constructGetMulticallHandlers(options);\n\n  const buildCrosschainOrderBridge: BuildCrosschainOrderBridge = async (\n    { destToken, destChainId, beneficiaryType, deltaPrice },\n    requestParams\n  ) => {\n    assert(\n      chainId !== deltaPrice.bridge.destinationChainId,\n      '`deltaPrice.bridge.destinationChainId` must be different from `chainId` for crosschain Order.bridge'\n    );\n\n    assert(\n      destChainId === deltaPrice.bridge.destinationChainId,\n      '`destChainId` must match `deltaPrice.bridge.destinationChainId` for crosschain Order.bridge'\n    );\n\n    /* const getMulticallHandler = async (chainId: number) => {\n      const multicallHandlersMap = await getMulticallHandlers(requestParams);\n      const multicallHandler = multicallHandlersMap[chainId];\n\n      assert(\n        multicallHandler,\n        `Multicall handler not found for chain ${chainId}`\n      );\n\n      return multicallHandler;\n    };\n\n    const { bridge } = await getDeltaBridge({\n      destTokenDestChain: destToken,\n      destChainId,\n      bridgeFee: deltaPrice.bridgeFee,\n      bridgeOutputToken: deltaPrice.bridge.outputToken,\n      beneficiaryType,\n      getMulticallHandler,\n    }); */\n\n    // @TODO remove the whole buildCrosschainOrderBridge() when API provides BridgePrice.bridge = whole Bridge object\n    const bridge = {\n      protocolSelector: '0x00000000',\n      scalingFactor: 0,\n      protocolData: '0x',\n      destinationChainId: deltaPrice.bridge.destinationChainId,\n      outputToken: deltaPrice.bridge.outputToken,\n    };\n\n    return {\n      bridge,\n    };\n  };\n\n  return {\n    buildCrosschainOrderBridge,\n  };\n};\n", "import { API_URL } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { DeltaAuctionOrder, DeltaAuction } from './helpers/types';\n\nexport type DeltaOrderToPost = {\n  /** @description Partner string */\n  partner?: string;\n  /** @description Referrer address */\n  referrerAddress?: string;\n  order: DeltaAuctionOrder;\n  /** @description Signature of the order from order.owner address. EOA signatures must be submitted in ERC-2098 Compact Representation. */\n  signature: string;\n  chainId: number;\n  /** @description designates the Order as being able to partially filled, as opposed to fill-or-kill */\n  partiallyFillable?: boolean;\n\n  /** @description Type of the order. MARKET or LIMIT. Default is MARKET */\n  type?: 'MARKET' | 'LIMIT';\n\n  includeAgents?: string[];\n  excludeAgents?: string[];\n};\n\nexport type PostDeltaOrderParams = Omit<DeltaOrderToPost, 'chainId'>;\n\nexport type DeltaOrderApiResponse = Omit<DeltaAuction, 'transactions'> & {\n  orderVersion: string; // \"2.0.0\"\n  deltaGasOverhead: number; // @TODO may be removed\n  type: 'MARKET' | 'LIMIT';\n};\n\ntype PostDeltaOrder = (\n  postData: PostDeltaOrderParams,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderApiResponse>;\n\nexport type PostDeltaOrderFunctions = {\n  postDeltaOrder: PostDeltaOrder;\n};\n\nexport const constructPostDeltaOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostDeltaOrderFunctions => {\n  const postOrderUrl = `${apiURL}/delta/orders` as const;\n\n  const postDeltaOrder: PostDeltaOrder = (postData, requestParams) => {\n    const deltaOrderToPost: DeltaOrderToPost = { ...postData, chainId };\n\n    return fetcher<DeltaOrderApiResponse>({\n      url: postOrderUrl,\n      method: 'POST',\n      data: deltaOrderToPost,\n      requestParams,\n    });\n  };\n\n  return { postDeltaOrder };\n};\n", "import type { SignableDeltaOrderData } from './buildDeltaOrderData';\n\nexport function sanitizeDeltaOrderData({\n  owner,\n  beneficiary,\n  srcToken,\n  destToken,\n  srcAmount,\n  destAmount,\n  expectedAmount,\n  deadline,\n  nonce,\n  permit,\n  partnerAndFee,\n  bridge,\n  kind,\n  metadata,\n}: SignableDeltaOrderData['data'] &\n  Record<string, any>): SignableDeltaOrderData['data'] {\n  return {\n    owner,\n    beneficiary,\n    srcToken,\n    destToken,\n    srcAmount,\n    destAmount,\n    expectedAmount,\n    deadline,\n    nonce,\n    permit,\n    partnerAndFee,\n    bridge,\n    kind,\n    metadata,\n  };\n}\n", "import type { ConstructProviderFetchInput } from '../../types';\nimport { SignableDeltaOrderData } from './helpers/buildDeltaOrderData';\nimport { sanitizeDeltaOrderData } from './helpers/misc';\n\nexport type SignLimitOrderFunctions = {\n  signLimitOrder: (\n    signableOrderData: SignableDeltaOrderData\n  ) => Promise<string>;\n};\n\ntype SignDeltaOrder = (\n  signableOrderData: SignableDeltaOrderData\n) => Promise<string>;\n\nexport type SignDeltaOrderFunctions = {\n  signDeltaOrder: SignDeltaOrder;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignDeltaOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignDeltaOrderFunctions => {\n  const signDeltaOrder: SignDeltaOrder = async (typedData) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableDeltaOrderData = {\n      ...typedData,\n      data: sanitizeDeltaOrderData(typedData.data),\n    };\n    const signature = await options.contractCaller.signTypedDataCall(\n      typedDataOnly\n    );\n\n    return signature;\n  };\n\n  return { signDeltaOrder };\n};\n", "import { Bridge } from '../..';\nimport { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  EnumerateLiteral,\n  RequestParameters,\n} from '../../types';\nimport { ZERO_ADDRESS } from '../common/orders/buildOrderData';\nimport { BridgePriceInfo } from './helpers/types';\n\ntype SwapSideUnion = EnumerateLiteral<typeof SwapSide>;\n\nexport type DeltaPriceParams = {\n  /** @description Source Token Address. Not Native Token */\n  srcToken: string;\n  /** @description Destination Token Address */\n  destToken: string;\n  /** @description srcToken amount in wei */\n  amount: string;\n  /** @description Source Token Decimals */\n  srcDecimals: number;\n  /** @description Destination Token Decimals */\n  destDecimals: number;\n  /** @description User's Wallet Address */\n  userAddress?: string;\n  /** @description Beneficiary Address */\n  beneficiary?: string; // beneficiary==owner if no transferTo\n  /** @description Partner string. */\n  partner?: string;\n  /** @description Destination Chain ID for Crosschain Orders */\n  destChainId?: number;\n  /** @description SELL or BUY, default is SELL */\n  side?: SwapSideUnion;\n\n  includeAgents?: string[];\n  excludeAgents?: string[];\n};\n\ntype DeltaPriceQueryOptions = Omit<\n  DeltaPriceParams,\n  'includeAgents' | 'excludeAgents'\n> & {\n  chainId: number; // will return error from API on unsupported chains\n  includeAgents?: string;\n  excludeAgents?: string;\n};\n\n// for same-chain Orders, all 0 params\nexport const DEFAULT_BRIDGE = {\n  protocolSelector: '0x00000000', // 4 bytes\n  destinationChainId: 0,\n  outputToken: ZERO_ADDRESS,\n  scalingFactor: 0,\n  protocolData: '0x',\n} as const satisfies Bridge;\n\nexport type DeltaPrice = {\n  srcToken: string;\n  destToken: string;\n  srcAmount: string;\n  /** @description Available for BUY side */\n  srcAmountBeforeFee?: string;\n  destAmount: string;\n  /** @description Available for SELL side */\n  destAmountBeforeFee?: string;\n  gasCost: string;\n  gasCostBeforeFee: string;\n  gasCostUSD: string;\n  gasCostUSDBeforeFee: string;\n  srcUSD: string;\n  /** @description Available for BUY side */\n  srcUSDBeforeFee?: string;\n  destUSD: string;\n  /** @description Available for SELL side */\n  destUSDBeforeFee?: string;\n  partner: string;\n  partnerFee: number; // in %\n  hmac: string;\n  bridge: Bridge; // for single-chain DeltaPrice, it's DEFAULT_BRIDGE\n};\n\nexport type BridgePrice = Omit<DeltaPrice, 'bridge'> & {\n  // destAmountAfterBridge: string; // became bridgeInfo.destAmountAfterBridge\n  // destUSDAfterBridge: string; // became bridgeInfo.destUSDAfterBridge\n  // bridgeFee: string; // became bridgeInfo.fees[0].amount\n  // bridgeFeeUSD: string; // became bridgeInfo.fees[0].amountInUSD\n  // poolAddress: string;\n  bridge: Bridge;\n  bridgeInfo: BridgePriceInfo;\n};\n\ntype DeltaPriceResponse = {\n  price: DeltaPrice | BridgePrice;\n  deltaAddress: string;\n};\n\ninterface GetDeltaPrice {\n  (\n    options: DeltaPriceParams & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<BridgePrice>;\n  (\n    options: DeltaPriceParams & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice>;\n  (options: DeltaPriceParams, requestParams?: RequestParameters): Promise<\n    DeltaPrice | BridgePrice\n  >;\n}\n\nexport type GetDeltaPriceFunctions = {\n  getDeltaPrice: GetDeltaPrice;\n};\n\nexport const constructGetDeltaPrice = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetDeltaPriceFunctions => {\n  const pricesUrl = `${apiURL}/delta/prices` as const;\n\n  async function getDeltaPrice(\n    options: DeltaPriceParams & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<BridgePrice>;\n  async function getDeltaPrice(\n    options: DeltaPriceParams & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice>;\n  async function getDeltaPrice(\n    options: DeltaPriceParams,\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice | BridgePrice>;\n  async function getDeltaPrice(\n    options: DeltaPriceParams,\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice | BridgePrice> {\n    const { includeAgents, excludeAgents, ...rest } = options;\n    const includeAgentsString = includeAgents\n      ? includeAgents.join(',')\n      : undefined;\n    const excludeAgentsString = excludeAgents\n      ? excludeAgents.join(',')\n      : undefined;\n\n    const search = constructSearchString<DeltaPriceQueryOptions>({\n      ...rest,\n      chainId,\n      side: options.side ?? SwapSide.SELL,\n      includeAgents: includeAgentsString,\n      excludeAgents: excludeAgentsString,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<DeltaPriceResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.price;\n  }\n\n  return {\n    getDeltaPrice,\n  };\n};\n", "import { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport type { DeltaAuction } from './helpers/types';\n\nexport type DeltaOrderFromAPI = Omit<DeltaAuction, 'signature'>;\n\ntype GetDeltaOrderById = (\n  orderId: string,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderFromAPI>;\n\ntype GetDeltaOrderByHash = (\n  orderHash: string,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderFromAPI>;\n\ntype OrdersFilter = {\n  /** @description Order.owner to fetch Delta Order for */\n  userAddress: Address;\n  /** @description Pagination option, page. Default 1 */\n  page?: number;\n  /** @description Pagination option, limit. Default 100 */\n  limit?: number;\n  /** @description Filter by chainId, without this filter, orders from all chains are returned */\n  chainId?: number; // @TODO currently not working\n  /** @description Filter by type. MARKET, LIMIT, or ALL. Default is ALL */\n  type?: 'MARKET' | 'LIMIT' | 'ALL';\n};\ntype OrderFiltersQuery = OrdersFilter;\n\ntype GetDeltaOrders = (\n  options: OrdersFilter,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderFromAPI[]>;\n\ntype GetRequiredBalanceParams = {\n  userAddress: Address;\n  tokenAddress?: Address;\n};\n\ntype GetRequiredBalance = (\n  userParams: GetRequiredBalanceParams,\n  requestParams?: RequestParameters\n) => Promise<Record<string, string>>; // token -> balance in Limit Orders\n\nexport type GetDeltaOrdersFunctions = {\n  getDeltaOrderById: GetDeltaOrderById;\n  getDeltaOrderByHash: GetDeltaOrderByHash;\n  getDeltaOrders: GetDeltaOrders;\n  getRequiredBalanceForDeltaLimitOrders: GetRequiredBalance;\n};\n\nexport const constructGetDeltaOrders = ({\n  apiURL = API_URL,\n  fetcher,\n  chainId,\n}: ConstructFetchInput): GetDeltaOrdersFunctions => {\n  const baseUrl = `${apiURL}/delta/orders` as const;\n\n  const getDeltaOrderById: GetDeltaOrderById = async (\n    orderId,\n    requestParams\n  ) => {\n    const fetchURL = `${baseUrl}/${orderId}` as const;\n\n    const order = await fetcher<DeltaOrderFromAPI>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  const getDeltaOrderByHash: GetDeltaOrderByHash = async (\n    orderHash,\n    requestParams\n  ) => {\n    const fetchURL = `${baseUrl}/hash/${orderHash}` as const;\n\n    const order = await fetcher<DeltaOrderFromAPI>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  const getDeltaOrders: GetDeltaOrders = async (options, requestParams) => {\n    const search = constructSearchString<OrderFiltersQuery>({\n      userAddress: options.userAddress,\n      page: options.page,\n      limit: options.limit,\n      chainId: options.chainId,\n      type: options.type,\n    });\n\n    const fetchURL = `${baseUrl}${search}` as const;\n\n    const orders = await fetcher<DeltaOrderFromAPI[]>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return orders;\n  };\n\n  const getRequiredBalanceForDeltaLimitOrders: GetRequiredBalance = async (\n    userParams,\n    requestParams\n  ) => {\n    const userURL =\n      `${baseUrl}/fillablebalance/${chainId}/${userParams.userAddress}` as const;\n    const fetchURL = userParams.tokenAddress\n      ? (`${userURL}/${userParams.tokenAddress}` as const)\n      : userURL;\n\n    const response = await fetcher<Record<string, string>>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return response;\n  };\n\n  return {\n    getDeltaOrderById,\n    getDeltaOrderByHash,\n    getDeltaOrders,\n    getRequiredBalanceForDeltaLimitOrders,\n  };\n};\n", "import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\nimport { constructGetDeltaContract } from './getDeltaContract';\n\nexport type ApproveTokenForDeltaFunctions<T> = {\n  /** @description approving ParaswapDelta contract as spender for Token */\n  approveTokenForDelta: ApproveToken<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForDelta = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForDeltaFunctions<T> => {\n  // getDeltaContract is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getDeltaContract } = constructGetDeltaContract(options);\n\n  const getParaswapDeltaAddress = async (requestParams?: RequestParameters) => {\n    const deltaContract = await getDeltaContract(requestParams);\n    if (!deltaContract) {\n      throw new Error(`Delta is not available on chain ${options.chainId}`);\n    }\n    return deltaContract;\n  };\n\n  const approveTokenForDelta: ApproveToken<T> = approveTokenMethodFactory<T>(\n    options.contractCaller,\n    getParaswapDeltaAddress\n  );\n\n  return {\n    approveTokenForDelta,\n  };\n};\n", "import { API_URL } from '../../constants';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\n\n// srcChainId -> destChainId -> outputToken[]\n// output Tokens that are supported for a srcChainId -> destChainId pair\nexport type BridgeInfo = Record<number, Record<number, Address[]>>;\ntype BridgeInfoResponse = { supportedTokens: BridgeInfo };\n\ntype GetBridgeInfo = (requestParams?: RequestParameters) => Promise<BridgeInfo>;\n\nexport type GetBridgeInfoFunctions = {\n  getBridgeInfo: GetBridgeInfo;\n};\n\nexport const constructGetBridgeInfo = ({\n  apiURL = API_URL,\n  fetcher,\n}: ConstructFetchInput): GetBridgeInfoFunctions => {\n  const bridgeInfoUrl = `${apiURL}/delta/prices/bridge-info` as const;\n\n  const getBridgeInfo: GetBridgeInfo = async (requestParams) => {\n    const data = await fetcher<BridgeInfoResponse>({\n      url: bridgeInfoUrl,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.supportedTokens;\n  };\n\n  return {\n    getBridgeInfo,\n  };\n};\n", "import { API_URL } from '../../constants';\nimport { runOnceAndCache } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\n\n// chainId -> multicallHandler\nexport type MulticallHandlersResponse = Record<number, Address>;\n\ntype GetMulticallHandlers = (\n  requestParams?: RequestParameters\n) => Promise<MulticallHandlersResponse>;\n\nexport type GetMulticallHandlersFunctions = {\n  getMulticallHandlers: GetMulticallHandlers;\n};\n\nexport const constructGetMulticallHandlers = ({\n  apiURL = API_URL,\n  fetcher,\n}: ConstructFetchInput): GetMulticallHandlersFunctions => {\n  const multicallHandlersUrl =\n    `${apiURL}/delta/prices/multicall-handlers` as const;\n\n  const _getMulticallHandlers: GetMulticallHandlers = async (requestParams) => {\n    const data = await fetcher<MulticallHandlersResponse>({\n      url: multicallHandlersUrl,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  // cached for the same instance of `{getMulticallHandlers} = constructGetMulticallHandlers()`\n  // so should persist across same apiUrl & network (and response is even network agnostic)\n  const getMulticallHandlers = runOnceAndCache(_getMulticallHandlers);\n\n  return {\n    getMulticallHandlers,\n  };\n};\n", "import { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\n\ntype TokenSupportedInDeltaResponse = { supported: boolean };\ntype IsTokenSupportedInDeltaQueryOptions = {\n  token: Address;\n  chainId: number;\n};\n\ntype IsTokenSupportedInDelta = (\n  token: Address,\n  requestParams?: RequestParameters\n) => Promise<boolean>;\n\nexport type IsTokenSupportedInDeltaFunctions = {\n  isTokenSupportedInDelta: IsTokenSupportedInDelta;\n};\n\nexport const constructIsTokenSupportedInDelta = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): IsTokenSupportedInDeltaFunctions => {\n  const bridgeInfoUrl = `${apiURL}/delta/prices/is-token-supported` as const;\n\n  const isTokenSupportedInDelta: IsTokenSupportedInDelta = async (\n    token,\n    requestParams\n  ) => {\n    const search = constructSearchString<IsTokenSupportedInDeltaQueryOptions>({\n      token,\n      chainId,\n    });\n\n    const fetchURL = `${bridgeInfoUrl}/${search}` as const;\n\n    const data = await fetcher<TokenSupportedInDeltaResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.supported;\n  };\n\n  return {\n    isTokenSupportedInDelta,\n  };\n};\n", "import { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { BridgePrice, DeltaPrice } from '../delta/getDeltaPrice';\nimport type {\n  ConstructFetchInput,\n  EnumerateLiteral,\n  RequestParameters,\n  OptimalRate,\n} from '../../types';\n\ntype TradeMode = 'delta' | 'market' | 'all';\n// enable passing enum value by string\ntype SwapSideUnion = EnumerateLiteral<typeof SwapSide>;\n\nexport type QuoteParams<M extends TradeMode = TradeMode> = {\n  /** @description Source Token Address */\n  srcToken: string;\n  /** @description Destination Token Address */\n  destToken: string;\n  /** @description srcToken amount (in case of SELL) or destToken amount (in case of BUY), in wei */\n  amount: string;\n  /** @description Source Token Decimals.  */\n  srcDecimals: number;\n  /** @description Destination Token Decimals */\n  destDecimals: number;\n  /** @description SELL or BUY, default is SELL */\n  side?: SwapSideUnion;\n  /** @description User's Wallet Address */\n  userAddress?: string;\n  /** @description Partner string */\n  partner?: string;\n  /** @description Preferred mode for the trade. In case of \"all\", Delta pricing is returned, with Market as a fallback */\n  mode: M;\n};\n\ntype QuoteQueryOptions = QuoteParams & {\n  chainId: number; // will return error from API on unsupported chains\n};\n\ntype FallbackReason = {\n  errorType: string;\n  details: string;\n};\n\nexport type QuoteWithMarketPrice = {\n  market: OptimalRate;\n};\n\nexport type QuoteWithDeltaPrice = {\n  delta: DeltaPrice;\n  deltaAddress: string;\n};\n\nexport type QuoteWithBridgePrice = {\n  delta: BridgePrice;\n  deltaAddress: string;\n};\n\nexport type QuoteWithDeltaPriceAndBridgePrice = {\n  delta: DeltaPrice | BridgePrice;\n  deltaAddress: string;\n};\n\nexport type QuoteWithMarketPriceAsFallback = QuoteWithMarketPrice & {\n  fallbackReason: FallbackReason;\n};\n\nexport type QuoteResponse =\n  | QuoteWithDeltaPrice\n  | QuoteWithMarketPrice\n  | QuoteWithBridgePrice\n  | QuoteWithMarketPriceAsFallback\n  | QuoteWithDeltaPriceAndBridgePrice;\n\ninterface GetQuoteFunc {\n  (\n    options: QuoteParams<'delta'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPrice>;\n  (\n    options: QuoteParams<'delta'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  (\n    options: QuoteParams<'delta'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPriceAndBridgePrice>;\n  (\n    options: QuoteParams<'market'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithMarketPrice>;\n  (\n    options: QuoteParams<'all'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<\n    QuoteWithDeltaPrice | QuoteWithMarketPriceAsFallback // \"all\" mode tries for deltaPrice and falls back to market priceRoute\n  >;\n  (\n    options: QuoteParams<'all'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  (options: QuoteParams<'all'>, requestParams?: RequestParameters): Promise<\n    QuoteWithDeltaPriceAndBridgePrice | QuoteWithMarketPriceAsFallback // \"all\" mode tries for deltaPrice and falls back to market priceRoute\n  >;\n  (\n    options: QuoteParams,\n    requestParams?: RequestParameters\n  ): Promise<QuoteResponse>;\n}\n\nexport type GetQuoteFunctions = {\n  getQuote: GetQuoteFunc;\n};\n\nexport const constructGetQuote = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetQuoteFunctions => {\n  const pricesUrl = `${apiURL}/quote` as const;\n\n  function getQuote(\n    options: QuoteParams<'delta'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPrice>;\n  function getQuote(\n    options: QuoteParams<'delta'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  function getQuote(\n    options: QuoteParams<'delta'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPriceAndBridgePrice>;\n  function getQuote(\n    options: QuoteParams<'market'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithMarketPrice>;\n  function getQuote(\n    options: QuoteParams<'all'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<\n    QuoteWithDeltaPrice | QuoteWithMarketPriceAsFallback // \"all\" mode tries for deltaPrice and falls back to market priceRoute\n  >;\n  function getQuote(\n    options: QuoteParams<'all'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  function getQuote(\n    options: QuoteParams<'all'>,\n    requestParams?: RequestParameters\n  ): Promise<\n    QuoteWithDeltaPriceAndBridgePrice | QuoteWithMarketPriceAsFallback\n  >;\n  function getQuote(\n    options: QuoteParams,\n    requestParams?: RequestParameters\n  ): Promise<QuoteResponse>;\n  async function getQuote(\n    options: QuoteParams,\n    requestParams?: RequestParameters\n  ): Promise<QuoteResponse> {\n    const search = constructSearchString<QuoteQueryOptions>({\n      ...options,\n      chainId,\n      side: options.side ?? SwapSide.SELL,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<QuoteResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  }\n\n  return {\n    getQuote,\n  };\n};\n", "import { Domain } from '../../common/orders/buildOrderData';\n\nconst ORDER_CANCELLATIONS_EIP_712_TYPES = {\n  OrderCancellations: [{ name: 'orderIds', type: 'string[]' }],\n};\n\nexport type CancelDeltaOrderData = {\n  orderIds: string[];\n};\n\nexport type SignableCancelDeltaOrderData = {\n  types: {\n    OrderCancellations: (typeof ORDER_CANCELLATIONS_EIP_712_TYPES)['OrderCancellations'];\n  };\n  domain: Domain;\n  data: CancelDeltaOrderData;\n};\n\ntype BuildCancelDeltaOrderInput = {\n  orderInput: CancelDeltaOrderData;\n  paraswapDeltaAddress: string;\n  chainId: number;\n};\n\nexport function buildCancelDeltaOrderSignableData({\n  orderInput,\n  chainId,\n  paraswapDeltaAddress,\n}: BuildCancelDeltaOrderInput): SignableCancelDeltaOrderData {\n  const typedData = {\n    types: {\n      OrderCancellations: ORDER_CANCELLATIONS_EIP_712_TYPES.OrderCancellations,\n    },\n    domain: {\n      name: 'Portikus',\n      version: '2.0.0',\n      chainId,\n      verifyingContract: paraswapDeltaAddress,\n    },\n    data: {\n      // explicityly pick only the necessary fields,\n      // otherwise signing will break if more is present\n      orderIds: orderInput.orderIds,\n    },\n  };\n\n  return typedData;\n}\n", "import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport { constructGetDeltaContract } from './getDeltaContract';\nimport {\n  buildCancelDeltaOrderSignableData,\n  CancelDeltaOrderData,\n} from './helpers/buildCancelDeltaOrderData';\n\ntype SuccessResponse = { success: true };\n\ntype CancelDeltaOrderRequestParams = {\n  orderIds: string[];\n  signature: string;\n};\n\nexport type SignCancelDeltaOrderRequest = (\n  params: CancelDeltaOrderData,\n  requestParams?: RequestParameters\n) => Promise<string>;\n\nexport type PostCancelDeltaOrderRequest = (\n  params: CancelDeltaOrderRequestParams,\n  requestParams?: RequestParameters\n) => Promise<SuccessResponse>;\n\nexport type CancelDeltaOrder = (\n  params: CancelDeltaOrderData,\n  requestParams?: RequestParameters\n) => Promise<SuccessResponse>;\n\nexport type CancelDeltaOrderFunctions = {\n  signCancelLimitDeltaOrderRequest: SignCancelDeltaOrderRequest;\n  postCancelLimitDeltaOrderRequest: PostCancelDeltaOrderRequest;\n  /** @description Cancel a Limit Delta order */\n  cancelLimitDeltaOrders: CancelDeltaOrder;\n};\n\nexport const constructCancelDeltaOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller' | 'fetcher' | 'apiURL' | 'chainId'\n  >\n): CancelDeltaOrderFunctions => {\n  // cached internally\n  const { getDeltaContract } = constructGetDeltaContract(options);\n\n  const signCancelLimitDeltaOrderRequest: SignCancelDeltaOrderRequest = async (\n    params,\n    requestParams\n  ) => {\n    const ParaswapDelta = await getDeltaContract(requestParams);\n    if (!ParaswapDelta) {\n      throw new Error(`Delta is not available on chain ${options.chainId}`);\n    }\n\n    const typedData = buildCancelDeltaOrderSignableData({\n      orderInput: params,\n      paraswapDeltaAddress: ParaswapDelta,\n      chainId: options.chainId,\n    });\n    const signature = await options.contractCaller.signTypedDataCall(typedData);\n\n    return signature;\n  };\n\n  const postCancelLimitDeltaOrderRequest: PostCancelDeltaOrderRequest = async (\n    params,\n    requestParams\n  ) => {\n    const cancelUrl = `${options.apiURL}/delta/orders/cancel` as const;\n\n    const res = await options.fetcher<SuccessResponse>({\n      url: cancelUrl,\n      method: 'POST',\n      data: params,\n      requestParams,\n    });\n\n    return res;\n  };\n\n  const cancelLimitDeltaOrders: CancelDeltaOrder = async (\n    { orderIds },\n    requestParams\n  ) => {\n    const signature = await signCancelLimitDeltaOrderRequest(\n      { orderIds },\n      requestParams\n    );\n\n    const res = await postCancelLimitDeltaOrderRequest(\n      {\n        orderIds,\n        signature,\n      },\n      requestParams\n    );\n\n    return res;\n  };\n\n  return {\n    signCancelLimitDeltaOrderRequest,\n    postCancelLimitDeltaOrderRequest,\n    cancelLimitDeltaOrders,\n  };\n};\n", "import type {\n  AnyFunction,\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ConstructProviderFetchInput,\n} from '../types';\nimport type { Merge, UnionToIntersection } from 'ts-essentials';\nimport type { ApproveTokenFunctions } from '../methods/swap/approve';\nimport type { CancelLimitOrderFunctions } from '../methods/limitOrders/cancelOrder';\nimport type { ApproveTokenForLimitOrderFunctions } from '../methods/limitOrders/approveForOrder';\nimport type { CancelNFTOrderFunctions } from '../methods/nftOrders/cancelOrder';\nimport type { ApproveTokenForNFTOrderFunctions } from '../methods/nftOrders/approveForOrder';\nimport type { FillOrderDirectlyFunctions } from '../methods/limitOrders/fillOrderDirectly';\nimport type { ApproveTokenForDeltaFunctions } from '../methods/delta/approveForDelta';\nimport { API_URL, DEFAULT_VERSION } from '../constants';\n\nexport type SDKConfig<TxResponse = any> = ConstructProviderFetchInput<\n  TxResponse,\n  'staticCall' | 'transactCall' | 'signTypedDataCall'\n> &\n  ConstructFetchInput;\n\ntype SDKFunction<T extends ConstructBaseInput> = (\n  config: T\n) => Record<string, AnyFunction | Record<string, AnyFunction>>;\n\ntype IntersectionOfReturns<Funcs extends AnyFunction[]> = UnionToIntersection<\n  ReturnType<Funcs[number]>\n>;\n\ntype PartialSDKResult<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = InferWithTxResponse<Config, Funcs>;\n\ntype InferWithTxResponse<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = Config extends SDKConfig<infer TxResponse> // if can infer TxResponse inside Config\n  ? // and if returns can be successfully intersected\n    IntersectionOfReturns<Funcs> extends Record<string, any>\n    ? MergeExtendableRecursively<\n        IntersectionOfReturns<Funcs>,\n        [\n          // if there are ApproveTokenFunctions or CancelLimitOrderFunctions in the intersection\n          // which means constructApproveToken or constructCancelLimitOrder was passed in Funcs\n          ApproveTokenFunctions<TxResponse>,\n          CancelLimitOrderFunctions<TxResponse>,\n          FillOrderDirectlyFunctions<TxResponse>,\n          ApproveTokenForLimitOrderFunctions<TxResponse>,\n          CancelNFTOrderFunctions<TxResponse>,\n          ApproveTokenForNFTOrderFunctions<TxResponse>,\n          ApproveTokenForDeltaFunctions<TxResponse>\n        ]\n        // then merge IntersectionOfReturns<Funcs> with them recursively\n      >\n    : IntersectionOfReturns<Funcs>\n  : IntersectionOfReturns<Funcs>;\n\n// merges Accum with Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableOnce<\n  Accum extends Record<string, any>,\n  Replacement extends Record<string, any>\n> = Accum extends Record<keyof Replacement, any>\n  ? Merge<Accum, Replacement>\n  : Accum;\n\n// recursively merges Accum with each Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableRecursively<\n  Accum extends Record<string, any>,\n  Replacements extends Record<string, any>[]\n> = Replacements extends [\n  head: infer Head extends Record<string, any>,\n  ...tail: infer Tail\n]\n  ? Tail extends Record<string, any>[]\n    ? MergeExtendableRecursively<MergeExtendableOnce<Accum, Head>, Tail>\n    : MergeExtendableOnce<Accum, Head>\n  : Accum;\n\n/** @description construct composable SDK with methods you choose yourself */\nexport const constructPartialSDK = <\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n>(\n  config: Config, // config is auto-inferred to cover the used functions\n  ...funcs: Funcs\n): PartialSDKResult<Config, Funcs> & Required<ConstructBaseInput> => {\n  const sdkFuncs = funcs.reduce<Partial<IntersectionOfReturns<Funcs>>>(\n    (accum, func) => {\n      const sdkSlice = func(config);\n      return Object.assign(accum, sdkSlice);\n    },\n    {}\n  );\n\n  const sdk = {\n    ...sdkFuncs,\n    apiURL: config.apiURL ?? API_URL,\n    version: config.version ?? DEFAULT_VERSION,\n    chainId: config.chainId,\n  } as PartialSDKResult<Config, Funcs> & Required<ConstructBaseInput>;\n\n  return sdk;\n};\n", "import { constructPartialSDK, SDKConfig } from '../../sdk/partial';\nimport { constructGetAdapters, GetAdaptersFunctions } from './adapters';\nimport { ApproveTokenFunctions, constructApproveToken } from './approve';\nimport { constructGetBalances, GetBalancesFunctions } from './balance';\nimport { constructGetRate, GetRateFunctions } from './rates';\nimport { constructGetSpender, GetSpenderFunctions } from './spender';\nimport { constructSwapTx, GetSwapTxFunctions } from './swapTx';\nimport { constructGetTokens, GetTokensFunctions } from './token';\nimport { BuildTxFunctions, constructBuildTx } from './transaction';\n\nexport type SwapSDKMethods<TxResponse> = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  ApproveTokenFunctions<TxResponse> &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions &\n  GetSwapTxFunctions;\n\n/** @description construct SDK with every Swap-related method, fetching from API and token approval */\nexport const constructSwapSDK = <TxResponse>(\n  config: SDKConfig<TxResponse>\n): SwapSDKMethods<TxResponse> => {\n  const constructApproveTokenWithTxResponse = constructApproveToken<TxResponse>;\n\n  // include all available Swap methods\n  return constructPartialSDK(\n    config,\n    constructGetBalances,\n    constructGetTokens,\n    constructGetSpender,\n    constructApproveTokenWithTxResponse,\n    constructBuildTx,\n    constructGetAdapters,\n    constructGetRate,\n    constructSwapTx\n  );\n};\n", "import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport type { LimitOrderToSend, LimitOrderFromApi } from './helpers/types';\nimport {\n  BuildLimitOrderFunctions,\n  BuildLimitOrderInput,\n  constructBuildLimitOrder,\n} from './buildOrder';\nimport {\n  CancelLimitOrderFunctions,\n  constructCancelLimitOrder,\n} from './cancelOrder';\nimport { constructGetLimitOrders, GetLimitOrdersFunctions } from './getOrders';\nimport { constructPostLimitOrder, PostLimitOrderFunctions } from './postOrder';\nimport { constructSignLimitOrder, SignLimitOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForLimitOrder,\n  ApproveTokenForLimitOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetLimitOrdersContractFunctions,\n  constructGetLimitOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildLimitOrdersTxFunctions,\n  constructBuildLimitOrderTx,\n} from './transaction';\nimport type { Address } from '@paraswap/core';\nimport {\n  FillOrderDirectlyFunctions,\n  constructFillOrderDirectly,\n} from './fillOrderDirectly';\n\ntype SubmitLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  extra?: { permitMakerAsset?: string },\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\n\ntype SubmitP2POrder = (\n  buildLimitOrderParams: BuildLimitOrderInput & { taker: Address },\n  extra?: { permitMakerAsset?: string },\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\n\nexport type SubmitLimitOrderFuncs = {\n  submitLimitOrder: SubmitLimitOrder;\n  submitP2POrder: SubmitP2POrder;\n};\n\nexport const constructSubmitLimitOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitLimitOrderFuncs => {\n  const { buildLimitOrder } = constructBuildLimitOrder(options);\n  const { signLimitOrder } = constructSignLimitOrder(options);\n  const { postLimitOrder, postP2POrder } = constructPostLimitOrder(options);\n\n  const prepareLimitOrder = async (\n    buildLimitOrderParams: BuildLimitOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<LimitOrderToSend> => {\n    const orderData = await buildLimitOrder(buildLimitOrderParams);\n    const signature = await signLimitOrder(orderData);\n\n    const orderWithSignature: LimitOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitLimitOrder: SubmitLimitOrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postLimitOrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitP2POrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postP2POrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  return { submitLimitOrder, submitP2POrder };\n};\n\nexport type LimitOrderHandlers<T> = SubmitLimitOrderFuncs &\n  BuildLimitOrderFunctions &\n  SignLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  GetLimitOrdersFunctions &\n  GetLimitOrdersContractFunctions &\n  BuildLimitOrdersTxFunctions &\n  CancelLimitOrderFunctions<T> &\n  ApproveTokenForLimitOrderFunctions<T> &\n  FillOrderDirectlyFunctions<T>;\n\n/** @description construct SDK with every LimitOrders-related method, fetching from API and contract calls */\nexport const constructAllLimitOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): LimitOrderHandlers<TxResponse> => {\n  const limitOrdersGetters = constructGetLimitOrders(options);\n  const limitOrdersContractGetter = constructGetLimitOrdersContract(options);\n\n  const limitOrdersSubmit = constructSubmitLimitOrder(options);\n  const limitOrdersBuild = constructBuildLimitOrder(options);\n  const limitOrdersSign = constructSignLimitOrder(options);\n  const limitOrdersPost = constructPostLimitOrder(options);\n\n  const limitOrdersCancel = constructCancelLimitOrder(options);\n  const limitOrdersApproveToken = constructApproveTokenForLimitOrder(options);\n\n  const limitOrdersFillOrderDirectly = constructFillOrderDirectly(options);\n\n  const limitOrdersBuildTx = constructBuildLimitOrderTx(options);\n\n  return {\n    ...limitOrdersGetters,\n    ...limitOrdersContractGetter,\n    ...limitOrdersSubmit,\n    ...limitOrdersBuild,\n    ...limitOrdersSign,\n    ...limitOrdersPost,\n    ...limitOrdersCancel,\n    ...limitOrdersApproveToken,\n    ...limitOrdersFillOrderDirectly,\n    ...limitOrdersBuildTx,\n  };\n};\n", "import type { ConstructProviderFetchInput } from '../../types';\nimport {\n  BuildDeltaOrderDataParams,\n  BuildDeltaOrderFunctions,\n  constructBuildDeltaOrder,\n} from './buildDeltaOrder';\nimport {\n  constructPostDeltaOrder,\n  DeltaOrderApiResponse,\n  DeltaOrderToPost,\n  PostDeltaOrderFunctions,\n} from './postDeltaOrder';\nimport {\n  constructSignDeltaOrder,\n  SignDeltaOrderFunctions,\n} from './signDeltaOrder';\nimport {\n  GetDeltaContractFunctions,\n  constructGetDeltaContract,\n} from './getDeltaContract';\nimport {\n  constructGetDeltaPrice,\n  GetDeltaPriceFunctions,\n} from './getDeltaPrice';\nimport {\n  constructGetDeltaOrders,\n  GetDeltaOrdersFunctions,\n} from './getDeltaOrders';\nimport {\n  constructGetPartnerFee,\n  GetPartnerFeeFunctions,\n} from './getPartnerFee';\nimport {\n  ApproveTokenForDeltaFunctions,\n  constructApproveTokenForDelta,\n} from './approveForDelta';\nimport {\n  constructGetBridgeInfo,\n  GetBridgeInfoFunctions,\n} from './getBridgeInfo';\nimport {\n  constructGetMulticallHandlers,\n  GetMulticallHandlersFunctions,\n} from './getMulticallHandlers';\nimport {\n  constructIsTokenSupportedInDelta,\n  IsTokenSupportedInDeltaFunctions,\n} from './isTokenSupportedInDelta';\nimport {\n  BuildCrosschainOrderBridgeFunctions,\n  constructBuildCrosschainOrderBridge,\n} from './buildCrosschainOrderBridge';\nimport {\n  CancelDeltaOrderFunctions,\n  constructCancelDeltaOrder,\n} from './cancelDeltaOrder';\n\nexport type SubmitDeltaOrderParams = BuildDeltaOrderDataParams & {\n  /** @description designates the Order as being able to be partially filled, as opposed to fill-or-kill */\n  partiallyFillable?: boolean;\n  /** @description Referrer address */\n  referrerAddress?: string;\n} & Pick<DeltaOrderToPost, 'type' | 'includeAgents' | 'excludeAgents'>;\n\ntype SubmitDeltaOrder = (\n  orderParams: SubmitDeltaOrderParams\n) => Promise<DeltaOrderApiResponse>;\n\nexport type SubmitDeltaOrderFuncs = {\n  submitDeltaOrder: SubmitDeltaOrder;\n};\n\nexport const constructSubmitDeltaOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitDeltaOrderFuncs => {\n  const { buildDeltaOrder } = constructBuildDeltaOrder(options);\n  const { signDeltaOrder } = constructSignDeltaOrder(options);\n  const { postDeltaOrder } = constructPostDeltaOrder(options);\n\n  const submitDeltaOrder: SubmitDeltaOrder = async (orderParams) => {\n    const orderData = await buildDeltaOrder(orderParams);\n    const signature = await signDeltaOrder(orderData);\n\n    const response = await postDeltaOrder({\n      signature,\n      partner: orderParams.partner,\n      order: orderData.data,\n      partiallyFillable: orderParams.partiallyFillable,\n      referrerAddress: orderParams.referrerAddress,\n      type: orderParams.type,\n      includeAgents: orderParams.includeAgents,\n      excludeAgents: orderParams.excludeAgents,\n    });\n\n    return response;\n  };\n\n  return { submitDeltaOrder };\n};\n\nexport type DeltaOrderHandlers<T> = SubmitDeltaOrderFuncs &\n  ApproveTokenForDeltaFunctions<T> &\n  BuildDeltaOrderFunctions &\n  BuildCrosschainOrderBridgeFunctions &\n  GetDeltaOrdersFunctions &\n  GetDeltaPriceFunctions &\n  GetDeltaContractFunctions &\n  GetPartnerFeeFunctions &\n  GetMulticallHandlersFunctions &\n  GetBridgeInfoFunctions &\n  IsTokenSupportedInDeltaFunctions &\n  PostDeltaOrderFunctions &\n  SignDeltaOrderFunctions &\n  CancelDeltaOrderFunctions;\n\n/** @description construct SDK with every Delta Order-related method, fetching from API and Order signing */\nexport const constructAllDeltaOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall'\n  >\n): DeltaOrderHandlers<TxResponse> => {\n  const deltaOrdersGetters = constructGetDeltaOrders(options);\n  const deltaOrdersContractGetter = constructGetDeltaContract(options);\n  const deltaPrice = constructGetDeltaPrice(options);\n\n  const partnerFee = constructGetPartnerFee(options);\n  const bridgeInfo = constructGetBridgeInfo(options);\n  const isTokenSupportedInDelta = constructIsTokenSupportedInDelta(options);\n  const multicallHandlers = constructGetMulticallHandlers(options);\n\n  const approveTokenForDelta = constructApproveTokenForDelta(options);\n\n  const deltaOrdersSubmit = constructSubmitDeltaOrder(options);\n\n  const buildCrosschainOrderBridge =\n    constructBuildCrosschainOrderBridge(options);\n\n  const deltaOrdersBuild = constructBuildDeltaOrder(options);\n  const deltaOrdersSign = constructSignDeltaOrder(options);\n  const deltaOrdersPost = constructPostDeltaOrder(options);\n\n  const deltaOrdersCancel = constructCancelDeltaOrder(options);\n\n  return {\n    ...deltaOrdersGetters,\n    ...deltaOrdersContractGetter,\n    ...deltaPrice,\n    ...partnerFee,\n    ...bridgeInfo,\n    ...isTokenSupportedInDelta,\n    ...multicallHandlers,\n    ...approveTokenForDelta,\n    ...deltaOrdersSubmit,\n    ...deltaOrdersBuild,\n    ...deltaOrdersSign,\n    ...deltaOrdersPost,\n    ...deltaOrdersCancel,\n    ...buildCrosschainOrderBridge,\n  };\n};\n", "import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport type { NFTOrderToSend, NFTOrderFromAPI } from './helpers/types';\nimport {\n  BuildNFTOrderFunctions,\n  BuildNFTOrderInput,\n  constructBuildNFTOrder,\n} from './buildOrder';\nimport {\n  CancelNFTOrderFunctions,\n  constructCancelNFTOrder,\n} from './cancelOrder';\nimport { constructGetNFTOrders, GetNFTOrdersFunctions } from './getOrders';\nimport { constructPostNFTOrder, PostNFTOrderFunctions } from './postOrder';\nimport { constructSignNFTOrder, SignNFTOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForNFTOrder,\n  ApproveTokenForNFTOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetNFTOrdersContractFunctions,\n  constructGetNFTOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildNFTOrdersTxFunctions,\n  constructBuildNFTOrderTx,\n} from './transaction';\n\ntype SubmitNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  extra?: { permitMakerAsset?: string },\n  requestParams?: RequestParameters\n) => Promise<NFTOrderFromAPI>;\n\nexport type SubmitNFTOrderFuncs = {\n  submitNFTOrder: SubmitNFTOrder;\n  submitP2POrder: SubmitNFTOrder;\n};\n\nexport const constructSubmitNFTOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitNFTOrderFuncs => {\n  const { buildNFTOrder } = constructBuildNFTOrder(options);\n  const { signNFTOrder } = constructSignNFTOrder(options);\n  const { postNFTLimitOrder, postNFTP2POrder } = constructPostNFTOrder(options);\n\n  const prepareNFTOrder = async (\n    buildNFTOrderParams: BuildNFTOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<NFTOrderToSend> => {\n    const orderData = await buildNFTOrder(buildNFTOrderParams);\n    const signature = await signNFTOrder(orderData);\n\n    const orderWithSignature: NFTOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitNFTOrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTLimitOrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTP2POrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  return { submitNFTOrder, submitP2POrder };\n};\n\nexport type NFTOrderHandlers<T> = SubmitNFTOrderFuncs &\n  BuildNFTOrderFunctions &\n  SignNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  GetNFTOrdersFunctions &\n  GetNFTOrdersContractFunctions &\n  BuildNFTOrdersTxFunctions &\n  CancelNFTOrderFunctions<T> &\n  ApproveTokenForNFTOrderFunctions<T>;\n\n/** @description construct SDK with every NFTOrders-related method, fetching from API and contract calls */\nexport const constructAllNFTOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): NFTOrderHandlers<TxResponse> => {\n  const NFTOrdersGetters = constructGetNFTOrders(options);\n  const NFTOrdersContractGetter = constructGetNFTOrdersContract(options);\n\n  const NFTOrdersSubmit = constructSubmitNFTOrder(options);\n  const NFTOrdersBuild = constructBuildNFTOrder(options);\n  const NFTOrdersSign = constructSignNFTOrder(options);\n  const NFTOrdersPost = constructPostNFTOrder(options);\n\n  const NFTOrdersCancel = constructCancelNFTOrder(options);\n  const NFTOrdersApproveToken = constructApproveTokenForNFTOrder(options);\n\n  const NFTOrdersBuildTx = constructBuildNFTOrderTx(options);\n\n  return {\n    ...NFTOrdersGetters,\n    ...NFTOrdersContractGetter,\n    ...NFTOrdersSubmit,\n    ...NFTOrdersBuild,\n    ...NFTOrdersSign,\n    ...NFTOrdersPost,\n    ...NFTOrdersCancel,\n    ...NFTOrdersApproveToken,\n    ...NFTOrdersBuildTx,\n  };\n};\n", "import type { SDKConfig } from './partial';\nimport { constructSwapSDK, SwapSDKMethods } from '../methods/swap';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\nimport {\n  constructAllDeltaOrdersHandlers,\n  DeltaOrderHandlers,\n} from '../methods/delta';\nimport {\n  constructGetQuote,\n  GetQuoteFunctions,\n} from '../methods/quote/getQuote';\nimport { ConstructBaseInput } from '../types';\nimport { API_URL, DEFAULT_VERSION } from '../constants';\n\nexport type AllSDKMethods<TxResponse> = {\n  swap: SwapSDKMethods<TxResponse>;\n  limitOrders: LimitOrderHandlers<TxResponse>;\n  nftOrders: NFTOrderHandlers<TxResponse>;\n  delta: DeltaOrderHandlers<TxResponse>;\n  quote: GetQuoteFunctions;\n} & Required<ConstructBaseInput>;\n\n/** @description construct SDK with every method, for swap and limitOrders */\nexport const constructFullSDK = <TxResponse = any>(\n  config: SDKConfig<TxResponse>\n): AllSDKMethods<TxResponse> => {\n  // include all available functions\n  const swap: SwapSDKMethods<TxResponse> = constructSwapSDK(config);\n  const limitOrders: LimitOrderHandlers<TxResponse> =\n    constructAllLimitOrdersHandlers(config);\n  const nftOrders: NFTOrderHandlers<TxResponse> =\n    constructAllNFTOrdersHandlers(config);\n  const delta: DeltaOrderHandlers<TxResponse> =\n    constructAllDeltaOrdersHandlers(config);\n  const quote = constructGetQuote(config);\n\n  return {\n    swap,\n    limitOrders,\n    nftOrders,\n    delta,\n    quote,\n    apiURL: config.apiURL ?? API_URL,\n    chainId: config.chainId,\n    version: config.version ?? DEFAULT_VERSION,\n  };\n};\n", "import { constructPartialSDK, SDKConfig } from './partial';\nimport {\n  GetAdaptersFunctions,\n  constructGetAdapters,\n} from '../methods/swap/adapters';\nimport {\n  GetBalancesFunctions,\n  constructGetBalances,\n} from '../methods/swap/balance';\nimport { GetRateFunctions, constructGetRate } from '../methods/swap/rates';\nimport {\n  GetSpenderFunctions,\n  constructGetSpender,\n} from '../methods/swap/spender';\nimport { GetTokensFunctions, constructGetTokens } from '../methods/swap/token';\nimport {\n  BuildTxFunctions,\n  constructBuildTx,\n} from '../methods/swap/transaction';\nimport { constructSwapTx, GetSwapTxFunctions } from '../methods/swap/swapTx';\n\nimport {\n  constructAxiosFetcher,\n  constructFetchFetcher,\n  constructEthersV5ContractCaller,\n  constructEthersV6ContractCaller,\n  constructWeb3ContractCaller,\n  constructViemContractCaller,\n} from '../helpers';\n\nimport type {\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ContractCallerFunctions,\n  TransactionContractCallerFn,\n  TxHash,\n  Address,\n  FetcherFunction,\n  ExtraFetchParams,\n} from '../types';\n\nimport type { EthersProviderDeps, MinViemClient } from '../helpers';\nimport type Web3 from 'web3';\n\nimport type { SwapSDKMethods } from '../methods/swap';\nimport {\n  BuildLimitOrderFunctions,\n  constructBuildLimitOrder,\n} from '../methods/limitOrders/buildOrder';\nimport {\n  constructPostLimitOrder,\n  PostLimitOrderFunctions,\n} from '../methods/limitOrders/postOrder';\nimport {\n  constructGetLimitOrders,\n  GetLimitOrdersFunctions,\n} from '../methods/limitOrders/getOrders';\nimport {\n  constructGetLimitOrdersContract,\n  GetLimitOrdersContractFunctions,\n} from '../methods/limitOrders/getOrdersContract';\nimport {\n  constructBuildLimitOrderTx,\n  BuildLimitOrdersTxFunctions,\n} from '../methods/limitOrders/transaction';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\n\nimport {\n  constructGetNFTOrdersContract,\n  GetNFTOrdersContractFunctions,\n} from '../methods/nftOrders/getOrdersContract';\nimport {\n  constructGetNFTOrders,\n  GetNFTOrdersFunctions,\n} from '../methods/nftOrders/getOrders';\nimport {\n  BuildNFTOrderFunctions,\n  constructBuildNFTOrder,\n} from '../methods/nftOrders/buildOrder';\nimport {\n  constructPostNFTOrder,\n  PostNFTOrderFunctions,\n} from '../methods/nftOrders/postOrder';\nimport {\n  constructBuildNFTOrderTx,\n  BuildNFTOrdersTxFunctions,\n} from '../methods/nftOrders/transaction';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\n\nimport { constructSwapSDK } from '../methods/swap';\nimport type { AxiosRequirement } from '../helpers/fetchers/axios';\nimport { API_URL, DEFAULT_VERSION } from '../constants';\nimport {\n  constructAllDeltaOrdersHandlers,\n  DeltaOrderHandlers,\n} from '../methods/delta';\nimport {\n  BuildDeltaOrderFunctions,\n  constructBuildDeltaOrder,\n} from '../methods/delta/buildDeltaOrder';\nimport {\n  constructGetDeltaOrders,\n  GetDeltaOrdersFunctions,\n} from '../methods/delta/getDeltaOrders';\nimport {\n  constructGetDeltaPrice,\n  GetDeltaPriceFunctions,\n} from '../methods/delta/getDeltaPrice';\nimport {\n  constructGetDeltaContract,\n  GetDeltaContractFunctions,\n} from '../methods/delta/getDeltaContract';\nimport {\n  constructGetPartnerFee,\n  GetPartnerFeeFunctions,\n} from '../methods/delta/getPartnerFee';\nimport {\n  constructPostDeltaOrder,\n  PostDeltaOrderFunctions,\n} from '../methods/delta/postDeltaOrder';\nimport {\n  constructGetQuote,\n  GetQuoteFunctions,\n} from '../methods/quote/getQuote';\nimport {\n  constructGetBridgeInfo,\n  GetBridgeInfoFunctions,\n} from '../methods/delta/getBridgeInfo';\nimport {\n  constructGetMulticallHandlers,\n  GetMulticallHandlersFunctions,\n} from '../methods/delta/getMulticallHandlers';\nimport {\n  constructIsTokenSupportedInDelta,\n  IsTokenSupportedInDeltaFunctions,\n} from '../methods/delta/isTokenSupportedInDelta';\nimport {\n  BuildCrosschainOrderBridgeFunctions,\n  constructBuildCrosschainOrderBridge,\n} from '../methods/delta/buildCrosschainOrderBridge';\n\nexport type SwapFetchMethods = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions &\n  GetSwapTxFunctions;\n\nexport type LimitOrdersFetchMethods = GetLimitOrdersContractFunctions &\n  GetLimitOrdersFunctions &\n  BuildLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  BuildLimitOrdersTxFunctions;\n\nexport type NFTOrdersFetchMethods = GetNFTOrdersContractFunctions &\n  GetNFTOrdersFunctions &\n  BuildNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  BuildNFTOrdersTxFunctions;\n\nexport type DeltaFetchMethods = BuildDeltaOrderFunctions &\n  BuildCrosschainOrderBridgeFunctions &\n  GetDeltaOrdersFunctions &\n  GetDeltaPriceFunctions &\n  GetDeltaContractFunctions &\n  GetPartnerFeeFunctions &\n  GetMulticallHandlersFunctions &\n  GetBridgeInfoFunctions &\n  IsTokenSupportedInDeltaFunctions &\n  PostDeltaOrderFunctions;\n\nexport type SimpleFetchSDK = {\n  swap: SwapFetchMethods;\n  limitOrders: LimitOrdersFetchMethods;\n  nftOrders: NFTOrdersFetchMethods;\n  delta: DeltaFetchMethods;\n  quote: QuoteFetchMethods;\n} & Required<ConstructBaseInput>;\n\nexport type QuoteFetchMethods = GetQuoteFunctions;\n\nexport type SimpleSDK = {\n  swap: SwapSDKMethods<TxHash>;\n  limitOrders: LimitOrderHandlers<TxHash>;\n  nftOrders: NFTOrderHandlers<TxHash>;\n  delta: DeltaOrderHandlers<TxHash>;\n  quote: QuoteFetchMethods;\n} & Required<ConstructBaseInput>;\n\nexport type FetcherOptions = (\n  | {\n      axios: AxiosRequirement;\n    }\n  | { fetch: typeof fetch }\n  | { fetcher: FetcherFunction }\n) &\n  ExtraFetchParams;\n\ntype SimpleOptions = ConstructBaseInput & FetcherOptions;\n\nexport type ProviderOptions = (\n  | EthersProviderDeps\n  | { web3: Web3 }\n  | { viemClient: MinViemClient }\n) & {\n  account: Address;\n};\n\nconst constructFetcher = (options: FetcherOptions): FetcherFunction => {\n  if ('axios' in options) {\n    return constructAxiosFetcher(options.axios, options);\n  }\n  if ('fetch' in options) {\n    return constructFetchFetcher(options.fetch, options);\n  }\n  return (params) => {\n    // adding apiKey to headers if it's provided\n    const headers = options?.apiKey\n      ? {\n          'X-API-KEY': options.apiKey,\n          ...params.headers,\n          ...params.requestParams?.headers,\n        }\n      : params.headers;\n\n    return options.fetcher({ ...params, headers });\n  };\n};\n\n/** @description construct SDK with methods that fetch from API and optionally with blockchain provider calling methods */\nexport function constructSimpleSDK(options: SimpleOptions): SimpleFetchSDK;\n\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions: ProviderOptions\n): SimpleSDK;\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions?: ProviderOptions\n): SimpleFetchSDK | SimpleSDK {\n  const fetcher = constructFetcher(options);\n\n  if (!providerOptions) {\n    const config: ConstructFetchInput = {\n      apiURL: options.apiURL,\n      chainId: options.chainId,\n      version: options.version,\n      fetcher,\n    };\n\n    // include all available functions that don't need `contractCaller`\n    const swap: SwapFetchMethods = constructPartialSDK(\n      config,\n      constructGetBalances,\n      constructGetTokens,\n      constructGetSpender,\n      constructBuildTx,\n      constructGetAdapters,\n      constructGetRate,\n      constructSwapTx\n    );\n\n    const limitOrders = constructPartialSDK(\n      config,\n      constructBuildLimitOrder,\n      constructPostLimitOrder,\n      constructGetLimitOrders,\n      constructGetLimitOrdersContract,\n      constructBuildLimitOrderTx\n    );\n\n    const nftOrders = constructPartialSDK(\n      config,\n      constructBuildNFTOrder,\n      constructPostNFTOrder,\n      constructGetNFTOrders,\n      constructGetNFTOrdersContract,\n      constructBuildNFTOrderTx\n    );\n\n    const delta = constructPartialSDK(\n      config,\n      constructBuildDeltaOrder,\n      constructBuildCrosschainOrderBridge,\n      constructPostDeltaOrder,\n      constructGetDeltaOrders,\n      constructGetDeltaPrice,\n      constructGetDeltaContract,\n      constructGetPartnerFee,\n      constructGetMulticallHandlers,\n      constructGetBridgeInfo,\n      constructIsTokenSupportedInDelta\n    );\n\n    const quote = constructPartialSDK(config, constructGetQuote);\n\n    return {\n      swap,\n      limitOrders,\n      nftOrders,\n      delta,\n      quote,\n      apiURL: options.apiURL ?? API_URL,\n      chainId: options.chainId,\n      version: options.version ?? DEFAULT_VERSION,\n    };\n  }\n\n  const contractCaller = constructSimpleContractCaller(providerOptions);\n\n  const config: SDKConfig<TxHash> = {\n    apiURL: options.apiURL,\n    version: options.version,\n    chainId: options.chainId,\n    fetcher,\n    contractCaller,\n  };\n\n  const swap: SwapSDKMethods<TxHash> = constructSwapSDK(config);\n\n  const limitOrders: LimitOrderHandlers<TxHash> =\n    constructAllLimitOrdersHandlers<TxHash>(config);\n\n  const nftOrders: NFTOrderHandlers<TxHash> =\n    constructAllNFTOrdersHandlers<TxHash>(config);\n\n  const delta: DeltaOrderHandlers<TxHash> =\n    constructAllDeltaOrdersHandlers<TxHash>(config);\n\n  const quote = constructGetQuote(config);\n\n  return {\n    swap,\n    limitOrders,\n    nftOrders,\n    delta,\n    quote,\n    apiURL: options.apiURL ?? API_URL,\n    chainId: options.chainId,\n    version: options.version ?? DEFAULT_VERSION,\n  };\n}\n\nfunction constructSimpleContractCaller(\n  providerOptions: ProviderOptions\n): ContractCallerFunctions<TxHash> {\n  if ('ethersProviderOrSigner' in providerOptions) {\n    const {\n      staticCall,\n      transactCall: _transactCall,\n      signTypedDataCall,\n    } = constructEthersV5ContractCaller(\n      providerOptions,\n      providerOptions.account\n    );\n\n    const transactCall: TransactionContractCallerFn<TxHash> = async (\n      params\n    ) => {\n      const contractTx = await _transactCall(params);\n\n      // as soon as tx is sent\n      // returning tx hash, it's up to the user to wait for tx\n      return contractTx.hash as TxHash;\n    };\n\n    return { staticCall, transactCall, signTypedDataCall };\n  }\n\n  if ('ethersV6ProviderOrSigner' in providerOptions) {\n    const {\n      staticCall,\n      transactCall: _transactCall,\n      signTypedDataCall,\n    } = constructEthersV6ContractCaller(\n      providerOptions,\n      providerOptions.account\n    );\n\n    const transactCall: TransactionContractCallerFn<TxHash> = async (\n      params\n    ) => {\n      const contractTx = await _transactCall(params);\n\n      // as soon as tx is sent\n      // returning tx hash, it's up to the user to wait for tx\n      return contractTx.hash as TxHash;\n    };\n\n    return { staticCall, transactCall, signTypedDataCall };\n  }\n\n  if ('viemClient' in providerOptions) {\n    const contractCaller = constructViemContractCaller(\n      providerOptions.viemClient,\n      providerOptions.account\n    );\n    return contractCaller;\n  }\n\n  const {\n    staticCall,\n    transactCall: _transactCall,\n    signTypedDataCall,\n  } = constructWeb3ContractCaller(\n    providerOptions.web3,\n    providerOptions.account\n  );\n\n  const transactCall: TransactionContractCallerFn<TxHash> = async (params) => {\n    const unpromiEvent = await _transactCall(params);\n\n    // as soon as tx is sent\n    // returning tx hash, it's up to the user to wait for tx\n    return new Promise<TxHash>((resolve, reject) => {\n      unpromiEvent.once('transactionHash', (hash) => resolve(hash as TxHash));\n      unpromiEvent.once('error', reject);\n    });\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n}\n"],
  "mappings": "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",
  "names": ["ParaSwapVersion", "SwapSide", "ContractMethodV5", "ContractMethodV6", "assert", "API_URL", "DEFAULT_VERSION", "objectToFilledEntries", "object", "Object", "entries", "filter", "_ref", "value", "undefined", "map", "_ref2", "key", "String", "constructSearchString", "queryOptions", "queryEntries", "queryString", "URLSearchParams", "toString", "isFetcherError", "error", "FetcherError", "_Error", "_ref3", "_this", "code", "request", "response", "isAxiosError", "message", "call", "status", "Error", "captureStackTrace", "name", "constructor", "_assertThisInitialized", "data", "isDataWithError", "isDataWithError2", "errorType", "description", "_inheritsLoose", "_wrapNativeSuper", "isObject", "obj", "isFilledArray", "array", "length", "getRandomInt", "Math", "floor", "random", "Number", "MAX_SAFE_INTEGER", "runOnceAndCache", "func", "result", "_result", "apply", "arguments", "constructGetSpender", "_ref$apiURL", "apiURL", "_ref$version", "version", "chainId", "fetcher", "search", "network", "fetchURL", "_getContracts", "_asyncToGenerator", "_regeneratorRuntime", "mark", "_callee", "requestParams", "wrap", "_callee$", "_context", "prev", "next", "url", "method", "sent", "abrupt", "stop", "_x", "getContracts", "getSpender", "_callee2", "_yield$getContracts", "TokenTransferProxy", "_callee2$", "_context2", "_x2", "getAugustusSwapper", "_ref4", "_callee3", "_yield$getContracts2", "AugustusSwapper", "_callee3$", "_context3", "_x3", "getAugustusRFQ", "_ref5", "_callee4", "_yield$getContracts3", "AugustusRFQ", "_callee4$", "_context4", "_x4", "MinERC20Abi", "constant", "inputs", "type", "outputs", "payable", "stateMutability", "approveTokenMethodFactory", "contractCaller", "amount", "tokenAddress", "overrides", "spender", "res", "transactCall", "address", "abi", "contractMethod", "args", "constructApproveToken", "options", "_constructGetSpender", "approveToken", "approveTokenBulk", "tokenAddresses", "Promise", "all", "constructToken", "tokenProps", "_tokenProps$tokenType", "tokenType", "_tokenProps$mainConne", "mainConnector", "_tokenProps$connector", "connectors", "connectorsInput", "_tokenProps$network", "rest", "_objectWithoutPropertiesLoose", "_excluded", "_extends", "isAllowance", "arg", "NOT_FOUND_RESPONSE", "constructGetBalances", "tokensUrl", "getBalances", "userAddress", "tokens", "getBalance", "tokenAddressOrSymbol", "token", "_x5", "getAllowances", "tokenAddressesLowercaseSet", "balances", "allowances", "Set", "toLowerCase", "has", "_ref5$allowance", "allowance", "_x6", "_x7", "_x8", "getAllowance", "_ref6", "balanceOrNotFound", "_balanceOrNotFound$al", "_x9", "_x10", "_x11", "constructGetAdapters", "getAdapters", "query", "normalizeRateOptions", "_ref$options", "restInput", "excludeContractMethods", "includeContractMethods", "partner", "includeDEXS", "excludeDEXS", "excludePools", "restOptions", "_excluded2", "_map", "join", "_includeDEXS", "_excludeDEXS", "_excludePools", "_excludeContractMethods", "_includeContractMethods", "transformed", "INVALID_ROUTE", "constructGetRate", "pricesUrl", "getRate", "srcToken", "destToken", "parsedOptions", "priceRoute", "getRateByRoute", "route", "_route", "constructSwapTx", "getSwapTxData", "constructGetTokens", "getTokens", "ZERO_ADDRESS", "baseFetchUrlGetterFactory", "orderKind", "constructBaseFetchUrlGetter", "urlGetter", "orderURLpart", "sanitizeOrderData", "nonceAndMeta", "expiry", "makerAsset", "takerAsset", "maker", "taker", "makerAmount", "takerAmount", "OrderNFT", "buildOrderData", "verifyingContract", "_ref$nonce", "nonce", "_makerAssetAddress", "_takerAssetAddress", "makerAssetId", "_ref$takerAssetId", "takerAssetId", "makerAssetType", "takerAssetType", "AugustusAddress", "_ref$taker", "takerInNonce", "BigInt", "assetAddressToUint", "orderNFT", "types", "domain", "assetAddress", "assetType", "AssetType", "ERC20", "ERC1155", "ERC721", "_makerAsset", "_takerAsset", "startsWith", "constructBuildTx", "transactionsURL", "buildTx", "params", "_params$takeSurplus", "side", "AmountMismatchError", "sanitizedParams", "takeSurplus", "fetchParams", "builtTx", "SwapSide", "SELL", "assert", "areAmountsCorrect", "queryParams", "orders", "order", "sanitizedOrderData", "sanitizeNFTOrderData", "sanitizeLimitOrderData", "sanitizedOrder", "signature", "permitMakerAsset", "positiveSlippageToUser", "slippage", "BUY", "destAmount", "srcAmount", "inputAmount", "priceRouteAmount", "Order", "contractTaker", "AppVersion", "constructBuildLimitOrder", "buildLimitOrder", "buildLimitOrderParams", "_options$version", "constructSignLimitOrder", "signLimitOrder", "typedData", "typedDataOnly", "signTypedDataCall", "MinAugustusRFQAbi", "internalType", "constructCancelLimitOrder", "cancelLimitOrder", "orderHash", "cancelLimitOrderBulk", "orderHashes", "splitSignature", "slice", "bytes", "Uint8Array", "i", "parseInt", "r", "Array", "from", "b", "padStart", "s", "v", "sBytes", "yParityAndS", "compactSignature", "compact", "encodeEIP_2612PermitFunctionInput", "owner", "deadline", "permitSignature", "_splitSignature", "encodedOwner", "encodeAddress", "encodedSpender", "encodedValue", "encodeUint256", "encodedDeadline", "encodedV", "encodeUint8", "encodedR", "encodeBytes32", "encodedS", "val", "encodeDAIlikePermitFunctionInput", "holder", "_splitSignature2", "encodedHolder", "encodedNonce", "encodedExpiry", "encodeBool", "strippedAddress", "replace", "bn", "strippedValue", "components", "constructFillOrderDirectly", "fillOrderDirectly", "takerPermit", "_res", "permitTakerAsset", "encodedPermitParams", "isDaiPermit", "constructGetLimitOrders", "getBaseFetchURLByEntityType", "getLimitOrders", "userParams", "baseFetchURL", "userURL", "offset", "limit", "hideSmallBalances", "orderBy", "getRequiredBalance", "getLimitOrderByHash", "constructPostLimitOrder", "getBaseFetchURLByOrderType", "postTypedOrder", "limitOrderWithSignatureAndPermit", "_yield$fetcher", "newOrder", "postLimitOrder", "postP2POrder", "constructApproveTokenForLimitOrder", "approveMakerTokenForLimitOrder", "_constructApproveToke", "approveTakerTokenForLimitOrder", "approveTakerTokenForFillingP2POrderDirectly", "constructGetLimitOrdersContract", "getTokenTransferProxy", "getLimitOrdersContract", "constructBuildLimitOrderTx", "_constructBuildTx", "buildSwapTx", "_constructGetRate", "getSwapAndLimitOrderRate", "getLimitOrdersRate", "_ref2$options", "_options", "_checkAndParseOrders", "totalTakerAmount", "takerAmountString", "rateInput", "optimalRate", "checkAndParseOrders", "ContractMethod", "simpleBuy", "buildLimitOrderTx", "_checkAndParseOrders2", "fillParams", "buildSwapAndLimitOrderTx", "_checkAndParseOrders3", "destDecimals", "_orders$reduce", "reduce", "accum", "takerAssetsSet", "add", "makerAssetsSet", "size", "_orders$", "constructBuildNFTOrder", "buildNFTOrder", "buildNFTOrderParams", "constructSignNFTOrder", "signNFTOrder", "constructCancelNFTOrder", "_constructCancelLimit", "cancelNFTOrder", "cancelNFTOrderBulk", "constructGetNFTOrders", "getNFTOrders", "getNFTOrderByHash", "constructPostNFTOrder", "NFTOrderWithSignatureAndPermit", "postNFTLimitOrder", "postNFTP2POrder", "constructGetNFTOrdersContract", "getNFTOrdersContract", "MinNFTAbi", "constructApproveTokenForNFTOrder", "approveERC20ForNFTOrder", "_constructGetNFTOrder", "approveNFTForNFTOrder", "constructBuildNFTOrderTx", "getSwapAndNFTOrderRate", "getNFTOrdersRate", "buildNFTOrderTx", "buildSwapAndNFTOrderTx", "uintToAssetAddress", "assetUint", "constructFetcher", "axios", "extra", "headers", "allParams", "_yield$axios$request", "apiKey", "t0", "fetch", "body", "POSTheaders", "apiHeaders", "JSON", "stringify", "json", "ok", "statusText", "fromEntries", "config", "constructEthersV5ContractCaller", "account", "providerOrSigner", "ethersProviderOrSigner", "Contract", "EthersContract", "staticCall", "_contract$callStatic", "contract", "block", "gas", "restOverrides", "normalizedOverrides", "callOverrides", "assertEthersContractHasMethodsV5", "blockTag", "gasLimit", "callStatic", "concat", "signer", "txOverrides", "txResponse", "isEthersProviderWithSigner", "isEthersSigner", "getSigner", "isTypedDataCapableSigner", "_signTypedData", "isEthersProvider", "_isProvider", "_isSigner", "ethersContractHasMethodsV5", "_len", "methods", "_key", "every", "_len2", "_key2", "constructContractCaller", "ethersV6ProviderOrSigner", "EthersV6Contract", "callableContractFunction", "getFunction", "send", "signTypedData", "baseTypeRegex", "findPrimaryType", "candidates", "keys", "candidatesSet", "forEach", "candidate", "typedDataFields", "_type$match", "baseType", "match", "_Array$from", "primaryType", "web3", "_contract$methods", "currentProvider", "eth", "assertWeb3ContractHasMethods", "_contract$methods2", "_from", "preparedCall", "promiEvent", "unpromiEvent", "on", "bind", "once", "_typedData", "EIP712Domain", "web3ContractHasMethods", "viemClient", "blockNumber", "readContract", "functionName", "_overrides$gas", "_overrides$value", "viemTxParams", "gasPriceParams", "txHash", "writeContract", "txParamsToViemTxParams", "to", "maxFeePerGas", "maxPriorityFeePerGas", "gasPrice", "argsToViemArgs", "viemDomain", "salt", "txParams", "asNumber", "isNaN", "constructGetDeltaContract", "getDeltaContract", "ParaswapDelta", "constructGetPartnerFee", "partnerFeeUrl", "cachedPartnerFee", "Map", "getPartnerFee", "get", "set", "SWAP_ORDER_EIP_712_TYPES", "Bridge", "produceDeltaOrderTypedData", "orderInput", "paraswapDeltaAddress", "DELTA_DEFAULT_EXPIRY", "buildDeltaSignableOrderData", "_ref2$beneficiary", "beneficiary", "expectedAmount", "_ref2$deadline", "Date", "now", "_ref2$nonce", "_ref2$permit", "permit", "kind", "_ref2$metadata", "metadata", "partnerAddress", "partnerFeeBps", "_ref2$partnerTakesSur", "partnerTakesSurplus", "bridge", "partnerAndFee", "producePartnerAndFee", "toFixed", "OrderKind", "SwapSideToOrderKind", "_SwapSideToOrderKind", "Sell", "Buy", "constructBuildDeltaOrder", "_constructGetDeltaCon", "_constructGetPartnerF", "buildDeltaOrder", "_options$partnerFeeBp", "_options$side", "_options$nonce", "feeOrTakeSurplusSupplied", "_partnerAddress", "_partnerFeeBps", "_partnerTakesSurplus", "partnerFeeResponse", "swapSide", "input", "deltaPrice", "partnerFee", "constructBuildCrosschainOrderBridge", "buildCrosschainOrderBridge", "destChainId", "destinationChainId", "protocolSelector", "scalingFactor", "protocolData", "outputToken", "constructPostDeltaOrder", "postOrderUrl", "postDeltaOrder", "postData", "deltaOrderToPost", "sanitizeDeltaOrderData", "constructSignDeltaOrder", "signDeltaOrder", "constructGetDeltaPrice", "getDeltaPrice", "_getDeltaPrice", "includeAgents", "excludeAgents", "includeAgentsString", "excludeAgentsString", "price", "constructGetDeltaOrders", "baseUrl", "getDeltaOrderById", "orderId", "getDeltaOrderByHash", "getDeltaOrders", "page", "getRequiredBalanceForDeltaLimitOrders", "constructApproveTokenForDelta", "getParaswapDeltaAddress", "deltaContract", "approveTokenForDelta", "constructGetBridgeInfo", "bridgeInfoUrl", "getBridgeInfo", "supportedTokens", "constructGetMulticallHandlers", "multicallHandlersUrl", "_getMulticallHandlers", "getMulticallHandlers", "constructIsTokenSupportedInDelta", "isTokenSupportedInDelta", "supported", "constructGetQuote", "getQuote", "_getQuote", "ORDER_CANCELLATIONS_EIP_712_TYPES", "OrderCancellations", "buildCancelDeltaOrderSignableData", "orderIds", "constructCancelDeltaOrder", "signCancelLimitDeltaOrderRequest", "postCancelLimitDeltaOrderRequest", "cancelUrl", "cancelLimitDeltaOrders", "constructPartialSDK", "_config$apiURL", "_config$version", "funcs", "sdkFuncs", "sdkSlice", "assign", "sdk", "constructSwapSDK", "constructApproveTokenWithTxResponse", "constructSubmitLimitOrder", "_constructBuildLimitO", "_constructSignLimitOr", "_constructPostLimitOr", "prepareLimitOrder", "orderData", "orderWithSignature", "submitLimitOrder", "submitP2POrder", "constructAllLimitOrdersHandlers", "limitOrdersGetters", "limitOrdersContractGetter", "limitOrdersSubmit", "limitOrdersBuild", "limitOrdersSign", "limitOrdersPost", "limitOrdersCancel", "limitOrdersApproveToken", "limitOrdersFillOrderDirectly", "limitOrdersBuildTx", "constructSubmitDeltaOrder", "_constructBuildDeltaO", "_constructSignDeltaOr", "_constructPostDeltaOr", "submitDeltaOrder", "orderParams", "partiallyFillable", "referrerAddress", "constructAllDeltaOrdersHandlers", "deltaOrdersGetters", "deltaOrdersContractGetter", "bridgeInfo", "multicallHandlers", "deltaOrdersSubmit", "deltaOrdersBuild", "deltaOrdersSign", "deltaOrdersPost", "deltaOrdersCancel", "constructSubmitNFTOrder", "_constructBuildNFTOrd", "_constructSignNFTOrde", "_constructPostNFTOrde", "prepareNFTOrder", "submitNFTOrder", "constructAllNFTOrdersHandlers", "NFTOrdersGetters", "NFTOrdersContractGetter", "NFTOrdersSubmit", "NFTOrdersBuild", "NFTOrdersSign", "NFTOrdersPost", "NFTOrdersCancel", "NFTOrdersApproveToken", "NFTOrdersBuildTx", "constructFullSDK", "swap", "limitOrders", "nftOrders", "delta", "quote", "constructAxiosFetcher", "constructFetchFetcher", "_params$requestParams", "constructSimpleSDK", "providerOptions", "_options$apiURL2", "_options$version2", "_options$apiURL", "constructSimpleContractCaller", "_constructEthersV5Con", "_transactCall", "contractTx", "hash", "_constructEthersV6Con", "constructEthersV6ContractCaller", "constructViemContractCaller", "_constructWeb3Contrac", "constructWeb3ContractCaller", "resolve", "reject"]
}
