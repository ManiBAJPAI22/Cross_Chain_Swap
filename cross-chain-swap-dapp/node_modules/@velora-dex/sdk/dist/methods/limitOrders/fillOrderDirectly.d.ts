import type { ConstructProviderFetchInput, RequestParameters, TxSendOverrides } from '../../types';
import type { OrderData } from './buildOrder';
export type FillOrderDirectlyFunctions<T> = {
    fillOrderDirectly: FillOrderDirectly<T>;
};
type TakerPermitEncodedInputParams = {
    encodedPermitParams: string;
};
type TakerPermit1Data = {
    signature: string;
    deadline: number | bigint | string;
    amount?: string;
    isDaiPermit?: false;
};
type TakerDaiPermitData = {
    signature: string;
    expiry: number | bigint | string;
    nonce: number | bigint | string;
    isDaiPermit: true;
};
type TakerPermitObject = TakerPermitEncodedInputParams | TakerPermit1Data | TakerDaiPermitData;
export type FillOrderDirectly<T> = (orderFillData: {
    order: OrderData;
    signature: string;
    /** @description Permit1 data or DAI Permit data or Token.parmit() input params encoded; Permit by taker for Taker Asset with AugustusRFQ as spender */
    takerPermit?: TakerPermitObject;
}, overrides?: TxSendOverrides, requestParams?: RequestParameters) => Promise<T>;
export declare function constructFillOrderDirectly<T>(options: ConstructProviderFetchInput<T, 'transactCall'>): FillOrderDirectlyFunctions<T>;
export {};
//# sourceMappingURL=fillOrderDirectly.d.ts.map