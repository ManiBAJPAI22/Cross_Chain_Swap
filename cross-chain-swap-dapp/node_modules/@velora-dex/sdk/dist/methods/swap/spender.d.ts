import type { ConstructFetchInput, Address, RequestParameters } from '../../types';
export type GetSpender = (requestParams?: RequestParameters) => Promise<Address>;
type GetContracts = (requestParams?: RequestParameters) => Promise<AdaptersContractsResult>;
export type GetSpenderFunctions = {
    getSpender: GetSpender;
    getAugustusSwapper: GetSpender;
    getAugustusRFQ: GetSpender;
    getContracts: GetContracts;
};
export interface AdaptersContractsResult {
    AugustusSwapper: string;
    TokenTransferProxy: string;
    AugustusRFQ: string;
    Executors: {
        [key: `Executor${number}`]: string;
    };
    ParaswapDelta?: string;
}
export declare const constructGetSpender: ({ apiURL, version, chainId, fetcher, }: ConstructFetchInput) => GetSpenderFunctions;
export {};
//# sourceMappingURL=spender.d.ts.map