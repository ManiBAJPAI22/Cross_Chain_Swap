import { Token, Address, AddressOrSymbol } from '../../helpers/token';
import type { ConstructFetchInput, RequestParameters } from '../../types';
type GetBalances = (userAddress: Address, requestParams?: RequestParameters) => Promise<Token[]>;
type GetBalance = (userAddress: Address, tokenAddressOrSymbol: AddressOrSymbol, requestParams?: RequestParameters) => Promise<Token | typeof NOT_FOUND_RESPONSE>;
export interface Allowance {
    tokenAddress: Address;
    allowance: string;
}
type GetAllowances = (userAddress: Address, tokenAddresses: Address[], requestParams?: RequestParameters) => Promise<Allowance[]>;
type GetAllowance = (userAddress: Address, tokenAddress: Address, requestParams?: RequestParameters) => Promise<Allowance | typeof NOT_FOUND_RESPONSE>;
export declare const isAllowance: (arg: Awaited<ReturnType<GetAllowance>>) => arg is Allowance;
export type GetBalancesFunctions = {
    getBalance: GetBalance;
    getBalances: GetBalances;
    getAllowance: GetAllowance;
    getAllowances: GetAllowances;
};
declare const NOT_FOUND_RESPONSE: {
    readonly message: "Not Found";
};
export declare const constructGetBalances: ({ apiURL, chainId, fetcher, }: ConstructFetchInput) => GetBalancesFunctions;
export {};
//# sourceMappingURL=balance.d.ts.map