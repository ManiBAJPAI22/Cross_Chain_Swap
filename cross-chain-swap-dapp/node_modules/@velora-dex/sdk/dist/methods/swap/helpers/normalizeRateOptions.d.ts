import type { PickKeys } from 'ts-essentials';
import type { RateOptions } from '../rates';
type StringArrKeys = PickKeys<RateOptions, string[] | undefined>;
type MinRateOptionsInput = Pick<RateOptions, StringArrKeys> & Pick<RateOptions, 'partner'>;
type NormalizedRateOptions<O extends MinRateOptionsInput, T extends {
    options?: Partial<O>;
}> = Partial<Record<StringArrKeys | 'partner', string>> & Partial<Omit<O, StringArrKeys | 'partner'>> & Omit<T, 'options'>;
export declare function normalizeRateOptions<O extends MinRateOptionsInput, T extends {
    options?: Partial<O>;
}>({ options, ...restInput }: T): NormalizedRateOptions<O, T>;
export {};
//# sourceMappingURL=normalizeRateOptions.d.ts.map