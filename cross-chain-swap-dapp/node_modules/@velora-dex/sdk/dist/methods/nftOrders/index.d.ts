import type { ConstructProviderFetchInput, RequestParameters } from '../../types';
import type { NFTOrderFromAPI } from './helpers/types';
import { BuildNFTOrderFunctions, BuildNFTOrderInput } from './buildOrder';
import { CancelNFTOrderFunctions } from './cancelOrder';
import { GetNFTOrdersFunctions } from './getOrders';
import { PostNFTOrderFunctions } from './postOrder';
import { SignNFTOrderFunctions } from './signOrder';
import { ApproveTokenForNFTOrderFunctions } from './approveForOrder';
import { GetNFTOrdersContractFunctions } from './getOrdersContract';
import { BuildNFTOrdersTxFunctions } from './transaction';
type SubmitNFTOrder = (buildNFTOrderParams: BuildNFTOrderInput, extra?: {
    permitMakerAsset?: string;
}, requestParams?: RequestParameters) => Promise<NFTOrderFromAPI>;
export type SubmitNFTOrderFuncs = {
    submitNFTOrder: SubmitNFTOrder;
    submitP2POrder: SubmitNFTOrder;
};
export declare const constructSubmitNFTOrder: (options: ConstructProviderFetchInput<any, "signTypedDataCall">) => SubmitNFTOrderFuncs;
export type NFTOrderHandlers<T> = SubmitNFTOrderFuncs & BuildNFTOrderFunctions & SignNFTOrderFunctions & PostNFTOrderFunctions & GetNFTOrdersFunctions & GetNFTOrdersContractFunctions & BuildNFTOrdersTxFunctions & CancelNFTOrderFunctions<T> & ApproveTokenForNFTOrderFunctions<T>;
/** @description construct SDK with every NFTOrders-related method, fetching from API and contract calls */
export declare const constructAllNFTOrdersHandlers: <TxResponse>(options: ConstructProviderFetchInput<TxResponse, "signTypedDataCall" | "transactCall" | "staticCall">) => NFTOrderHandlers<TxResponse>;
export {};
//# sourceMappingURL=index.d.ts.map