import type { ConstructFetchInput, RequestParameters } from '../../types';
import { BridgePrice } from './getDeltaPrice';
import { GetDeltaBridgeAndDestTokenOutput } from './helpers/across';
import { BeneficiaryType } from '../common/orders/types';
export type { SignableDeltaOrderData } from './helpers/buildDeltaOrderData';
export type BuildCrosschainOrderBridgeParams = {
    /** @description The address of the destination token on the destination chain */
    destToken: string;
    /** @description Destination Chain ID for Crosschain Orders */
    destChainId: number;
    /** @description Whether the beneficiary is a contract. Needed to automatically fill in crosschain Bridge */
    beneficiaryType: BeneficiaryType;
    /** @description price response received from /delta/prices (getDeltaPrice method) */
    deltaPrice: BridgePrice;
};
type BuildCrosschainOrderBridge = (buildOrderParams: BuildCrosschainOrderBridgeParams, requestParams?: RequestParameters) => Promise<GetDeltaBridgeAndDestTokenOutput>;
export { GetDeltaBridgeAndDestTokenOutput as CrosschainOrderBridgeAndChanges };
export type BuildCrosschainOrderBridgeFunctions = {
    /** @description Build Orders to be posted to Delta API for execution */
    buildCrosschainOrderBridge: BuildCrosschainOrderBridge;
};
export declare const constructBuildCrosschainOrderBridge: (options: ConstructFetchInput) => BuildCrosschainOrderBridgeFunctions;
//# sourceMappingURL=buildCrosschainOrderBridge.d.ts.map