import type { Address, ConstructFetchInput, RequestParameters } from '../../types';
import type { DeltaAuction } from './helpers/types';
export type DeltaOrderFromAPI = Omit<DeltaAuction, 'signature'>;
type GetDeltaOrderById = (orderId: string, requestParams?: RequestParameters) => Promise<DeltaOrderFromAPI>;
type GetDeltaOrderByHash = (orderHash: string, requestParams?: RequestParameters) => Promise<DeltaOrderFromAPI>;
type OrdersFilter = {
    /** @description Order.owner to fetch Delta Order for */
    userAddress: Address;
    /** @description Pagination option, page. Default 1 */
    page?: number;
    /** @description Pagination option, limit. Default 100 */
    limit?: number;
    /** @description Filter by chainId, without this filter, orders from all chains are returned */
    chainId?: number;
    /** @description Filter by type. MARKET, LIMIT, or ALL. Default is ALL */
    type?: 'MARKET' | 'LIMIT' | 'ALL';
};
type GetDeltaOrders = (options: OrdersFilter, requestParams?: RequestParameters) => Promise<DeltaOrderFromAPI[]>;
type GetRequiredBalanceParams = {
    userAddress: Address;
    tokenAddress?: Address;
};
type GetRequiredBalance = (userParams: GetRequiredBalanceParams, requestParams?: RequestParameters) => Promise<Record<string, string>>;
export type GetDeltaOrdersFunctions = {
    getDeltaOrderById: GetDeltaOrderById;
    getDeltaOrderByHash: GetDeltaOrderByHash;
    getDeltaOrders: GetDeltaOrders;
    getRequiredBalanceForDeltaLimitOrders: GetRequiredBalance;
};
export declare const constructGetDeltaOrders: ({ apiURL, fetcher, chainId, }: ConstructFetchInput) => GetDeltaOrdersFunctions;
export {};
//# sourceMappingURL=getDeltaOrders.d.ts.map