import type { ConstructFetchInput, RequestParameters } from '../../types';
import { DeltaAuctionOrder, DeltaAuction } from './helpers/types';
export type DeltaOrderToPost = {
    /** @description Partner string */
    partner?: string;
    /** @description Referrer address */
    referrerAddress?: string;
    order: DeltaAuctionOrder;
    /** @description Signature of the order from order.owner address. EOA signatures must be submitted in ERC-2098 Compact Representation. */
    signature: string;
    chainId: number;
    /** @description designates the Order as being able to partially filled, as opposed to fill-or-kill */
    partiallyFillable?: boolean;
    /** @description Type of the order. MARKET or LIMIT. Default is MARKET */
    type?: 'MARKET' | 'LIMIT';
    includeAgents?: string[];
    excludeAgents?: string[];
};
export type PostDeltaOrderParams = Omit<DeltaOrderToPost, 'chainId'>;
export type DeltaOrderApiResponse = Omit<DeltaAuction, 'transactions'> & {
    orderVersion: string;
    deltaGasOverhead: number;
    type: 'MARKET' | 'LIMIT';
};
type PostDeltaOrder = (postData: PostDeltaOrderParams, requestParams?: RequestParameters) => Promise<DeltaOrderApiResponse>;
export type PostDeltaOrderFunctions = {
    postDeltaOrder: PostDeltaOrder;
};
export declare const constructPostDeltaOrder: ({ apiURL, chainId, fetcher, }: ConstructFetchInput) => PostDeltaOrderFunctions;
export {};
//# sourceMappingURL=postDeltaOrder.d.ts.map