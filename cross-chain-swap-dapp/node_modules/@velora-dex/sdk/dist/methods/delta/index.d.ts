import type { ConstructProviderFetchInput } from '../../types';
import { BuildDeltaOrderDataParams, BuildDeltaOrderFunctions } from './buildDeltaOrder';
import { DeltaOrderApiResponse, DeltaOrderToPost, PostDeltaOrderFunctions } from './postDeltaOrder';
import { SignDeltaOrderFunctions } from './signDeltaOrder';
import { GetDeltaContractFunctions } from './getDeltaContract';
import { GetDeltaPriceFunctions } from './getDeltaPrice';
import { GetDeltaOrdersFunctions } from './getDeltaOrders';
import { GetPartnerFeeFunctions } from './getPartnerFee';
import { ApproveTokenForDeltaFunctions } from './approveForDelta';
import { GetBridgeInfoFunctions } from './getBridgeInfo';
import { GetMulticallHandlersFunctions } from './getMulticallHandlers';
import { IsTokenSupportedInDeltaFunctions } from './isTokenSupportedInDelta';
import { BuildCrosschainOrderBridgeFunctions } from './buildCrosschainOrderBridge';
import { CancelDeltaOrderFunctions } from './cancelDeltaOrder';
export type SubmitDeltaOrderParams = BuildDeltaOrderDataParams & {
    /** @description designates the Order as being able to be partially filled, as opposed to fill-or-kill */
    partiallyFillable?: boolean;
    /** @description Referrer address */
    referrerAddress?: string;
} & Pick<DeltaOrderToPost, 'type' | 'includeAgents' | 'excludeAgents'>;
type SubmitDeltaOrder = (orderParams: SubmitDeltaOrderParams) => Promise<DeltaOrderApiResponse>;
export type SubmitDeltaOrderFuncs = {
    submitDeltaOrder: SubmitDeltaOrder;
};
export declare const constructSubmitDeltaOrder: (options: ConstructProviderFetchInput<any, "signTypedDataCall">) => SubmitDeltaOrderFuncs;
export type DeltaOrderHandlers<T> = SubmitDeltaOrderFuncs & ApproveTokenForDeltaFunctions<T> & BuildDeltaOrderFunctions & BuildCrosschainOrderBridgeFunctions & GetDeltaOrdersFunctions & GetDeltaPriceFunctions & GetDeltaContractFunctions & GetPartnerFeeFunctions & GetMulticallHandlersFunctions & GetBridgeInfoFunctions & IsTokenSupportedInDeltaFunctions & PostDeltaOrderFunctions & SignDeltaOrderFunctions & CancelDeltaOrderFunctions;
/** @description construct SDK with every Delta Order-related method, fetching from API and Order signing */
export declare const constructAllDeltaOrdersHandlers: <TxResponse>(options: ConstructProviderFetchInput<TxResponse, "signTypedDataCall" | "transactCall">) => DeltaOrderHandlers<TxResponse>;
export {};
//# sourceMappingURL=index.d.ts.map