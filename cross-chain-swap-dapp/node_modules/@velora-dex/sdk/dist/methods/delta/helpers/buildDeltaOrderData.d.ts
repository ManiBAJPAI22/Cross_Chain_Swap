import { MarkOptional } from 'ts-essentials';
import { Domain } from '../../common/orders/buildOrderData';
import { Bridge, DeltaAuctionOrder } from './types';
declare const SWAP_ORDER_EIP_712_TYPES: {
    Order: {
        name: string;
        type: string;
    }[];
    Bridge: {
        name: string;
        type: string;
    }[];
};
export type SignableDeltaOrderData = {
    types: {
        Order: typeof SWAP_ORDER_EIP_712_TYPES.Order;
        Bridge: typeof SWAP_ORDER_EIP_712_TYPES.Bridge;
    };
    domain: Domain;
    data: DeltaAuctionOrder;
};
export type DeltaOrderDataInput = MarkOptional<Omit<DeltaAuctionOrder, 'partnerAndFee'>, 'beneficiary' | 'deadline' | 'nonce' | 'permit'>;
export type BuildDeltaOrderDataInput = MarkOptional<DeltaOrderDataInput, 'metadata'> & {
    partnerAddress: string;
    paraswapDeltaAddress: string;
    partnerFeeBps: number;
    partnerTakesSurplus?: boolean;
    chainId: number;
    bridge: Bridge;
};
export declare const DELTA_DEFAULT_EXPIRY: number;
export declare function buildDeltaSignableOrderData({ owner, beneficiary, srcToken, destToken, srcAmount, destAmount, expectedAmount, deadline, nonce, // random enough to not cause collisions
permit, kind, metadata, partnerAddress, partnerFeeBps, partnerTakesSurplus, chainId, paraswapDeltaAddress, bridge, }: BuildDeltaOrderDataInput): SignableDeltaOrderData;
export {};
//# sourceMappingURL=buildDeltaOrderData.d.ts.map