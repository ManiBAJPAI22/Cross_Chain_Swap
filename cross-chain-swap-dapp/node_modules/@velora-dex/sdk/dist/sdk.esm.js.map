{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/helpers/misc.ts","../src/methods/swap/spender.ts","../src/helpers/approve.ts","../src/methods/swap/approve.ts","../src/helpers/token.ts","../src/methods/swap/balance.ts","../src/methods/swap/adapters.ts","../src/methods/swap/helpers/normalizeRateOptions.ts","../src/methods/swap/rates.ts","../src/methods/swap/swapTx.ts","../src/methods/swap/token.ts","../src/methods/common/orders/buildOrderData.ts","../src/methods/common/orders/misc.ts","../src/methods/limitOrders/helpers/misc.ts","../src/methods/nftOrders/helpers/buildOrderData.ts","../src/methods/nftOrders/helpers/misc.ts","../src/methods/swap/transaction.ts","../src/methods/limitOrders/helpers/buildOrderData.ts","../src/methods/limitOrders/buildOrder.ts","../src/methods/limitOrders/signOrder.ts","../src/methods/limitOrders/cancelOrder.ts","../src/methods/common/orders/signature.ts","../src/methods/common/orders/encoding.ts","../src/methods/limitOrders/fillOrderDirectly.ts","../src/methods/limitOrders/getOrders.ts","../src/methods/limitOrders/postOrder.ts","../src/methods/limitOrders/approveForOrder.ts","../src/methods/limitOrders/getOrdersContract.ts","../src/methods/limitOrders/transaction.ts","../src/methods/nftOrders/buildOrder.ts","../src/methods/nftOrders/signOrder.ts","../src/methods/nftOrders/cancelOrder.ts","../src/methods/nftOrders/getOrders.ts","../src/methods/nftOrders/postOrder.ts","../src/methods/nftOrders/getOrdersContract.ts","../src/methods/nftOrders/approveForOrder.ts","../src/methods/nftOrders/transaction.ts","../src/helpers/fetchers/axios.ts","../src/helpers/fetchers/fetch.ts","../src/helpers/providers/ethers.ts","../src/helpers/providers/ethersV6.ts","../src/helpers/providers/helpers.ts","../src/helpers/providers/web3.ts","../src/helpers/providers/viem.ts","../src/methods/delta/getDeltaContract.ts","../src/methods/delta/getPartnerFee.ts","../src/methods/delta/helpers/buildDeltaOrderData.ts","../src/methods/delta/helpers/types.ts","../src/methods/delta/buildDeltaOrder.ts","../src/methods/delta/buildCrosschainOrderBridge.ts","../src/methods/delta/postDeltaOrder.ts","../src/methods/delta/helpers/misc.ts","../src/methods/delta/signDeltaOrder.ts","../src/methods/delta/getDeltaPrice.ts","../src/methods/delta/getDeltaOrders.ts","../src/methods/delta/approveForDelta.ts","../src/methods/delta/getBridgeInfo.ts","../src/methods/delta/getMulticallHandlers.ts","../src/methods/delta/isTokenSupportedInDelta.ts","../src/methods/quote/getQuote.ts","../src/methods/delta/helpers/buildCancelDeltaOrderData.ts","../src/methods/delta/cancelDeltaOrder.ts","../src/sdk/partial.ts","../src/methods/swap/index.ts","../src/methods/limitOrders/index.ts","../src/methods/delta/index.ts","../src/methods/nftOrders/index.ts","../src/sdk/full.ts","../src/sdk/simple.ts"],"sourcesContent":["import { EnumerateLiteral, APIVersion } from './types';\n\nimport type { ContractMethod } from '@paraswap/core';\n\nexport {\n  SwapSide,\n  ContractMethod,\n  ContractMethodV5,\n  ContractMethodV6,\n} from '@paraswap/core';\n\n// allows to pass by name instead of importing enum first\nexport type ContractMethodByName = EnumerateLiteral<typeof ContractMethod>;\n\nexport const API_URL = 'https://api.paraswap.io';\nexport const DEFAULT_VERSION = '6.2' satisfies APIVersion;\n","import type { Primitive } from 'ts-essentials';\n\nexport const objectToFilledEntries = <T extends Record<string, unknown>>(\n  object: T\n): [string, string][] => {\n  return (\n    Object.entries(object)\n      // removes keys with undefined values\n      .filter(([, value]) => value !== undefined)\n      .map(([key, value]) => [key, String(value)])\n  );\n};\n\nexport const constructSearchString = <\n  //                               not arrays or mappings\n  U extends Record<string, Exclude<Primitive, symbol>>\n>(\n  queryOptions: U\n): `?${string}` | '' => {\n  const queryEntries = objectToFilledEntries(queryOptions);\n\n  const queryString = new URLSearchParams(queryEntries).toString();\n\n  // returns empty string or `?${string}`\n  return queryString && `?${queryString}`;\n};\n\ntype MinAxiosError = {\n  code?: string;\n  request?: any;\n  isAxiosError: boolean;\n  message: string;\n};\n\ntype MinAxiosResponse = {\n  data: any;\n  status: number;\n  statusText: string;\n  headers: Record<string, any>;\n  config: { url?: string; method?: string };\n};\n\ntype FetcherErrorConstructorInput = MinAxiosError & {\n  response?: MinAxiosResponse;\n};\n\nexport interface FetcherErrorInterface extends FetcherErrorConstructorInput {\n  status?: number;\n  code?: string;\n}\n\nexport const isFetcherError = (error: unknown): error is FetcherError => {\n  return error instanceof FetcherError;\n};\n\nexport class FetcherError extends Error implements FetcherErrorInterface {\n  code;\n  status;\n  request;\n  response;\n  isAxiosError = false;\n\n  public constructor({\n    code,\n    request,\n    response,\n    isAxiosError,\n    message,\n  }: FetcherErrorConstructorInput) {\n    super();\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetcherError);\n    }\n\n    this.name = this.constructor.name;\n    this.code = code;\n    this.request = request;\n    this.isAxiosError = isAxiosError;\n\n    // no response on AxiosError\n    if (!response) {\n      this.message = message;\n      return;\n    }\n\n    this.response = response;\n\n    const { data, status } = response;\n    this.status = status;\n    this.message = isDataWithError(data) ? data.error : message;\n    this.message = isDataWithError2(data)\n      ? `${data.errorType}${data.description ? `: ${data.description}` : ''}`\n      : this.message;\n  }\n}\n// to turn `object -> Record` for indexed variable access\nfunction isObject(obj: unknown): obj is Record<string | symbol, any> {\n  return !!obj && typeof obj === 'object';\n}\n\nexport function isDataWithError(data: unknown): data is { error: string } {\n  return isObject(data) && typeof data['error'] === 'string';\n}\nexport function isDataWithError2(\n  data: unknown\n): data is { errorType: string; description?: string } {\n  return isObject(data) && typeof data['errorType'] === 'string';\n}\n\nexport type ExtractAbiMethodNames<T extends readonly { name: string }[]> =\n  T[number]['name'];\n\n// reduce element[] to Object{key: prop, val?: element}\n// for example\n// gatherObjectsByProp(Token[], token => token.address) => Record<address, Token|undefined>\nexport function gatherObjectsByProp<T>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string\n): Record<string, T>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transfrom: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, U>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transform?: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, T> | Record<string, U> {\n  return elements.reduce<Record<string, T> | Record<string, U>>(\n    (accum, element, index) => {\n      const key = pickProp(element, index);\n\n      const accumElem: T | U | undefined = accum[key];\n      const transformedElement = transform\n        ? //                       if transform is available, can only be U | undefined\n          transform(element, accumElem as U | undefined, index)\n        : element;\n\n      accum[key] = transformedElement;\n\n      return accum;\n    },\n    {}\n  );\n}\n\n// checks that array has at least one element\nexport const isFilledArray = <T>(array: T[]): array is [T, ...T[]] => {\n  return array.length > 0;\n};\n\nexport function getRandomInt(): number {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nexport function runOnceAndCache<T, Args extends any[]>(\n  // can pass `(...any[]) => any but null | undefined`\n  func: (...args: Args) => NonNullable<T>\n): (...args: Args) => NonNullable<T> {\n  let result: NonNullable<T>;\n\n  return (...args) => {\n    return result ?? (result = func(...args));\n  };\n}\n","import { API_URL, DEFAULT_VERSION } from '../../constants';\nimport { constructSearchString, runOnceAndCache } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  Address,\n  RequestParameters,\n} from '../../types';\n\nexport type GetSpender = (\n  requestParams?: RequestParameters\n) => Promise<Address>;\ntype GetContracts = (\n  requestParams?: RequestParameters\n) => Promise<AdaptersContractsResult>;\n\nexport type GetSpenderFunctions = {\n  getSpender: GetSpender;\n  getAugustusSwapper: GetSpender;\n  getAugustusRFQ: GetSpender;\n  getContracts: GetContracts;\n};\n\nexport interface AdaptersContractsResult {\n  AugustusSwapper: string;\n  TokenTransferProxy: string;\n  AugustusRFQ: string;\n  Executors: {\n    [key: `Executor${number}`]: string;\n  };\n  ParaswapDelta?: string; // only available on chains with Delta support\n}\n\nexport const constructGetSpender = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetSpenderFunctions => {\n  const search = constructSearchString<{ network: number; version: string }>({\n    network: chainId,\n    version,\n  });\n\n  const fetchURL = `${apiURL}/adapters/contracts${search}` as const;\n\n  const _getContracts: GetContracts = async (requestParams) => {\n    const data = await fetcher<AdaptersContractsResult>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  // cached for the same instance of `{getContracts, getSpender, getAugustusSwapper, getAugustusRFQ} = constructGetSpender()`\n  // so should persist across same apiUrl & network\n  const getContracts = runOnceAndCache(_getContracts);\n\n  const getSpender: GetSpender = async (requestParams) => {\n    const { TokenTransferProxy } = await getContracts(requestParams);\n    return TokenTransferProxy;\n  };\n\n  const getAugustusSwapper: GetSpender = async (requestParams) => {\n    const { AugustusSwapper } = await getContracts(requestParams);\n    return AugustusSwapper;\n  };\n\n  const getAugustusRFQ: GetSpender = async (requestParams) => {\n    const { AugustusRFQ } = await getContracts(requestParams);\n    return AugustusRFQ;\n  };\n\n  return { getContracts, getSpender, getAugustusSwapper, getAugustusRFQ };\n};\n","import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../types';\nimport type { ExtractAbiMethodNames } from '../helpers/misc';\nimport type { Address, PriceString } from './token';\n\n// much smaller than the whole ERC20_ABI\nconst MinERC20Abi = [\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinERC20Abi>;\n\ntype ApproveContractCaller<T> = ConstructProviderFetchInput<\n  T,\n  'transactCall'\n>['contractCaller'];\n\nexport type ApproveToken<T> = (\n  amount: PriceString,\n  tokenAddress: Address,\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type GetSpenderAsyncOrSync = (\n  requestParams?: RequestParameters\n) => Address | Promise<Address>;\n\nexport function approveTokenMethodFactory<T>(\n  contractCaller: ApproveContractCaller<T>,\n  getSpender: GetSpenderAsyncOrSync\n): ApproveToken<T> {\n  return async (amount, tokenAddress, overrides = {}, requestParams) => {\n    const spender = await getSpender(requestParams);\n\n    const res = await contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinERC20Abi,\n      contractMethod: 'approve',\n      args: [spender, amount],\n      overrides,\n    });\n\n    return res;\n  };\n}\n","import { constructGetSpender } from './spender';\nimport type {\n  ConstructProviderFetchInput,\n  TxSendOverrides,\n  Address,\n  PriceString,\n  RequestParameters,\n} from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\n\ntype ApproveTokenBulk<T> = (\n  amount: PriceString,\n  tokenAddresses: Address[],\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<Awaited<T>[]>;\n\nexport type ApproveTokenFunctions<T> = {\n  approveToken: ApproveToken<T>;\n  approveTokenBulk: ApproveTokenBulk<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveToken = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenFunctions<T> => {\n  // getSpender is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getSpender } = constructGetSpender(options);\n\n  const approveToken: ApproveToken<T> = approveTokenMethodFactory<T>(\n    options.contractCaller,\n    getSpender\n  );\n\n  const approveTokenBulk: ApproveTokenBulk<T> = async (\n    amount,\n    tokenAddresses,\n    overrides,\n    requestParams\n  ) => {\n    return Promise.all(\n      tokenAddresses.map((tokenAddress) =>\n        approveToken(amount, tokenAddress, overrides, requestParams)\n      )\n    );\n  };\n\n  return { approveToken, approveTokenBulk };\n};\n","import type { MarkOptional } from 'ts-essentials';\n\n/**\n * @type hex token or account address\n */\nexport type Address = string;\n/**\n * @type hex token address or token symbol\n */\nexport type AddressOrSymbol = string;\n/**\n * @type number in string form\n */\nexport type PriceString = string;\n/**\n * @type transaction hash\n */\nexport type TxHash = `0x${string}`;\n\n// @TODO sync with what it actually is\nexport type LendingToken =\n  | 'cToken'\n  | 'iToken'\n  | 'aToken'\n  | 'aToken2'\n  | 'idleToken'\n  | 'Chai'\n  | 'bDAI';\n\nexport type TokenType = 'ETH' | 'ERC20' | 'SYNTH';\n\n/**\n * @type Token object returned from API used internally in API\n */\n// consider if need the old class Token for backwards compatipility\n// otherwise no real need\nexport type Token = {\n  address: string;\n  decimals: number;\n  symbol?: string | undefined;\n  tokenType: LendingToken | TokenType;\n  mainConnector: string;\n  connectors: string[];\n  network: number;\n  img?: string | undefined;\n  allowance?: string | undefined;\n  balance?: string | undefined;\n};\n\ntype ConstructTokenInput = MarkOptional<\n  Token,\n  // these props are constructed from other, required props\n  'tokenType' | 'mainConnector' | 'connectors' | 'network'\n>;\n\nexport const constructToken = (tokenProps: ConstructTokenInput): Token => {\n  const {\n    tokenType = 'ERC20',\n    mainConnector = 'ETH',\n    connectors: connectorsInput = [],\n    network = 1,\n    ...rest\n  } = tokenProps;\n\n  const connectors: Token['connectors'] =\n    connectorsInput.length > 0 ? connectorsInput : [mainConnector];\n\n  return {\n    tokenType,\n    connectors,\n    mainConnector,\n    network,\n    ...rest,\n  };\n};\n","import { API_URL } from '../../constants';\nimport {\n  Token,\n  Address,\n  constructToken,\n  AddressOrSymbol,\n} from '../../helpers/token';\nimport type {\n  ConstructFetchInput,\n  TokenApiResponse,\n  TokensApiResponse,\n  RequestParameters,\n} from '../../types';\n\ntype GetBalances = (\n  userAddress: Address,\n  requestParams?: RequestParameters\n) => Promise<Token[]>;\ntype GetBalance = (\n  userAddress: Address,\n  tokenAddressOrSymbol: AddressOrSymbol,\n  requestParams?: RequestParameters\n) => Promise<Token | typeof NOT_FOUND_RESPONSE>;\n\nexport interface Allowance {\n  tokenAddress: Address;\n  allowance: string;\n}\n\ntype GetAllowances = (\n  userAddress: Address,\n  tokenAddresses: Address[],\n  requestParams?: RequestParameters\n) => Promise<Allowance[]>;\ntype GetAllowance = (\n  userAddress: Address,\n  tokenAddress: Address,\n  requestParams?: RequestParameters\n) => Promise<Allowance | typeof NOT_FOUND_RESPONSE>;\n\nexport const isAllowance = (\n  arg: Awaited<ReturnType<GetAllowance>>\n): arg is Allowance => {\n  return 'allowance' in arg;\n};\n\nexport type GetBalancesFunctions = {\n  getBalance: GetBalance;\n  getBalances: GetBalances;\n  getAllowance: GetAllowance;\n  getAllowances: GetAllowances;\n};\n\nconst NOT_FOUND_RESPONSE = { message: 'Not Found' } as const;\n\nexport const constructGetBalances = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetBalancesFunctions => {\n  const tokensUrl = `${apiURL}/users/tokens/${chainId}` as const;\n\n  const getBalances: GetBalances = async (userAddress, requestParams) => {\n    const fetchURL = `${tokensUrl}/${userAddress}` as const;\n\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n\n    return tokens;\n  };\n\n  const getBalance: GetBalance = async (\n    userAddress,\n    tokenAddressOrSymbol,\n    requestParams\n  ) => {\n    const fetchURL =\n      `${tokensUrl}/${userAddress}/${tokenAddressOrSymbol}` as const;\n\n    const data = await fetcher<TokenApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    if (!data.token) {\n      return NOT_FOUND_RESPONSE;\n    }\n\n    return constructToken(data.token);\n  };\n\n  const getAllowances: GetAllowances = async (\n    userAddress,\n    tokenAddresses,\n    requestParams\n  ) => {\n    const tokenAddressesLowercaseSet = new Set(\n      tokenAddresses.map((address) => address.toLowerCase())\n    );\n\n    const balances = await getBalances(userAddress, requestParams);\n\n    const allowances: Allowance[] = balances\n      .filter((token) =>\n        tokenAddressesLowercaseSet.has(token.address.toLowerCase())\n      )\n      .map(({ address, allowance = '0' }) => ({\n        tokenAddress: address,\n        allowance,\n      }));\n\n    return allowances;\n  };\n\n  const getAllowance: GetAllowance = async (\n    userAddress,\n    tokenAddress,\n    requestParams\n  ) => {\n    const balanceOrNotFound = await getBalance(\n      userAddress,\n      tokenAddress,\n      requestParams\n    );\n\n    if ('message' in balanceOrNotFound) {\n      return balanceOrNotFound;\n    }\n\n    const { address, allowance = '0' } = balanceOrNotFound;\n\n    return { tokenAddress: address, allowance };\n  };\n\n  return {\n    getBalance,\n    getBalances,\n    getAllowance,\n    getAllowances,\n  };\n};\n","import type {\n  ConstructFetchInput,\n  APIVersion,\n  RequestParameters,\n} from '../../types';\nimport { constructSearchString } from '../../helpers/misc';\nimport { API_URL, DEFAULT_VERSION } from '../../constants';\n\ntype AdaptersAsStrings = string[];\n\nexport type GetAdaptersFunctions = {\n  getAdapters: (\n    requestParams?: RequestParameters\n  ) => Promise<AdaptersAsStrings>;\n};\n\ntype SearchStringParams = {\n  network: number;\n  version?: APIVersion;\n};\n\nexport const constructGetAdapters = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetAdaptersFunctions => {\n  const getAdapters: GetAdaptersFunctions['getAdapters'] = async (\n    requestParams\n  ): Promise<AdaptersAsStrings> => {\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const query = constructSearchString<SearchStringParams>({\n      network: chainId,\n      version,\n    });\n\n    const fetchURL = `${apiURL}/adapters/list${query}` as const;\n\n    const data = await fetcher<AdaptersAsStrings>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  return { getAdapters };\n};\n","import type { PickKeys } from 'ts-essentials';\nimport type { RateOptions } from '../rates';\n\ntype StringArrKeys = PickKeys<RateOptions, string[] | undefined>;\n\ntype MinRateOptionsInput = Pick<RateOptions, StringArrKeys> &\n  Pick<RateOptions, 'partner'>;\n\ntype NormalizedRateOptions<\n  O extends MinRateOptionsInput,\n  T extends { options?: Partial<O> }\n> = Partial<Record<StringArrKeys | 'partner', string>> &\n  Partial<Omit<O, StringArrKeys | 'partner'>> &\n  Omit<T, 'options'>;\n\nexport function normalizeRateOptions<\n  O extends MinRateOptionsInput,\n  T extends { options?: Partial<O> }\n>({ options = {}, ...restInput }: T): NormalizedRateOptions<O, T> {\n  const {\n    excludeContractMethods,\n    includeContractMethods,\n    partner,\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    ...restOptions\n  } = options;\n\n  const [\n    _includeDEXS,\n    _excludeDEXS,\n    _excludePools,\n    _excludeContractMethods,\n    _includeContractMethods,\n  ] = [\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    excludeContractMethods,\n    includeContractMethods,\n    //                                                                                              no \"\" empty string\n  ].map((array) => array?.join(',') || undefined);\n\n  const transformed: Partial<Record<StringArrKeys | 'partner', string>> = {\n    excludeContractMethods: _excludeContractMethods,\n    includeContractMethods: _includeContractMethods,\n    partner,\n    includeDEXS: _includeDEXS,\n    excludeDEXS: _excludeDEXS,\n    excludePools: _excludePools,\n  };\n\n  return { ...transformed, ...restOptions, ...restInput };\n}\n","import {\n  API_URL,\n  DEFAULT_VERSION,\n  ContractMethodByName,\n} from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  PriceRouteApiResponse,\n  Address,\n  AddressOrSymbol,\n  PriceString,\n  OptimalRate,\n  RequestParameters,\n} from '../../types';\nimport { normalizeRateOptions } from './helpers/normalizeRateOptions';\n\ntype RateQueryParams = {\n  /**\n   * @description Source Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  srcToken: string;\n\n  /**\n   * @description Source Token Decimals. (Can be omitted if Token Symbol is used in `srcToken`).\n   */\n  srcDecimals?: number;\n\n  /**\n   * @description Destination Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  destToken: string;\n\n  /**\n   * @description srcToken amount (in case of SELL) or destToken amount (in case of BUY). The amount should be in **WEI/Raw units** (eg. 1WBTC -> 100000000).\n   */\n  amount: string;\n\n  /**\n   * @description **SELL** or **BUY**. Default: `SELL`.\n   */\n  side?: 'SELL' | 'BUY';\n\n  /**\n   * @description Network ID. (Mainnet - 1, Optimism - 10, BSC - 56, Polygon - 137, Fantom - 250, zkEVM - 1101, Base - 8453, Arbitrum - 42161, Avalanche - 43114). Default: `1`.\n   */\n  network?: number;\n\n  /**\n   * @description If provided, **others** object is filled in the response with price quotes from other exchanges _(if available for comparison)_. Default: `false`.\n   */\n  otherExchangePrices?: boolean;\n\n  /**\n   * @description Comma Separated List of DEXs to include. **Supported DEXs:** UniswapV2, UniswapV3, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, Balancer, MakerDAO, Chai, Aave, Aave2 and more. You can view all currently supported dexes filtered by chain [here](https://api.paraswap.io/adapters/list/1) eg: `UniswapV3,MakerDAO`.\n   */\n  includeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to include in pricing (without spaces). View the list of the supported methods for [V5](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v5#supported-methods) and [V6](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v6.2#supported-methods) eg: `swapExactAmountIn,swapExactAmountInOnUniswapV2`.\n   */\n  includeContractMethods?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to exclude from pricing (without spaces). View the list of the supported methods for [V5](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v5#supported-methods) and [V6](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v6.2#supported-methods).\n   */\n  excludeContractMethods?: string;\n\n  /**\n   * @description User's Wallet Address.\n   */\n  userAddress?: string;\n\n  /**\n   * @description Dash (-) separated list of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string;\n\n  /**\n   * @description Partner string.\n   */\n  partner?: string;\n\n  /**\n   * @description Destination Token Decimals. (Can be omitted if Token Symbol is used in `destToken`).\n   */\n  destDecimals?: number;\n\n  /**\n   * @description In %. It's a way to bypass the API price impact check (default = 15%).\n   */\n  maxImpact?: number;\n\n  /**\n   * @description Receiver's Wallet address. (Can be omitted if swapping tokens from and to same account).\n   */\n  receiver?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  srcTokenTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  destTokenTransferFee?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.\n   */\n  srcTokenDexTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs, not on ordinary transfers.\n   */\n  destTokenDexTransferFee?: string;\n\n  /**\n   * @description To specify the protocol version. **Values:** 5 or 6.2 **Default**: 5.\n   */\n  version?: number | string;\n\n  /**\n   * @description Specify that methods without fee support should be excluded from the price route. Default: `false`.\n   */\n  excludeContractMethodsWithoutFeeModel?: boolean;\n\n  /**\n   * @description If tokens USD prices are not available, `Bad USD Price` error will be thrown. Use this param to skip this check. Default: `false`.\n   */\n  ignoreBadUsdPrice?: boolean;\n  /**\n   * @description \tExclude all RFQs from pricing, e.g.: AugustusRFQ, Hashflow. Default: false\n   */\n  excludeRFQ?: boolean;\n};\n\n// more details in the docs https://developers.velora.xyz/api/velora-api/velora-market-api/get-rate-for-a-token-pair#query-parameters\nexport type RateOptions = {\n  excludeDEXS?: string[];\n  includeDEXS?: string[];\n  excludePools?: string[];\n  excludeContractMethods?: ContractMethodByName[];\n  includeContractMethods?: ContractMethodByName[];\n  partner?: string;\n  /** @description In %. It's a way to bypass the API price impact check (default = 15%) */\n  maxImpact?: number;\n  maxUSDImpact?: number;\n  otherExchangePrices?: boolean;\n  /** @description proceed with priceRoute building even when tokens don't have USD price. Default: false */\n  ignoreBadUsdPrice?: boolean;\n  /** @description Exclude all RFQs from pricing, e.g.: AugustusRFQ, Hashflow. Default: false */\n  excludeRFQ?: boolean;\n  /** @description \tSpecify that methods without fee support should be excluded from the price route. Default: false */\n  excludeContractMethodsWithoutFeeModel?: boolean;\n  /** @description If the source token is a tax token, you should specify the tax amount in BPS.  */\n  srcTokenTransferFee?: string;\n  /** @description If the destination token is a tax token, you should specify the tax amount in BPS.  */\n  destTokenTransferFee?: string;\n  /** @description Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.  */\n  srcTokenDexTransferFee?: string;\n  /** @description Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.  */\n  destTokenDexTransferFee?: string;\n};\n\ntype CommonGetRateInput = {\n  amount: PriceString;\n  userAddress?: Address;\n  side?: 'SELL' | 'BUY';\n  options?: RateOptions;\n  srcDecimals?: number;\n  destDecimals?: number;\n};\n\nexport type GetRateInput = CommonGetRateInput & {\n  srcToken: AddressOrSymbol;\n  destToken: AddressOrSymbol;\n};\n\nexport type GetRate = (\n  options: GetRateInput,\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\ntype GetRateByRouteInput = CommonGetRateInput & {\n  route: AddressOrSymbol[];\n};\n\ntype GetRateByRoute = (\n  options: GetRateByRouteInput,\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\nexport type GetRateFunctions = {\n  getRate: GetRate;\n  getRateByRoute: GetRateByRoute;\n};\nconst INVALID_ROUTE = 'Invalid Route';\n\nexport const constructGetRate = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetRateFunctions => {\n  const pricesUrl = `${apiURL}/prices` as const;\n\n  const getRate: GetRate = async (\n    { srcToken, destToken, ...rest },\n    requestParams\n  ) => {\n    const parsedOptions = normalizeRateOptions(rest);\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<Omit<RateQueryParams, 'route'>>({\n      srcToken,\n      destToken,\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.priceRoute;\n  };\n\n  const getRateByRoute: GetRateByRoute = async (\n    { route, ...rest },\n    requestParams\n  ) => {\n    if (route.length < 2) {\n      throw new Error(INVALID_ROUTE);\n    }\n\n    const parsedOptions = normalizeRateOptions(rest);\n\n    const _route = route.join('-');\n\n    const search = constructSearchString<\n      Omit<RateQueryParams, 'srcToken' | 'destToken'>\n    >({\n      route: _route, // route can be used in place of srcToken+destToken\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.priceRoute;\n  };\n\n  return {\n    getRate,\n    getRateByRoute,\n  };\n};\n","import {\n  API_URL,\n  DEFAULT_VERSION,\n  ContractMethodByName,\n} from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  RequestParameters,\n  SwapApiResponse,\n} from '../../types';\nimport { normalizeRateOptions } from './helpers/normalizeRateOptions';\n\n/**\n * Types for transaction parameters.\n */\ntype SwapQueryParams = {\n  /**\n   * @description Source Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  srcToken: string;\n\n  /**\n   * @description Source Token Decimals. (Can be omitted if Token Symbol is used in `srcToken`).\n   */\n  srcDecimals?: number;\n\n  /**\n   * @description Destination Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  destToken: string;\n\n  /**\n   * @description srcToken amount (in case of SELL) or destToken amount (in case of BUY). The amount should be in **WEI/Raw units** (eg. 1WBTC -> 100000000).\n   */\n  amount: string;\n\n  /**\n   * @description **SELL** or **BUY**. Default: `SELL`.\n   */\n  side: 'SELL' | 'BUY';\n\n  /**\n   * @description Network ID. (Mainnet - 1, Optimism - 10, BSC - 56, Polygon - 137, Fantom - 250, zkEVM - 1101, Base - 8453, Arbitrum - 42161, Avalanche - 43114). Default: `1`.\n   */\n  network?: number;\n\n  /**\n   * @description Comma Separated List of DEXs to include. **Supported DEXs:** Uniswap, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, 0x, MakerDAO, Chai, Aave, Aave2, MultiPath, MegaPath, Curve, Curve3, Saddle, IronV2, BDai, idle, Weth, Beth, UniswapV2, Balancer, 0xRFQt, SushiSwap, LINKSWAP, Synthetix, DefiSwap, Swerve, CoFiX, Shell, DODOV1, DODOV2, OnChainPricing, PancakeSwap, PancakeSwapV2, ApeSwap, Wbnb, acryptos, streetswap, bakeryswap, julswap, vswap, vpegswap, beltfi, ellipsis, QuickSwap, COMETH, Wmatic, Nerve, Dfyn, UniswapV3, Smoothy, PantherSwap, OMM1, OneInchLP, CurveV2, mStable, WaultFinance, MDEX, ShibaSwap, CoinSwap, SakeSwap, JetSwap, Biswap, BProtocol eg: `UniswapV3,0x`.\n   */\n  includeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to include without spaces. **Available values:** swapOnUniswap, buyOnUniswap, swapOnUniswapFork, buyOnUniswapFork, swapOnUniswapV2Fork, buyOnUniswapV2Fork, simpleBuy, simpleSwap, multiSwap, megaSwap, protectedMultiSwap, protectedMegaSwap, protectedSimpleSwap, protectedSimpleBuy, swapOnZeroXv2, swapOnZeroXv4, buy. eg: `simpleSwap,multiSwap`.\n   */\n  includeContractMethods?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to exclude without spaces. (from the list of contract methods mentioned above).\n   */\n  excludeContractMethods?: string;\n\n  /**\n   * @description User's Wallet Address.\n   */\n  userAddress: string;\n\n  /**\n   * @description Dash (-) separated list of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string;\n\n  /**\n   * @description Partner string.\n   */\n  partner?: string;\n\n  /**\n   * @description If provided it is used together with `partnerAddress`. Should be in basis points percentage. Look at `slippage` parameter description for understanding better. Eg: `200` (for 2% fee percent). Fees have to be claimed from the Fee Claimer contract unless `_isSurplusToUser_` or `_isDirectFeeTransfer_` are used.\n   */\n  partnerFeeBps?: string;\n\n  /**\n   * @description Address that will be entitled to claim fees or surplus. Fees have to be claimed from the Fee Claimer contract unless `_isSurplusToUser_` or `_isDirectFeeTransfer_` are used.\n   */\n  partnerAddress?: string;\n\n  /**\n   * @description Allowed slippage percentage represented in basis points. _Eg:_ for **2.5%** slippage, set the value to **2.5 \\* 100 = 250**; for 10% = 1000.\n   */\n  slippage: number;\n\n  /**\n   * @description Destination Token Decimals. (Can be omitted if Token Symbol is used in `destToken`).\n   */\n  destDecimals?: number;\n\n  /**\n   * @description In %. It's a way to bypass the API price impact check (default = 15%).\n   */\n  maxImpact?: number;\n\n  /**\n   * @description Receiver's Wallet address. (Can be omitted if swapping tokens from and to same account).\n   */\n  receiver?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  srcTokenTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  destTokenTransferFee?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.\n   */\n  srcTokenDexTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs, not on ordinary transfers.\n   */\n  destTokenDexTransferFee?: string;\n\n  /**\n   * @description To specify the protocol version. **Values:** 5 or 6.2 **Default**: 5.\n   */\n  version?: number | string;\n\n  /**\n   * @description If tokens USD prices are not available, `Bad USD Price` error will be thrown. Use this param to skip this check. Default: `false`.\n   */\n  ignoreBadUsdPrice?: boolean;\n\n  /**\n   * @description Specify if user should receive surplus instead of partner. Default: `false`.\n   */\n  isSurplusToUser?: boolean;\n\n  /**\n   * @description Specify if fees should be sent directly to the partner instead of registering them on FeeClaimer. Default: `false`.\n   */\n  isDirectFeeTransfer?: boolean;\n\n  /**\n   * @description Allows for capping the surplus at 1% maximum. Default: `true`.\n   */\n  isCapSurplus?: boolean;\n\n  /**\n   * @description Allows to collect surplus. Works with `partnerAddress`. Default: `false`.\n   */\n  takeSurplus?: boolean;\n};\n\ntype SwapTxInputFields =\n  | 'srcToken'\n  | 'destToken'\n  | 'amount'\n  | 'side'\n  | 'srcDecimals'\n  | 'destDecimals'\n  | 'userAddress'\n  | 'slippage';\ntype SwapTxInputListFields =\n  | 'includeDEXS'\n  | 'excludeDEXS'\n  | 'includeContractMethods'\n  | 'excludeContractMethods'\n  | 'route';\n\ntype SwapRateOptions = Omit<\n  SwapQueryParams,\n  SwapTxInputFields | SwapTxInputListFields | 'network' | 'version'\n> & {\n  /**\n   * @description List of DEXs to include. **Supported DEXs:** Uniswap, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, 0x, MakerDAO, Chai, Aave, Aave2, MultiPath, MegaPath, Curve, Curve3, Saddle, IronV2, BDai, idle, Weth, Beth, UniswapV2, Balancer, 0xRFQt, SushiSwap, LINKSWAP, Synthetix, DefiSwap, Swerve, CoFiX, Shell, DODOV1, DODOV2, OnChainPricing, PancakeSwap, PancakeSwapV2, ApeSwap, Wbnb, acryptos, streetswap, bakeryswap, julswap, vswap, vpegswap, beltfi, ellipsis, QuickSwap, COMETH, Wmatic, Nerve, Dfyn, UniswapV3, Smoothy, PantherSwap, OMM1, OneInchLP, CurveV2, mStable, WaultFinance, MDEX, ShibaSwap, CoinSwap, SakeSwap, JetSwap, Biswap, BProtocol eg: `UniswapV3,0x`.\n   */\n  includeDEXS?: string[];\n\n  /**\n   * @description List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string[];\n\n  /**\n   * @description List of Contract Methods to include without spaces. **Available values:** swapOnUniswap, buyOnUniswap, swapOnUniswapFork, buyOnUniswapFork, swapOnUniswapV2Fork, buyOnUniswapV2Fork, simpleBuy, simpleSwap, multiSwap, megaSwap, protectedMultiSwap, protectedMegaSwap, protectedSimpleSwap, protectedSimpleBuy, swapOnZeroXv2, swapOnZeroXv4, buy. eg: `simpleSwap,multiSwap`.\n   */\n  includeContractMethods?: ContractMethodByName[];\n\n  /**\n   * @description List of Contract Methods to exclude without spaces. (from the list of contract methods mentioned above).\n   */\n  excludeContractMethods?: ContractMethodByName[];\n};\n\ntype SwapTxInput = Pick<SwapQueryParams, SwapTxInputFields> & {\n  /**\n   * @description List of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string[];\n\n  options?: SwapRateOptions;\n};\n\nexport type SwapTxResult = SwapApiResponse;\n\nexport type GetSwapTxData = (\n  options: SwapTxInput,\n  requestParams?: RequestParameters\n) => Promise<SwapTxResult>;\n\nexport type GetSwapTxFunctions = {\n  getSwapTxData: GetSwapTxData;\n};\n\nexport const constructSwapTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetSwapTxFunctions => {\n  const pricesUrl = `${apiURL}/swap` as const;\n\n  const getSwapTxData: GetSwapTxData = async (\n    { srcToken, destToken, amount, route, ...rest },\n    requestParams\n  ) => {\n    const parsedOptions = normalizeRateOptions(rest);\n\n    const _route = route?.join('-');\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SwapQueryParams>({\n      amount,\n      srcToken,\n      destToken,\n      route: _route,\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<SwapApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  return {\n    getSwapTxData,\n  };\n};\n","import { API_URL } from '../../constants';\nimport { constructToken } from '../../helpers/token';\nimport type {\n  RequestParameters,\n  ConstructFetchInput,\n  Token,\n  TokensApiResponse,\n} from '../../types';\n\ntype GetTokens = (extra?: RequestParameters) => Promise<Token[]>;\n\nexport type GetTokensFunctions = {\n  getTokens: GetTokens;\n};\n\nexport const constructGetTokens = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetTokensFunctions => {\n  const fetchURL = `${apiURL}/tokens/${chainId}` as const;\n\n  const getTokens: GetTokens = async (requestParams) => {\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n    return tokens;\n  };\n\n  return { getTokens };\n};\n","export const name = 'AUGUSTUS RFQ';\nexport const version = '1';\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\n\ntype TypedDataDomain = {\n  name?: string;\n  version?: string;\n  chainId?: bigint | string | number;\n  verifyingContract?: string;\n  salt?: string;\n};\n\nexport type TypedDataField = {\n  name: string;\n  type: string;\n};\n\nexport type SignableTypedData = {\n  types: Record<string, TypedDataField[]>;\n  domain: TypedDataDomain;\n  data: Record<string, any>;\n};\n\nexport type Domain = {\n  name: string;\n  version: string;\n  chainId: number;\n  verifyingContract: string;\n};\n","import type { LimitOrderFromApi } from '../../limitOrders/helpers/types';\nimport { ZERO_ADDRESS } from './buildOrderData';\nimport type { OrderType } from './types';\n\ntype GetBaseFetchUrlInput = {\n  apiURL: string;\n  chainId: number;\n};\n\nexport type BaseFetchUrlInputConstructor<Kind extends OrderKind> = (\n  params: GetBaseFetchUrlInput\n) => UrlByTypeFunction<Kind>;\n\ntype OrderType2URLPart = {\n  LIMIT: 'orders';\n  P2P: 'p2p';\n};\n\ntype OrderKind = 'nft' | 'ft';\n\nexport type BaseFetchUrl<\n  Kind extends OrderKind,\n  Type extends OrderType = OrderType\n> = `${string}/${Kind}/${OrderType2URLPart[Type]}/${number}`;\n\nexport type MinFetchUrl<Kind extends OrderKind> = `${string}/${Kind}/order`;\nexport type OrderFillableBalanceFetchUrl<Kind extends OrderKind> =\n  `${string}/${Kind}/fillablebalance/${number}`;\n\ninterface UrlByTypeFunction<Kind extends OrderKind> {\n  (): MinFetchUrl<Kind>;\n  (type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n  (type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n  (type: OrderType): BaseFetchUrl<Kind>;\n  (type: 'fillablebalance'): OrderFillableBalanceFetchUrl<Kind>;\n  (type?: OrderType | 'fillablebalance'):\n    | BaseFetchUrl<Kind>\n    | MinFetchUrl<Kind>\n    | OrderFillableBalanceFetchUrl<Kind>;\n}\n\nexport function baseFetchUrlGetterFactory<Kind extends OrderKind>(\n  orderKind: Kind\n): BaseFetchUrlInputConstructor<Kind> {\n  return function constructBaseFetchUrlGetter({\n    chainId,\n    apiURL,\n  }: GetBaseFetchUrlInput): UrlByTypeFunction<Kind> {\n    function urlGetter(type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n    function urlGetter(type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n    function urlGetter(type: OrderType): BaseFetchUrl<Kind>;\n    function urlGetter(\n      type: 'fillablebalance'\n    ): OrderFillableBalanceFetchUrl<Kind>;\n    function urlGetter(): MinFetchUrl<Kind>;\n    function urlGetter(\n      type?: OrderType | 'fillablebalance'\n    ):\n      | BaseFetchUrl<Kind>\n      | MinFetchUrl<Kind>\n      | OrderFillableBalanceFetchUrl<Kind> {\n      if (!type) return `${apiURL}/${orderKind}/order` as const;\n\n      if (type === 'fillablebalance')\n        return `${apiURL}/${orderKind}/fillablebalance/${chainId}` as const;\n\n      const orderURLpart = type === 'LIMIT' ? 'orders' : 'p2p';\n      return `${apiURL}/${orderKind}/${orderURLpart}/${chainId}` as const;\n    }\n\n    return urlGetter;\n  };\n}\n\n// orders with taker = EOA address\n// that can't be filled through AugustusSwapper,\n// only through AugustusRFQ\nexport function isOrderFillableDirectlyOnRFQOnly(\n  order: Pick<LimitOrderFromApi, 'taker' | 'takerFromMeta'>\n): boolean {\n  // with 0x taker fillable by anyone\n  if (order.taker === ZERO_ADDRESS) return false;\n\n  // same intended EOA taker and msg.sender taker\n  return order.taker.toLowerCase() === order.takerFromMeta.toLowerCase();\n}\n","import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n  OrderFillableBalanceFetchUrl,\n} from '../../common/orders/misc';\nimport type { OrderData } from './buildOrderData';\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset,\n  takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n}: OrderData & Record<string, any>): OrderData {\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n}\n\n/* \nGET\n/ft/orders/:chainId/maker/:walletAddress\n/ft/orders/:chainId/taker/:walletAddress\n/ft/p2p/:chainId/maker/:walletAddress\n/ft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'ft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/ft/fillablebalance/:chainId/:walletAddress/:makerAsset?\n*/\nexport type GetRequiredAllowanceURL =\n  `${OrderFillableBalanceFetchUrl<'ft'>}/${string}${`/${string}` | ''}`;\n\n/*\nGET\n/ft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'ft'>}/${string}`;\n\n/* \nPOST create order\n/ft/orders/:chainId/\n/ft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'ft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'ft'> =\n  baseFetchUrlGetterFactory('ft');\n","import type { Address } from '../../../types';\nimport type { AssetTypeVariant } from './types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\nimport { getRandomInt } from '../../../helpers/misc';\n\nconst OrderNFT = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'uint256' },\n  { name: 'makerAssetId', type: 'uint256' },\n  { name: 'takerAsset', type: 'uint256' },\n  { name: 'takerAssetId', type: 'uint256' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildNFTOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  makerAssetId: string; // required when BUYing NFT\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  takerAssetId?: string;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  makerAssetType: AssetTypeVariant;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  takerAssetType: AssetTypeVariant;\n  maker: Address;\n  // OrderData.taker must be Augustus for p2p limitOrders to involve swap through Augustus\n  // this is the actual user taker which will go into nonceAndMeta\n  taker?: Address;\n  AugustusAddress: Address;\n}\n\nexport type SignableNFTOrderData = {\n  types: { OrderNFT: typeof OrderNFT };\n  domain: Domain;\n  data: NFTOrderData;\n};\n\nexport type BigIntAsString = string;\n\nexport type NFTOrderData = {\n  expiry: number;\n  // '1' when trading 1 NFT token\n  makerAmount: BigIntAsString;\n  makerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  makerAssetId: BigIntAsString;\n  // '1' when trading 1 NFT token\n  takerAmount: BigIntAsString;\n  takerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  takerAssetId: BigIntAsString;\n  nonceAndMeta: BigIntAsString;\n  maker: Address;\n  taker: Address;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset: _makerAssetAddress,\n  takerAsset: _takerAssetAddress,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId = '0',\n  makerAssetType,\n  takerAssetType,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus -- taker = Augustus, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus -- taker = Augustus, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS, //@TODO allow Orders outside of AugustusRFQ\n}: BuildNFTOrderDataInput): SignableNFTOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  const makerAsset = assetAddressToUint(_makerAssetAddress, makerAssetType);\n\n  const takerAsset = assetAddressToUint(_takerAssetAddress, takerAssetType);\n\n  const orderNFT: NFTOrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker: AugustusAddress,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n\n  return {\n    types: { OrderNFT },\n    domain: { name, version, chainId, verifyingContract },\n    data: orderNFT,\n  };\n}\n\n// create a packed number that contains assetAddress and AssetType\nexport function assetAddressToUint(\n  assetAddress: Address,\n  assetType: AssetTypeVariant\n): BigIntAsString {\n  return (BigInt(assetAddress) + (BigInt(assetType) << BigInt(160))).toString(\n    10\n  );\n}\n","import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n} from '../../common/orders/misc';\nimport {\n  assetAddressToUint,\n  BuildNFTOrderDataInput,\n  NFTOrderData,\n} from './buildOrderData';\n\n// any number can be assigned to AssetType enum\n// https://github.com/Microsoft/TypeScript/issues/22311\n// export enum AssetType {\n//   ERC20 = 0,\n//   ERC1155 = 1,\n//   ERC721 = 2,\n// }\n\nexport const AssetType = {\n  ERC20: 0,\n  ERC1155: 1,\n  ERC721: 2,\n} as const;\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset: _makerAsset,\n  takerAsset: _takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId,\n  // asset types provided when Order has them ,e.g. got Order by hash from API\n  makerAssetType,\n  takerAssetType,\n}: NFTOrderData &\n  Partial<Pick<BuildNFTOrderDataInput, 'makerAssetType' | 'takerAssetType'>> &\n  Record<string, any>): NFTOrderData {\n  const makerAsset =\n    makerAssetType !== undefined && _makerAsset.startsWith('0x')\n      ? assetAddressToUint(_makerAsset, makerAssetType)\n      : _makerAsset;\n  const takerAsset =\n    takerAssetType !== undefined && _takerAsset.startsWith('0x')\n      ? assetAddressToUint(_takerAsset, takerAssetType)\n      : _takerAsset;\n\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n}\n\n/* \nGET\n/nft/orders/:chainId/maker/:walletAddress\n/nft/orders/:chainId/taker/:walletAddress\n/nft/p2p/:chainId/maker/:walletAddress\n/nft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'nft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/nft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'nft'>}/${string}`;\n\n/* \nPOST create order\n/nft/orders/:chainId/\n/nft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'nft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'nft'> =\n  baseFetchUrlGetterFactory('nft');\n","import type { WithGasPrice, WithMaxFee } from '../../gas';\nimport type {\n  ConstructFetchInput,\n  Address,\n  FetcherPostInput,\n  PriceString,\n  OptimalRate,\n  RequestParameters,\n} from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { OrderData } from '../limitOrders/buildOrder';\nimport { sanitizeOrderData as sanitizeLimitOrderData } from '../limitOrders/helpers/misc';\nimport { sanitizeOrderData as sanitizeNFTOrderData } from '../nftOrders/helpers/misc';\nimport { AssetTypeVariant } from '../nftOrders/helpers/types';\n\nexport interface TransactionParams {\n  to: string;\n  from: string;\n  value: string;\n  data: string;\n  gas?: string;\n  chainId: number;\n  // either gasPrice or maxFeePerGas & maxPriorityFeePerGas will be present\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n}\n\nexport type SwappableOrder = OrderData & {\n  permitMakerAsset?: string;\n  signature: string;\n};\n\nexport type SwappableNFTOrder = SwappableOrder & {\n  makerAssetId: string;\n  takerAssetId: string;\n  makerAssetType: AssetTypeVariant;\n  takerAssetType: AssetTypeVariant;\n};\n\n// when priceRoute with side=SELL, slippage can replace destAmount\nexport type TxInputAmountsPartSell = {\n  slippage: number;\n  srcAmount: PriceString;\n  destAmount?: never; // disallowed\n};\n// when priceRoute with side=BUY, slippage can replace srcAmount\nexport type TxInputAmountsPartBuy = {\n  slippage: number;\n  srcAmount?: never; // disallowed\n  destAmount: PriceString;\n};\n// both srcAmount and destAmount can be present in absence of slippage\nexport type TxInputAmountsPartBuyOrSell = {\n  slippage?: never; // disallowed\n  srcAmount: PriceString;\n  destAmount: PriceString;\n};\n\n// more details in the docs https://developers.velora.xyz/api/velora-api/velora-market-api/build-parameters-for-transaction#request-body\nexport type BuildTxInputBase = {\n  srcToken: Address;\n  destToken: Address;\n  userAddress: Address;\n  /** @description Whenever msg.sender (`userAddress`) i.e. address calling the Velora contract is different than the address sending the transaction, `txOrigin` must be passed along with `userAddress` */\n  txOrigin?: string;\n  /** @description used with referral link */\n  referrer?: string;\n  partner?: string;\n  partnerAddress?: string;\n  partnerFeeBps?: number;\n  /** @description If user should receive surplus instead of partner. Default: false */\n  isSurplusToUser?: boolean;\n  /** @description If fees should be sent directly to the partner instead of registering them on FeeClaimer. v6 only. Default: false */\n  isDirectFeeTransfer?: boolean;\n  /** @deprecated Use \"takeSurplus\" instead. Positive slippage goes to user, true by default */\n  positiveSlippageToUser?: boolean;\n  /** @description Set to true to take positive slippage. Works with partnerAddress. Default: false */\n  takeSurplus?: boolean;\n  /** @description Cap the surplus at 1% maximum. Default: true */\n  isCapSurplus?: boolean;\n  receiver?: Address;\n  srcDecimals?: number;\n  destDecimals?: number;\n  permit?: string;\n  deadline?: string;\n};\n\n// for Swap transaction\nexport type BuildSwapTxInput = BuildTxInputBase & {\n  priceRoute: OptimalRate;\n} & (\n    | TxInputAmountsPartSell\n    | TxInputAmountsPartBuy\n    | TxInputAmountsPartBuyOrSell\n  ); // this union doesn't allow to mix srcAmount & destAmount & slippage together\n\n// building block for LimitOrders and NFT Orders swaps\n// can only use priceRoute.side=BUY and related TxInputAmountsPart*\ntype BuildTxInputBaseBUYForOrders<\n  // to Omit extra keys\n  // can't do Omit<> around union, breaks discriminated union\n  K extends keyof TxInputAmountsPartBuy | keyof BuildTxInputBase = never\n> = Omit<BuildTxInputBase, K> &\n  // destAmount is sum(orders[].makerAmount)\n  (| Omit<TxInputAmountsPartBuy, 'destAmount' | K>\n    | Omit<TxInputAmountsPartBuyOrSell, 'destAmount' | K>\n  );\n\n// for LimitOrder Fill, without swap\nexport type BuildLimitOrderTxInput = BuildTxInputBaseBUYForOrders & {\n  orders: SwappableOrder[];\n  srcDecimals: number;\n  destDecimals: number;\n};\n\n// for NFT Order Fill, without swap\nexport type BuildNFTOrderTxInput =\n  // @TODO if NFT can ever be srcToken, change logic\n  //                           for NFT token destDecimals = 0 is acceptable\n  BuildTxInputBaseBUYForOrders<'destDecimals'> & {\n    orders: SwappableNFTOrder[];\n    srcDecimals: number;\n  };\n\nexport interface BuildSwapAndLimitOrderTxInput0\n  // destAmount is sum(orders[].makerAmount)\n  extends Omit<BuildTxInputBase, 'destAmount'> {\n  priceRoute: OptimalRate; // priceRoute.side=BUY\n  orders: SwappableOrder[];\n  destDecimals: number;\n}\n// for Swap + LimitOrder, priceRoute must have side=BUY\nexport type BuildSwapAndLimitOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableOrder[];\n    destDecimals: number;\n  };\n\n// with slippage for a swap and fill - p2p - order, without to fill a p2p order directly with the intended taker asset\n\n// for Swap + NFT Order, priceRoute must have side=BUY\nexport type BuildSwapAndNFTOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableNFTOrder[];\n  };\n\nexport type BuildTxInput =\n  | BuildSwapTxInput\n  | BuildLimitOrderTxInput\n  | BuildNFTOrderTxInput\n  | BuildSwapAndLimitOrderTxInput\n  | BuildSwapAndNFTOrderTxInput;\n\nexport type BuildOptionsBase = {\n  /** @description Allows the API to skip performing onchain checks such as balances, allowances, as well as transaction simulations. The response does not contain `gas` parameter when set to `true` */\n  ignoreChecks?: boolean;\n  /** @description Allows the API to skip gas checks. The response does not contain `gas` parameter when set to `true` */\n  ignoreGasEstimate?: boolean;\n  /** @description Allows the API to skip performing onchain allowance checks. */\n  ignoreAllowance?: boolean;\n  /** @description Allows the API to return the contract parameters only. */\n  onlyParams?: boolean;\n};\n\nexport type BuildOptionsWithGasPrice = BuildOptionsBase & Partial<WithGasPrice>;\nexport type BuildOptionsWitWithMaxFee = BuildOptionsBase & Partial<WithMaxFee>;\n\nexport type BuildOptions = BuildOptionsWithGasPrice | BuildOptionsWitWithMaxFee;\n\ntype BuildTx = (\n  params: BuildTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\nexport type BuildTxFunctions = {\n  buildTx: BuildTx;\n};\n\ntype SearchStringParams = BuildOptions;\n\nexport const constructBuildTx = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildTxFunctions => {\n  const transactionsURL = `${apiURL}/transactions/${chainId}` as const;\n\n  const buildTx: BuildTx = async (params, options = {}, requestParams) => {\n    if (\n      'priceRoute' in params &&\n      'destAmount' in params && // isn't provided together with `orders`\n      !('orders' in params) // when present, destAmount becomes sum(orders[].makerAmount)\n    ) {\n      const {\n        priceRoute,\n        priceRoute: { side },\n      } = params;\n      const AmountMismatchError =\n        side === SwapSide.SELL\n          ? 'Source Amount Mismatch'\n          : 'Destination Amount Mismatch';\n\n      // user provides srcAmount or slippage but not both. so we only validate accordingly.\n      assert(\n        areAmountsCorrect({\n          queryParams: params,\n          side,\n          priceRoute,\n        }),\n        AmountMismatchError\n      );\n    }\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SearchStringParams>(options);\n\n    const fetchURL = `${transactionsURL}/${search}` as const;\n\n    const sanitizedParams =\n      'orders' in params && params.orders.length > 0\n        ? {\n            ...params,\n            //  make sure we don't pass more with orders than API expects\n            orders: params.orders.map((order) => {\n              const sanitizedOrderData =\n                'makerAssetId' in order\n                  ? sanitizeNFTOrderData(order) // assetType is provided here, because Order.*Asset may be address\n                  : // if Order received from API by hash\n                    sanitizeLimitOrderData(order);\n\n              const sanitizedOrder: SwappableOrder = {\n                ...sanitizedOrderData,\n                signature: order.signature,\n              };\n\n              if (order.permitMakerAsset) {\n                sanitizedOrder.permitMakerAsset = order.permitMakerAsset;\n              }\n\n              return sanitizedOrder;\n            }),\n          }\n        : params;\n\n    const takeSurplus =\n      params.takeSurplus ??\n      (params.positiveSlippageToUser !== undefined\n        ? !params.positiveSlippageToUser\n        : undefined);\n\n    if ('positiveSlippageToUser' in sanitizedParams) {\n      // positiveSlippageToUser & takeSurplus together will Error in API\n      delete sanitizedParams.positiveSlippageToUser;\n    }\n    if (takeSurplus !== undefined) {\n      sanitizedParams.takeSurplus = takeSurplus;\n    }\n\n    const fetchParams: FetcherPostInput = {\n      url: fetchURL,\n      method: 'POST',\n      data: sanitizedParams,\n      requestParams,\n    };\n\n    const builtTx = await fetcher<TransactionParams>(fetchParams);\n\n    return builtTx;\n  };\n\n  return { buildTx };\n};\n\ninterface AreAmountsCorrectInput {\n  queryParams: { srcAmount?: string; destAmount?: string; slippage?: number };\n  side: SwapSide;\n  priceRoute: OptimalRate;\n}\n\nfunction areAmountsCorrect({\n  queryParams,\n  side,\n  priceRoute,\n}: AreAmountsCorrectInput): boolean {\n  // return early after a simpler check if the user was swapping before filling\n  if (queryParams.slippage) {\n    return (\n      (side === SwapSide.BUY &&\n        queryParams.destAmount === priceRoute.destAmount) ||\n      (side === SwapSide.SELL && queryParams.srcAmount === priceRoute.srcAmount)\n    );\n  }\n\n  // provided amounts match the previously queried price route\n  const [inputAmount, priceRouteAmount] =\n    side === SwapSide.SELL\n      ? [queryParams.srcAmount, priceRoute.srcAmount]\n      : [queryParams.destAmount, priceRoute.destAmount];\n\n  return inputAmount === priceRouteAmount;\n}\n","import { getRandomInt } from '../../../helpers/misc';\nimport type { Address, APIVersion } from '../../../types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\n\nconst Order = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'address' },\n  { name: 'takerAsset', type: 'address' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  maker: Address;\n  // OrderData.taker must be Augustus (or other Executor) for p2p limitOrders to involve swap through Augustus\n  /** @description actual user taker which will go into nonceAndMeta */\n  taker?: Address;\n  /** @description contract executor (Augustus or similar) that is allowed to execute the order, gois in Order.taker */\n  contractTaker?: Address;\n\n  AugustusAddress: Address;\n  AppVersion: APIVersion;\n}\n\nexport type SignableOrderData = {\n  types: { Order: typeof Order };\n  domain: Domain;\n  data: OrderData;\n};\n\nexport type OrderData = {\n  nonceAndMeta: string;\n  expiry: number;\n  makerAsset: string;\n  takerAsset: string;\n  maker: string;\n  taker: string;\n  makerAmount: string;\n  takerAmount: string;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset,\n  takerAsset,\n  makerAmount,\n  takerAmount,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus (v5) or directly (v6)-- taker = Augustus | _taker, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus or not -- taker = Zero, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS,\n  // if given, overrides the above choices made based on `taker`\n  contractTaker,\n  // for v6 only support taker=_taker for OTC orders\n  AppVersion,\n}: BuildOrderDataInput): SignableOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  let taker: string;\n  // contractTaker overrides always\n  if (contractTaker) {\n    taker = contractTaker;\n  } else if (takerInNonce === ZERO_ADDRESS) {\n    // no takerInNonce -> not p2p order -> allow anyone to fill (not only Augustus)\n    taker = ZERO_ADDRESS;\n  } else {\n    // otherwise for p2p order ->\n    if (AppVersion.startsWith('6.')) {\n      //support 6.1+ versions\n\n      // limit taker to EOA for v6 version (no Arbitrary Token Swaps + OTC Fill, or OTC Fill through AugustusSwapper)\n      taker = takerInNonce;\n    } else {\n      // on v5\n      // -> fill through Augustus only\n      taker = AugustusAddress;\n    }\n  }\n\n  const order: OrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n\n  return {\n    types: { Order },\n    domain: { name, version, chainId, verifyingContract },\n    data: order,\n  };\n}\n","import { DEFAULT_VERSION } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildOrderDataInput,\n  SignableOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildLimitOrderInput = Omit<\n  BuildOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress' | 'AppVersion'\n>;\n\ntype BuildLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  requestParams?: RequestParameters\n) => Promise<SignableOrderData>;\n\nexport type BuildLimitOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildLimitOrder: BuildLimitOrder;\n};\n\nexport const constructBuildLimitOrder = (\n  options: ConstructFetchInput\n): BuildLimitOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildLimitOrder: BuildLimitOrder = async (\n    buildLimitOrderParams,\n    requestParams\n  ) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(requestParams);\n\n    const AppVersion = options.version ?? DEFAULT_VERSION;\n\n    return buildOrderData({\n      ...buildLimitOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n      AppVersion,\n    });\n  };\n\n  return {\n    buildLimitOrder,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignLimitOrderFunctions = {\n  signLimitOrder: (signableOrderData: SignableOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignLimitOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignLimitOrderFunctions => {\n  const signLimitOrder: SignLimitOrderFunctions['signLimitOrder'] = (\n    typedData\n  ) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableOrderData = {\n      ...typedData,\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signLimitOrder };\n};\n","import type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../../types';\nimport { constructGetSpender } from '../swap/spender';\n\nexport type CancelOrder<T> = (\n  orderHash: string,\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type CancelOrderBulk<T> = (\n  orderHashes: string[],\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type CancelLimitOrderFunctions<T> = {\n  cancelLimitOrder: CancelOrder<T>;\n  cancelLimitOrderBulk: CancelOrderBulk<T>;\n};\n\n// much smaller than the whole AugustusRFQ_ABI\nconst MinAugustusRFQAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'cancelOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'orderHashes',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'cancelOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype AvailableMethods = ExtractAbiMethodNames<typeof MinAugustusRFQAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructCancelLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const cancelLimitOrder: CancelOrder<T> = async (\n    orderHash,\n    overrides = {},\n    requestParams\n  ) => {\n    const verifyingContract = await getAugustusRFQ(requestParams);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrder',\n      args: [orderHash],\n      overrides,\n    });\n\n    return res;\n  };\n\n  const cancelLimitOrderBulk: CancelOrderBulk<T> = async (\n    orderHashes,\n    overrides = {},\n    requestParams\n  ) => {\n    const verifyingContract = await getAugustusRFQ(requestParams);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrders',\n      args: [orderHashes],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return {\n    cancelLimitOrder,\n    cancelLimitOrderBulk,\n  };\n};\n","type SplitSignatureResult = {\n  v: number;\n  r: string;\n  s: string;\n  compact: string;\n};\n\nexport function splitSignature(signature: string): SplitSignatureResult {\n  // Remove \"0x\" prefix if present\n  if (signature.startsWith('0x')) {\n    signature = signature.slice(2);\n  }\n\n  // Convert the hex string to a byte array\n  const bytes = new Uint8Array(signature.length / 2);\n  for (let i = 0; i < signature.length; i += 2) {\n    bytes[i / 2] = parseInt(signature.slice(i, i + 2), 16);\n  }\n\n  // Validate the signature length (64 or 65 bytes)\n  if (bytes.length !== 64 && bytes.length !== 65) {\n    throw new Error('Invalid signature length: must be 64 or 65 bytes');\n  }\n\n  // Extract r and s components\n  const r = `0x${Array.from(bytes.slice(0, 32), (b) =>\n    b.toString(16).padStart(2, '0')\n  ).join('')}`;\n  let s: string;\n  let v;\n\n  // Handle 64-byte (EIP-2098 compact) and 65-byte signatures\n  if (bytes.length === 64) {\n    // Extract v from the highest bit of s and clear the bit in s\n    v = 27 + (bytes[32]! >> 7);\n    bytes[32]! &= 0x7f; // Clear the highest bit\n    s = `0x${Array.from(bytes.slice(32, 64))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('')}`;\n  } else {\n    s = `0x${Array.from(bytes.slice(32, 64))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('')}`;\n\n    // Extract v directly for 65-byte signature\n    v = bytes[64]!;\n\n    // Normalize v to canonical form (27 or 28)\n    if (v < 27) {\n      v += 27;\n    }\n  }\n\n  // Compute yParityAndS (_vs) for the compact signature\n  const sBytes = Array.from(bytes.slice(32, 64));\n  if (v === 28) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    sBytes[0]! |= 0x80; // Set the highest bit if v is 28\n  }\n  const yParityAndS = `0x${sBytes\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('')}`;\n\n  // Construct the compact signature by concatenating r and yParityAndS\n  const compactSignature = r + yParityAndS.slice(2);\n\n  return { v, r, s, compact: compactSignature };\n}\n","import { splitSignature } from './signature';\n\ntype EncodeEIP_2612PermitFunctionInput = {\n  permitSignature: string;\n  owner: string;\n  spender: string;\n  value: string | bigint;\n  deadline: string | number | bigint;\n};\n\n// encoding params for Token.permit() Permit1 function\nexport function encodeEIP_2612PermitFunctionInput({\n  owner,\n  spender,\n  value,\n  deadline,\n  permitSignature,\n}: EncodeEIP_2612PermitFunctionInput): string {\n  const { v, r, s } = splitSignature(permitSignature);\n\n  const encodedOwner = encodeAddress(owner);\n  const encodedSpender = encodeAddress(spender);\n  const encodedValue = encodeUint256(value);\n  const encodedDeadline = encodeUint256(deadline.toString());\n  const encodedV = encodeUint8(v);\n  const encodedR = encodeBytes32(r);\n  const encodedS = encodeBytes32(s);\n\n  // Concatenate all encoded values, stripping the \"0x\" prefix from each (except the first one)\n  return (\n    '0x' +\n    [\n      encodedOwner,\n      encodedSpender,\n      encodedValue,\n      encodedDeadline,\n      encodedV,\n      encodedR,\n      encodedS,\n    ]\n      .map((val) => val.slice(2)) // Remove \"0x\" prefix from each encoded value\n      .join('') // Concatenate the values\n  );\n}\n\ntype EncodeDAIlikePermitFunctionInput = {\n  permitSignature: string;\n  holder: string;\n  spender: string;\n  nonce: number | bigint | string;\n  expiry: number | bigint | string;\n};\n\n// encoding params for DAIlike.permit() function\nexport function encodeDAIlikePermitFunctionInput({\n  permitSignature,\n  holder,\n  spender,\n  nonce,\n  expiry,\n}: EncodeDAIlikePermitFunctionInput): string {\n  const { v, r, s } = splitSignature(permitSignature);\n\n  const encodedHolder = encodeAddress(holder);\n  const encodedSpender = encodeAddress(spender);\n  const encodedNonce = encodeUint256(nonce.toString());\n  const encodedExpiry = encodeUint256(expiry.toString());\n  const encodedV = encodeUint8(v);\n  const encodedR = encodeBytes32(r);\n  const encodedS = encodeBytes32(s);\n\n  // Concatenate all encoded values, stripping the \"0x\" prefix from each (except the first one)\n  return (\n    '0x' +\n    [\n      encodedHolder,\n      encodedSpender,\n      encodedNonce,\n      encodedExpiry,\n      encodeBool(true), //allowed=true\n      encodedV,\n      encodedR,\n      encodedS,\n    ]\n      .map((val) => val.slice(2)) // Remove \"0x\" prefix from each encoded value\n      .join('') // Concatenate the values\n  );\n}\n\n// encode an address (20 bytes) into 32 bytes\nexport function encodeAddress(address: string): string {\n  const strippedAddress = address.replace(/^0x/, ''); // Remove \"0x\" prefix\n  return '0x' + strippedAddress.toLowerCase().padStart(64, '0');\n}\n\n// encode a uint256 value\nexport function encodeUint256(value: string | bigint): string {\n  const bn = BigInt(value);\n  return '0x' + bn.toString(16).padStart(64, '0');\n}\n\n// encode a uint8 value\nexport function encodeUint8(value: number | bigint): string {\n  return '0x' + value.toString(16).padStart(64, '0');\n}\n\n// encode a bytes32 value\nexport function encodeBytes32(value: string): string {\n  const strippedValue = value.replace(/^0x/, ''); // Remove \"0x\" prefix\n  return '0x' + strippedValue.padStart(64, '0').toLowerCase();\n}\n\n//encode a boolean\nexport function encodeBool(value: boolean): string {\n  const encodedValue = value ? '1' : '0';\n  // padded to 32 bytes\n  return '0x' + encodedValue.padStart(64, '0');\n}\n\n/* \nconst EIP_2612_PERMIT_ABI = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        name: 'value',\n        type: 'uint256',\n      },\n      {\n        name: 'deadline',\n        type: 'uint256',\n      },\n      {\n        name: 'v',\n        type: 'uint8',\n      },\n      {\n        name: 'r',\n        type: 'bytes32',\n      },\n      {\n        name: 's',\n        type: 'bytes32',\n      },\n    ],\n    name: 'permit',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n]; \n*/\n\n/* \nconst DAI_EIP_2612_PERMIT_ABI = [\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'holder',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'expiry',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bool',\n        name: 'allowed',\n        type: 'bool',\n      },\n      {\n        internalType: 'uint8',\n        name: 'v',\n        type: 'uint8',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'r',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 's',\n        type: 'bytes32',\n      },\n    ],\n    name: 'permit',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n */\n","import type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../../types';\nimport type { OrderData } from './buildOrder';\nimport { constructGetSpender } from '../swap/spender';\nimport { sanitizeOrderData } from './helpers/misc';\nimport {\n  encodeDAIlikePermitFunctionInput,\n  encodeEIP_2612PermitFunctionInput,\n} from '../common/orders/encoding';\n\nexport type FillOrderDirectlyFunctions<T> = {\n  fillOrderDirectly: FillOrderDirectly<T>;\n};\n\ntype TakerPermitEncodedInputParams = {\n  encodedPermitParams: string;\n};\n\ntype TakerPermit1Data = {\n  signature: string;\n  deadline: number | bigint | string;\n  amount?: string;\n  isDaiPermit?: false;\n};\n\ntype TakerDaiPermitData = {\n  signature: string;\n  expiry: number | bigint | string;\n  nonce: number | bigint | string;\n  isDaiPermit: true;\n};\n\ntype TakerPermitObject =\n  | TakerPermitEncodedInputParams\n  | TakerPermit1Data\n  | TakerDaiPermitData;\n\nexport type FillOrderDirectly<T> = (\n  orderFillData: {\n    order: OrderData;\n    signature: string;\n    /** @description Permit1 data or DAI Permit data or Token.parmit() input params encoded; Permit by taker for Taker Asset with AugustusRFQ as spender */\n    takerPermit?: TakerPermitObject;\n  },\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\n// much smaller than the whole AugustusRFQ_ABI\nconst MinAugustusRFQAbi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'nonceAndMeta',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint128',\n            name: 'expiry',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'makerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct AugustusRFQ.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'fillOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'nonceAndMeta',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint128',\n            name: 'expiry',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'makerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct AugustusRFQ.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'takerTokenFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address',\n        name: 'target',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes',\n        name: 'permitTakerAsset',\n        type: 'bytes',\n      },\n      {\n        internalType: 'bytes',\n        name: 'permitMakerAsset',\n        type: 'bytes',\n      },\n    ],\n    name: 'partialFillOrderWithTargetPermit',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'makerTokenFilledAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype FillOrderMethods = ExtractAbiMethodNames<typeof MinAugustusRFQAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport function constructFillOrderDirectly<T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): FillOrderDirectlyFunctions<T> {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const fillOrderDirectly: FillOrderDirectly<T> = async (\n    { order, signature, takerPermit },\n    overrides = {},\n    requestParams\n  ) => {\n    const AugustusRFQ = await getAugustusRFQ(requestParams);\n\n    const sanitizedOrder = sanitizeOrderData(order);\n\n    if (!takerPermit) {\n      const res = await options.contractCaller.transactCall<FillOrderMethods>({\n        address: AugustusRFQ,\n        abi: MinAugustusRFQAbi,\n        contractMethod: 'fillOrder',\n        args: [sanitizedOrder, signature],\n        overrides,\n      });\n\n      return res;\n    }\n\n    let permitTakerAsset: string;\n    if ('encodedPermitParams' in takerPermit) {\n      permitTakerAsset = takerPermit.encodedPermitParams;\n    } else if ('isDaiPermit' in takerPermit && takerPermit.isDaiPermit) {\n      // encoded DAI.permit() function params by taker with AugustusRFQ as spender\n      permitTakerAsset = encodeDAIlikePermitFunctionInput({\n        holder: order.taker,\n        spender: AugustusRFQ,\n        expiry: takerPermit.expiry,\n        nonce: takerPermit.nonce,\n        permitSignature: takerPermit.signature,\n      });\n    } else {\n      // encoded TakerAsset.permit() function params by taker with AugustusRFQ as spender, Permit1 only\n      permitTakerAsset = encodeEIP_2612PermitFunctionInput({\n        owner: order.taker,\n        spender: AugustusRFQ,\n        value: takerPermit.amount || order.takerAmount, // can use permit with a bigger value, fallback to exact Order takerAmount\n        deadline: takerPermit.deadline,\n        permitSignature: takerPermit.signature,\n      });\n    }\n\n    const res = await options.contractCaller.transactCall<FillOrderMethods>({\n      address: AugustusRFQ,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'partialFillOrderWithTargetPermit',\n      args: [\n        sanitizedOrder, // order\n        signature, // order.signature\n        order.takerAmount, // takerTokenFillAmount, can even partially fill\n        order.taker, // target\n        permitTakerAsset,\n        '0x', // permitMakerAsset, unused because hard to account for changing nonce for long running Orders\n      ],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return { fillOrderDirectly };\n}\n","// @TODO getOrder, getOrders from API\n// onchain from contract can't distinguish between filled or cancelled\nimport { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n  GetRequiredAllowanceURL as GetRequiredBalanceURL,\n} from './helpers/misc';\nimport type {\n  LimitOrderFromApi,\n  LimitOrdersApiResponse,\n  LimitOrderType,\n} from './helpers/types';\n\ntype PaginationParams = {\n  limit?: number;\n  offset?: number;\n  hideSmallBalances?: boolean;\n  orderBy?: 'createdAt' | 'updatedAt' | 'expiry';\n};\n\n//                     get orders by `maker` or `taker`\nexport type LimitOrdersUserParams = (\n  | { maker: Address; type: LimitOrderType }\n  | { taker: Address; type: LimitOrderType }\n) &\n  PaginationParams;\n\nexport type GetRequiredAllowanceParams = {\n  maker: Address;\n  token?: Address;\n};\n\ntype GetLimitOrderByHash = (\n  orderHash: string,\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\ntype GetLimitOrders = (\n  userParams: LimitOrdersUserParams,\n  requestParams?: RequestParameters\n) => Promise<LimitOrdersApiResponse>;\n\ntype GetRequiredBalance = (\n  userParams: GetRequiredAllowanceParams,\n  requestParams?: RequestParameters\n) => Promise<Record<string, string>>;\n\nexport type GetLimitOrdersFunctions = {\n  getLimitOrders: GetLimitOrders;\n  getLimitOrderByHash: GetLimitOrderByHash;\n  /**\n   * Gets fillableBalance for tokens from user's active orders.\n   * User needs to have enough balance & allowance to cover active orders before creating new orders.\n   * @param userParams - parameters to get allowance for active orders\n   * @param {string} userParams.maker - user to get required allowances for\n   * @param {string=} userParams.token - if given `token`, the mapping will contain that token address only\n   * @param {RequestParameters=} requestParams - requestParams passed to fetcher, can include {signal: AbortSignal, timeout: for axios, etc.}\n   * @returns `{Lowercase<Address> => wei number as string}` mapping of token to fillableBalance\n   */\n  getRequiredBalance: GetRequiredBalance;\n};\n\nexport const constructGetLimitOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetLimitOrdersFunctions => {\n  const getBaseFetchURLByEntityType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getLimitOrders: GetLimitOrders = async (userParams, requestParams) => {\n    const baseFetchURL = getBaseFetchURLByEntityType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n\n    const { offset, limit, hideSmallBalances, orderBy } = userParams;\n    const search = constructSearchString<PaginationParams>({\n      offset,\n      limit,\n      hideSmallBalances,\n      orderBy,\n    });\n\n    const fetchURL = `${baseFetchURL}/${userURL}${search}` as const;\n\n    const response = await fetcher<LimitOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getRequiredBalance: GetRequiredBalance = async (\n    userParams,\n    requestParams\n  ) => {\n    const baseFetchURL = getBaseFetchURLByEntityType('fillablebalance');\n    const userURL = `${baseFetchURL}/${userParams.maker}` as const;\n    const fetchURL = userParams.token\n      ? (`${userURL}/${userParams.token}` as const)\n      : userURL;\n\n    const response = await fetcher<\n      Record<string, string>,\n      GetRequiredBalanceURL\n    >({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getLimitOrderByHash: GetLimitOrderByHash = async (\n    orderHash,\n    requestParams\n  ) => {\n    const baseFetchURL = getBaseFetchURLByEntityType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<LimitOrderFromApi, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  return {\n    getLimitOrders,\n    getLimitOrderByHash,\n    getRequiredBalance,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  LimitOrderApiResponse,\n  LimitOrderToSend,\n  LimitOrderFromApi,\n  LimitOrderType,\n} from './helpers/types';\n\ntype PostLimitOrder = (\n  limitOrderWithSignatureAndPermit: LimitOrderToSend,\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\n\nexport type PostLimitOrderFunctions = {\n  postLimitOrder: PostLimitOrder;\n  postP2POrder: PostLimitOrder;\n};\n\nexport const constructPostLimitOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostLimitOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    limitOrderWithSignatureAndPermit: LimitOrderToSend,\n    type: LimitOrderType,\n    requestParams?: RequestParameters\n  ): Promise<LimitOrderFromApi> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    const { order: newOrder } = await fetcher<\n      LimitOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: limitOrderWithSignatureAndPermit,\n      requestParams,\n    });\n\n    return newOrder;\n  };\n\n  const postLimitOrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(\n      limitOrderWithSignatureAndPermit,\n      'LIMIT',\n      requestParams\n    );\n  };\n\n  const postP2POrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(\n      limitOrderWithSignatureAndPermit,\n      'P2P',\n      requestParams\n    );\n  };\n\n  return { postLimitOrder, postP2POrder };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetSpender } from '../swap/spender';\n\nexport type ApproveTokenForLimitOrderFunctions<T> = {\n  /** @description approving AugustusRFQ as spender for makerAsset */\n  approveMakerTokenForLimitOrder: ApproveToken<T>;\n  /** @description approving AugustusRFQ as spender for takerAsset to call SDK.fillOrderDirectly */\n  approveTakerTokenForFillingP2POrderDirectly: ApproveToken<T>;\n  /** @description approving AugustusSwapper as spender for takerAsset for Limit Orders that will be executed through it */\n  approveTakerTokenForLimitOrder: ApproveToken<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const approveMakerTokenForLimitOrder: ApproveToken<T> =\n    approveTokenMethodFactory<T>(options.contractCaller, getAugustusRFQ);\n\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveTakerTokenForLimitOrder } =\n    constructApproveToken(options);\n\n  return {\n    approveMakerTokenForLimitOrder,\n    approveTakerTokenForFillingP2POrderDirectly: approveMakerTokenForLimitOrder,\n    approveTakerTokenForLimitOrder,\n  };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetLimitOrdersContractFunctions = {\n  getLimitOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\nexport const constructGetLimitOrdersContract = (\n  options: ConstructFetchInput\n): GetLimitOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getLimitOrdersContract,\n  } = constructGetSpender(options);\n\n  return { getLimitOrdersContract, getTokenTransferProxy };\n};\n","import type { ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport {\n  API_URL,\n  SwapSide,\n  ContractMethod,\n  DEFAULT_VERSION,\n} from '../../constants';\nimport {\n  BuildLimitOrderTxInput,\n  BuildOptions,\n  BuildSwapAndLimitOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { OrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\nimport type { RequestParameters } from '../../types';\n\ntype MinBuildSwapAndLimitOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndLimitOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndLimitOrdersTx = (\n  params: MinBuildSwapAndLimitOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\ntype MinBuildLimitOrderTxInput = Omit<\n  BuildLimitOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildLimitOrdersTx = (\n  params: MinBuildLimitOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\nexport type BuildLimitOrdersTxFunctions = {\n  getLimitOrdersRate: GetLimitOrdersRate;\n  buildLimitOrderTx: BuildLimitOrdersTx;\n  buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx;\n};\n\ntype GetLimitOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\nexport const constructBuildLimitOrderTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildLimitOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    chainId,\n    fetcher,\n    version,\n  });\n\n  const { getRate: getSwapAndLimitOrderRate } = constructGetRate({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow to swap from srcToken to destToken(=order.takerAsset) followed by filling limit orders\n  const getLimitOrdersRate: GetLimitOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    requestParams\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndLimitOrderRate(\n      rateInput,\n      requestParams\n    );\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildLimitOrderTx: BuildLimitOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    const { makerAsset, takerAsset, totalTakerAmount } = checkAndParseOrders(\n      params.orders\n    );\n\n    const fillParams: BuildLimitOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      // no `slippage` in `params`\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: makerAsset,\n    };\n\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n\n  const buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    const { makerAsset } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndLimitOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // which is swapped for makerAsset, that would go towards filling the orders\n      destToken: makerAsset,\n      destDecimals: params.priceRoute.destDecimals,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n    };\n\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n\n  return {\n    getLimitOrdersRate,\n    buildLimitOrderTx,\n    buildSwapAndLimitOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  OrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: OrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset,\n    takerAsset,\n  };\n}\n","import type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildNFTOrderDataInput,\n  SignableNFTOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildNFTOrderInput = Omit<\n  BuildNFTOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress'\n>;\n\ntype BuildNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  requestParams?: RequestParameters\n) => Promise<SignableNFTOrderData>;\n\nexport type BuildNFTOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildNFTOrder: BuildNFTOrder;\n};\n\nexport const constructBuildNFTOrder = (\n  options: ConstructFetchInput\n): BuildNFTOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildNFTOrder: BuildNFTOrder = async (\n    buildNFTOrderParams,\n    requestParams\n  ) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(requestParams);\n\n    return buildOrderData({\n      ...buildNFTOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n    });\n  };\n\n  return {\n    buildNFTOrder,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableNFTOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignNFTOrderFunctions = {\n  signNFTOrder: (signableOrderData: SignableNFTOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignNFTOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignNFTOrderFunctions => {\n  const signNFTOrder: SignNFTOrderFunctions['signNFTOrder'] = (typedData) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableNFTOrderData = {\n      ...typedData,\n      // here assetType isn't provided, SignableData must already have corrent BigIntAsString\n      // @TODO consider using `template_${types}` for Address, likely bad idea when considering 3rd-party code\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signNFTOrder };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport {\n  CancelOrder,\n  CancelOrderBulk,\n  constructCancelLimitOrder,\n} from '../limitOrders/cancelOrder';\n\nexport type CancelNFTOrderFunctions<T> = {\n  cancelNFTOrder: CancelOrder<T>;\n  cancelNFTOrderBulk: CancelOrderBulk<T>;\n};\n\n// should work the same as for LimitOrders\nexport const constructCancelNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelNFTOrderFunctions<T> => {\n  const { cancelLimitOrder, cancelLimitOrderBulk } =\n    constructCancelLimitOrder(options);\n  return {\n    cancelNFTOrder: cancelLimitOrder,\n    cancelNFTOrderBulk: cancelLimitOrderBulk,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n} from './helpers/misc';\nimport type {\n  NFTOrderFromAPI,\n  NFTOrdersApiResponse,\n  NFTOrderType,\n} from './helpers/types';\n\n//                     get orders by `maker` or `taker`\nexport type NFTOrdersUserParams =\n  | { maker: Address; type: NFTOrderType }\n  | { taker: Address; type: NFTOrderType };\ntype GetNFTOrderByHash = (\n  orderHash: string,\n  requestParams?: RequestParameters\n) => Promise<NFTOrderFromAPI>;\ntype GetNFTOrders = (\n  userParams: NFTOrdersUserParams,\n  requestParams?: RequestParameters\n) => Promise<NFTOrdersApiResponse>;\n\nexport type GetNFTOrdersFunctions = {\n  getNFTOrders: GetNFTOrders;\n  getNFTOrderByHash: GetNFTOrderByHash;\n};\n\nexport const constructGetNFTOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetNFTOrdersFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getNFTOrders: GetNFTOrders = async (userParams, requestParams) => {\n    const baseFetchURL = getBaseFetchURLByOrderType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n    const fetchURL = `${baseFetchURL}/${userURL}` as const;\n\n    const response = await fetcher<NFTOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getNFTOrderByHash: GetNFTOrderByHash = async (\n    orderHash,\n    requestParams\n  ) => {\n    const baseFetchURL = getBaseFetchURLByOrderType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<NFTOrderFromAPI, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  return {\n    getNFTOrders,\n    getNFTOrderByHash,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  NFTOrderToSend,\n  NFTOrderType,\n  NFTOrderFromAPI,\n  NFTOrderApiResponse,\n} from './helpers/types';\n\ntype PostNFTOrder = (\n  NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n  requestParams?: RequestParameters\n) => Promise<NFTOrderFromAPI>;\n\nexport type PostNFTOrderFunctions = {\n  postNFTLimitOrder: PostNFTOrder;\n  postNFTP2POrder: PostNFTOrder;\n};\n\nexport const constructPostNFTOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostNFTOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n    type: NFTOrderType,\n    requestParams?: RequestParameters\n  ): Promise<NFTOrderFromAPI> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    // @TODO check API return matches\n    const { order: newOrder } = await fetcher<\n      NFTOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: NFTOrderWithSignatureAndPermit,\n      requestParams,\n    });\n\n    return { ...newOrder };\n  };\n\n  const postNFTLimitOrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(\n      NFTOrderWithSignatureAndPermit,\n      'LIMIT',\n      requestParams\n    );\n  };\n\n  const postNFTP2POrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(NFTOrderWithSignatureAndPermit, 'P2P', requestParams);\n  };\n\n  return { postNFTLimitOrder, postNFTP2POrder };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetNFTOrdersContractFunctions = {\n  getNFTOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\n// should work the same as LimitOrders\nexport const constructGetNFTOrdersContract = (\n  options: ConstructFetchInput\n): GetNFTOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getNFTOrdersContract,\n  } = constructGetSpender(options);\n\n  return {\n    getNFTOrdersContract,\n    getTokenTransferProxy,\n  };\n};\n","import type { ApproveToken } from '../../helpers/approve';\nimport type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../../types';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetNFTOrdersContract } from './getOrdersContract';\n\ntype ApproveNFT<T> = (\n  tokenAddress: Address,\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type ApproveTokenForNFTOrderFunctions<T> = {\n  /** @description approving AugustusSwapper as spender for takerAsset (ERC20) for Limit Orders that will be executed through it */\n  approveERC20ForNFTOrder: ApproveToken<T>;\n  /** @description approving AugustusRFQ as spender for makerAsset (NFT) */\n  approveNFTForNFTOrder: ApproveNFT<T>;\n};\n\nconst MinNFTAbi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        name: '_approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinNFTAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForNFTOrderFunctions<T> => {\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveERC20ForNFTOrder } =\n    constructApproveToken(options);\n\n  const { getNFTOrdersContract } = constructGetNFTOrdersContract(options);\n\n  const approveNFTForNFTOrder: ApproveNFT<T> = async (\n    tokenAddress,\n    overrides = {},\n    requestParams\n  ) => {\n    // @TODO add approvetakerAssetForNFTOrder to use AugustusSwapper as spender if we ever have SELL NFT swaps\n    const AugustusRFQ = await getNFTOrdersContract(requestParams);\n\n    const res = await options.contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinNFTAbi,\n      contractMethod: 'setApprovalForAll',\n      args: [AugustusRFQ, true],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return { approveERC20ForNFTOrder, approveNFTForNFTOrder };\n};\n","import type { Address, ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport {\n  API_URL,\n  SwapSide,\n  ContractMethod,\n  DEFAULT_VERSION,\n} from '../../constants';\nimport {\n  BuildNFTOrderTxInput,\n  BuildOptions,\n  BuildSwapAndNFTOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { BigIntAsString, NFTOrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\nimport type { RequestParameters } from '../../types';\ntype MinBuildSwapAndNFTOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndNFTOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndNFTOrdersTx = (\n  params: MinBuildSwapAndNFTOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\ntype MinBuildNFTOrderTxInput = Omit<\n  BuildNFTOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildNFTOrdersTx = (\n  params: MinBuildNFTOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\nexport type BuildNFTOrdersTxFunctions = {\n  getNFTOrdersRate: GetNFTOrdersRate;\n  buildNFTOrderTx: BuildNFTOrdersTx;\n  buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx;\n};\n\ntype GetNFTOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\nexport const constructBuildNFTOrderTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildNFTOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  const { getRate: getSwapAndNFTOrderRate } = constructGetRate({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow from swap from srcToken to destToken(=order.takerAsset) followed by filling NFT orders\n  const getNFTOrdersRate: GetNFTOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    requestParams\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndNFTOrderRate(rateInput, requestParams);\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildNFTOrderTx: BuildNFTOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    const { takerAsset, totalTakerAmount } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildNFTOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: 'NFT', // support any NFT\n    };\n\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n  const buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndNFTOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n      destToken: 'NFT', // support any NFT,\n      destDecimals: params.priceRoute.destDecimals,\n    };\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n\n  return {\n    getNFTOrdersRate,\n    buildNFTOrderTx,\n    buildSwapAndNFTOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  NFTOrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: NFTOrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset: makerAsset.startsWith('0x')\n      ? makerAsset\n      : uintToAssetAddress(makerAsset),\n    takerAsset: takerAsset.startsWith('0x')\n      ? takerAsset\n      : uintToAssetAddress(takerAsset),\n  };\n}\n\n// extract asset address from makerAsset or takerAsset packed number encoded to contain AssetType\nfunction uintToAssetAddress(assetUint: BigIntAsString): Address {\n  return (\n    '0x' +\n    (BigInt(assetUint) & ((BigInt(1) << BigInt(160)) - BigInt(1))).toString(16)\n  );\n}\n","import type { ExtraFetchParams, FetcherFunction } from '../../types';\nimport type { AxiosStatic } from 'axios';\nimport { FetcherError } from '../misc';\n\nexport type AxiosRequirement = Pick<AxiosStatic, 'request' | 'isAxiosError'>;\n\nexport const constructFetcher =\n  (axios: AxiosRequirement, extra?: ExtraFetchParams): FetcherFunction =>\n  async (params) => {\n    try {\n      const { requestParams, ...rest } = params;\n      // adding apiKey to headers if it's provided\n      const headers = extra?.apiKey\n        ? {\n            'X-API-KEY': extra.apiKey,\n            ...rest.headers,\n            ...requestParams?.headers,\n          }\n        : { ...rest.headers, ...requestParams?.headers };\n\n      const allParams = { ...rest, ...requestParams, headers };\n\n      const { data } = await axios.request(allParams);\n\n      return data;\n    } catch (error: any) {\n      if (axios.isAxiosError(error)) {\n        // attach a more meaningful message and other props\n        throw new FetcherError(error);\n      }\n\n      throw error;\n    }\n  };\n","import type { ExtraFetchParams, FetcherFunction } from '../../types';\nimport { FetcherError } from '../misc';\n\n// @TODO may not work with node-fetch\ntype Fetch = typeof fetch;\n\nexport const constructFetcher =\n  (fetch: Fetch, extra?: ExtraFetchParams): FetcherFunction =>\n  async (params) => {\n    try {\n      const { url, method, requestParams } = params;\n      const body = method === 'POST' ? JSON.stringify(params.data) : null;\n      // Only JSON response for POST requests\n      const POSTheaders =\n        method === 'POST' && body\n          ? {\n              'Content-Type': 'application/json',\n            }\n          : undefined;\n\n      // adding apiKey to headers if it's provided\n      const apiHeaders = extra?.apiKey\n        ? { 'X-API-KEY': extra.apiKey }\n        : undefined;\n\n      // all headers combined\n      const headers =\n        POSTheaders || apiHeaders || params.headers || requestParams?.headers\n          ? {\n              ...apiHeaders,\n              ...POSTheaders,\n              ...params.headers,\n              ...requestParams?.headers,\n            }\n          : undefined;\n\n      const response = await fetch(url, {\n        method,\n        body,\n        ...requestParams,\n        headers,\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // @TODO figure out if this works analogous to AxiosError, especially code ==? status\n        throw new FetcherError({\n          code: String(response.status),\n          response: {\n            data,\n            status: response.status,\n            statusText: response.statusText,\n            headers: Object.fromEntries(response.headers.entries()),\n            config: { url, method },\n          },\n          message: response.statusText,\n          isAxiosError: false,\n        });\n      }\n\n      return data;\n    } catch (error: any) {\n      if (error instanceof FetcherError) throw error;\n      throw new FetcherError(error);\n    }\n  };\n","import type {\n  Address,\n  ContractCallerFunctions,\n  NoExtraKeysCheck,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type {\n  JsonRpcProvider,\n  BaseProvider,\n  JsonRpcSigner,\n} from '@ethersproject/providers';\nimport type { Signer } from '@ethersproject/abstract-signer';\nimport type {\n  Contract as EthersV5Contract,\n  ContractFunction as EthersContractFunctionV5,\n  PopulatedTransaction as EthersPopulatedTransactionV5,\n  PayableOverrides,\n  CallOverrides,\n  ContractTransaction,\n} from '@ethersproject/contracts';\n\nimport type { BigNumber as EthersBigNumberV5 } from '@ethersproject/bignumber';\n\nimport { assert } from 'ts-essentials';\n\nexport interface EthersV5ProviderDeps {\n  ethersProviderOrSigner: BaseProvider | Signer;\n  EthersContract: typeof EthersV5Contract; // passing Contract in allows not to include ethers as dependency\n}\n\nexport const constructEthersV5ContractCaller = (\n  {\n    ethersProviderOrSigner: providerOrSigner,\n    EthersContract: Contract,\n  }: EthersV5ProviderDeps,\n  account?: Address\n): ContractCallerFunctions<ContractTransaction> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new Contract(address, abi, providerOrSigner);\n\n    assertEthersContractHasMethodsV5(contract, contractMethod);\n    // drop keys not in CallOverrides\n    const { block, gas, ...restOverrides } = overrides;\n    // reassign values to keys in CallOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      blockTag: block,\n      gasLimit: gas,\n    };\n\n    // type FinalCallOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalCallOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      CallOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in CallOverrides\n    const callOverrides: FinalCallOverrides = normalizedOverrides;\n    // returns whatever the Contract.method returns: BigNumber, string, boolean\n    return contract.callStatic[contractMethod](...args, callOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<ContractTransaction> = async (\n    params\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const contract = new Contract(address, abi, signer);\n\n    assertEthersContractHasMethodsV5(contract, contractMethod);\n    // drop keys not in PayableOverrides\n    const { gas, from, ...restOverrides } = overrides;\n    // reassign values to keys in PayableOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      gasLimit: gas,\n    };\n\n    // type FinalPayableOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalPayableOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      PayableOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in PayableOverrides\n    const txOverrides: FinalPayableOverrides = normalizedOverrides;\n    const txResponse: ContractTransaction = await contract[contractMethod](\n      ...args,\n      txOverrides\n    );\n\n    return txResponse;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    assert(isTypedDataCapableSigner(signer), 'Signer can sign typed data');\n\n    const { data, domain, types } = typedData;\n\n    return signer._signTypedData(domain, types, data);\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isEthersProvider(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is BaseProvider {\n  return '_isProvider' in providerOrSigner && providerOrSigner._isProvider;\n}\n\nfunction isEthersProviderWithSigner(\n  providerOrSigner: JsonRpcProvider | BaseProvider | Signer\n): providerOrSigner is JsonRpcProvider {\n  return isEthersProvider(providerOrSigner) && 'getSigner' in providerOrSigner;\n}\n\nfunction isEthersSigner(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is Signer {\n  return '_isSigner' in providerOrSigner && providerOrSigner._isSigner;\n}\n\nfunction isTypedDataCapableSigner(\n  signer: Signer\n): signer is Signer & Pick<JsonRpcSigner, '_signTypedData'> {\n  return '_signTypedData' in signer;\n}\n\n/// ethers v5\ntype EthersContractWithMethodV5<T extends string> = EthersV5Contract & {\n  readonly [method in T]: EthersContractFunctionV5;\n} & {\n  readonly functions: { [method in T]: EthersContractFunctionV5 };\n\n  readonly callStatic: { [method in T]: EthersContractFunctionV5 };\n  readonly estimateGas: {\n    [method in T]: EthersContractFunctionV5<EthersBigNumberV5>;\n  };\n  readonly populateTransaction: {\n    [method in T]: EthersContractFunctionV5<EthersPopulatedTransactionV5>;\n  };\n};\n\nfunction ethersContractHasMethodsV5<T extends string>(\n  contract: EthersV5Contract,\n  ...methods: T[]\n): contract is EthersContractWithMethodV5<T> {\n  return methods.every((method) => typeof contract[method] === 'function');\n}\n\nfunction assertEthersContractHasMethodsV5<T extends string>(\n  contract: EthersV5Contract,\n  ...methods: T[]\n): asserts contract is EthersContractWithMethodV5<T> {\n  assert(\n    ethersContractHasMethodsV5(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n","import type {\n  Address,\n  ContractCallerFunctions,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport { assert } from 'ts-essentials';\nimport type {\n  JsonRpcProvider,\n  Signer,\n  ContractRunner,\n  Contract as EthersContract,\n  Overrides,\n  ContractTransactionResponse,\n} from 'ethers';\n\nexport interface EthersV6ProviderDeps {\n  ethersV6ProviderOrSigner: ContractRunner | Signer;\n  EthersV6Contract: typeof EthersContract; // passing Contract in allows not to include ethers as dependency\n}\n\nexport const constructContractCaller = (\n  {\n    ethersV6ProviderOrSigner: providerOrSigner,\n    EthersV6Contract: Contract,\n  }: EthersV6ProviderDeps,\n  account?: Address\n): ContractCallerFunctions<ContractTransactionResponse> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new Contract(address, abi, providerOrSigner);\n\n    // drop keys not in CallOverrides\n    const { block, gas, ...restOverrides } = overrides;\n    // reassign values to keys in CallOverrides\n    const normalizedOverrides: Overrides = {\n      ...restOverrides,\n      blockTag: block,\n      gasLimit: gas,\n    };\n\n    const callableContractFunction = contract.getFunction(contractMethod);\n\n    // returns whatever the Contract[\"method\"].staticCall returns: BigNumber, string, boolean\n    return callableContractFunction.staticCall(...args, normalizedOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<\n    ContractTransactionResponse\n  > = async (params) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? await providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const contract = new Contract(address, abi, signer);\n\n    // drop keys not in PayableOverrides\n    const { gas, from, ...restOverrides } = overrides;\n    // reassign values to keys in PayableOverrides\n    const normalizedOverrides: Overrides = {\n      ...restOverrides,\n      gasLimit: gas,\n    };\n\n    // if no method for contractMethod, ethers will throw\n    const callableContractFunction = contract.getFunction(contractMethod);\n\n    const txResponse = await callableContractFunction.send(\n      ...args,\n      normalizedOverrides\n    );\n\n    return txResponse;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? await providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const { data, domain, types } = typedData;\n\n    return signer.signTypedData(domain, types, data);\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isEthersProviderWithSigner(\n  providerOrSigner: JsonRpcProvider | ContractRunner | Signer\n): providerOrSigner is JsonRpcProvider {\n  return 'getSigner' in providerOrSigner;\n}\n\nfunction isEthersSigner(\n  providerOrSigner: ContractRunner | Signer\n): providerOrSigner is Signer {\n  return 'getAddress' in providerOrSigner;\n}\n","import { assert } from 'ts-essentials';\nimport { TypedDataField } from '../../methods/common/orders/buildOrderData';\n\n// regex from @ethersproject/hash TypedDataEncoder.constructor\n// may be overly strict, but reliable\nconst baseTypeRegex = /^([^\\x5b]*)(\\x5b|$)/;\n\nexport function findPrimaryType(\n  types: Record<string, TypedDataField[]>\n): string {\n  const candidates = Object.keys(types);\n  const candidatesSet = new Set(candidates);\n\n  candidates.forEach((candidate) => {\n    const typedDataFields = types[candidate];\n    if (!typedDataFields) return;\n\n    typedDataFields.forEach(({ type }) => {\n      // Get the base type (drop any array specifiers)\n      const baseType = type.match(baseTypeRegex)?.[1];\n      if (!baseType) return;\n\n      // if type was referred to as a child of another type, it can't be the primaryType\n      candidatesSet.delete(baseType);\n    });\n  });\n\n  const [primaryType] = Array.from(candidatesSet);\n\n  assert(\n    primaryType,\n    `No primary type found in SignableTypedData types, ${JSON.stringify(types)}`\n  );\n\n  return primaryType;\n}\n","import type {\n  Address,\n  ContractCallerFunctions,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type { PayableCallOptions, AbiItem } from 'web3';\nimport type Web3 from 'web3';\nimport type { ContractAbi, Contract as Web3Contract } from 'web3';\nimport type { PayableTxOptions } from 'web3-eth-contract';\nimport { assert } from 'ts-essentials';\nimport { findPrimaryType } from './helpers';\n\ntype ContractMethodRes = ReturnType<Web3ContractSendMethod>;\nexport type Web3UnpromiEvent = Pick<\n  ReturnType<ContractMethodRes['send']>,\n  'on' | 'once'\n>;\n\ntype SendOptions = PayableTxOptions;\ntype CallOptions = PayableCallOptions;\n\nexport const constructContractCaller = (\n  web3: Web3,\n  account?: Address\n): ContractCallerFunctions<Web3UnpromiEvent> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as AbiItem[], // FIXME abi types ethers dependant\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { block, gas, value, ...restOverrides } = overrides;\n\n    const normalizedOverrides: CallOptions = {\n      ...restOverrides,\n      gas: gas?.toString(10),\n      value: value?.toString(10),\n    };\n\n    return contract.methods[contractMethod](...args).call(normalizedOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<Web3UnpromiEvent> = async (\n    params\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to send transactions');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as unknown as AbiItem[], // FIXME\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { gas, from, value, nonce, ...restOverrides } = overrides;\n\n    const _from = from || account;\n\n    assert(_from, 'from is required');\n\n    const normalizedOverrides: SendOptions = {\n      ...restOverrides,\n      from: _from,\n      gas: gas?.toString(10),\n      value: value?.toString(10),\n      nonce: nonce?.toString(10),\n    };\n\n    const preparedCall = contract.methods[contractMethod](...args);\n\n    const promiEvent = preparedCall.send(normalizedOverrides);\n\n    // can't just return promiEvent, because async function returns a Promise<PromiEvent>\n    // and await Promise<PromiEvent> automatically awaits the value of PromiEvent,\n    // that is await Promise<PromiEvent> = Awaited<PromiEvent> that doesn't have .on|once\n    // so that functionality becomes lost\n    // transactCall can be made sync, but approve has to be async to await getSpender()\n    const unpromiEvent: Web3UnpromiEvent = {\n      on: promiEvent.on.bind(promiEvent),\n      once: promiEvent.once.bind(promiEvent),\n    };\n\n    return unpromiEvent;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to sign data');\n\n    const { data, domain, types } = typedData;\n\n    const _typedData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        ...types,\n      },\n      primaryType: findPrimaryType(types),\n      domain,\n      message: data,\n    };\n\n    // account must be among unlocked accounts\n    const signature = await web3.eth.signTypedData(account, _typedData as any);\n    return signature;\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\n/// web3@4\ntype Web3ContractSendMethod = Web3Contract<ContractAbi>['methods'][string];\n\ntype Web3ContractWithMethod<T extends string> = Web3Contract<ContractAbi> & {\n  methods: { [method in T]: Web3ContractSendMethod };\n};\n\nfunction web3ContractHasMethods<T extends string>(\n  contract: Web3Contract<ContractAbi>,\n  ...methods: T[]\n): contract is Web3ContractWithMethod<T> {\n  return methods.every(\n    (method) => typeof contract.methods[method] === 'function'\n  );\n}\n\nfunction assertWeb3ContractHasMethods<T extends string>(\n  contract: Web3Contract<ContractAbi>,\n  ...methods: T[]\n): asserts contract is Web3ContractWithMethod<T> {\n  assert(\n    web3ContractHasMethods(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n","import type {\n  Address,\n  ContractCallerFunctions,\n  ContractCallStaticInput,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport { assert, MarkOptional } from 'ts-essentials';\n\nimport type {\n  PublicActions,\n  WalletActions,\n  Hex,\n  BlockTag,\n  Chain,\n  Transport,\n  TypedDataDomain,\n  Account,\n} from 'viem';\nimport { findPrimaryType } from './helpers';\nimport { TransactionParams } from '../../methods/swap/transaction';\n\nexport type MinViemClient = Partial<\n  Pick<PublicActions<Transport, Chain>, 'readContract'> &\n    Pick<\n      WalletActions<Chain>,\n      'writeContract' | 'signTypedData' | 'signMessage'\n    >\n> & { account?: Account };\n\nexport const constructContractCaller = (\n  viemClient: MinViemClient,\n  account?: Address\n): ContractCallerFunctions<Hex> => {\n  const staticCall: StaticContractCallerFn = async <\n    T,\n    M extends string = string\n  >(\n    params: ContractCallStaticInput<M>\n  ): Promise<T> => {\n    assert(\n      viemClient.readContract,\n      'Viem client must have readContract Public Action'\n    );\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const { block } = overrides;\n\n    const { blockNumber, blockTag } =\n      typeof block === 'number'\n        ? { blockNumber: BigInt(block) }\n        : { blockTag: block as BlockTag };\n\n    const result = viemClient.readContract({\n      account: viemClient.account || (account as Hex),\n      address: address as Hex,\n      abi,\n      functionName: contractMethod,\n      args,\n      blockTag,\n      blockNumber,\n    });\n\n    return result as T; // can't get specific type for generic abi & method\n  };\n\n  const transactCall: TransactionContractCallerFn<Hex> = async (params) => {\n    assert(account, 'account must be specified sign transactions');\n    assert(\n      viemClient.writeContract,\n      'Viem client must have writeContract Wallet Action'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const viemTxParams = txParamsToViemTxParams({\n      ...overrides,\n      to: address,\n      gas: overrides.gas?.toString(10),\n      value: overrides.value?.toString(10),\n    });\n\n    const gasPriceParams =\n      'maxFeePerGas' in viemTxParams\n        ? {\n            maxFeePerGas: viemTxParams.maxFeePerGas,\n            maxPriorityFeePerGas: viemTxParams.maxPriorityFeePerGas,\n          }\n        : 'gasPrice' in viemTxParams\n        ? { gasPrice: viemTxParams.gasPrice }\n        : {};\n\n    const txHash = await viemClient.writeContract({\n      // either `viemClient` has account assigned to it,\n      // or the provider `viemClient` was created with must control `account` (viemClient.getAddresses()[0]===account);\n      // otherwise breaks with ` ProviderError: Unknown account 0x...`\n      account: viemClient.account || (account as Hex),\n      address: address as Hex,\n      abi,\n      functionName: contractMethod,\n      args: argsToViemArgs(args),\n      value: viemTxParams.value,\n      gas: viemTxParams.gas,\n      // ...viemTxParams,\n      // account: (overrides.from || account) as Hex,\n      nonce: overrides.nonce,\n      ...gasPriceParams,\n    });\n\n    return txHash;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      viemClient.signTypedData,\n      'Viem client must have signTypedData Wallet Action'\n    );\n\n    const { data, domain, types } = typedData;\n\n    const primaryType = findPrimaryType(types);\n\n    const chainId =\n      domain.chainId === undefined ? undefined : Number(domain.chainId);\n    const viemDomain: TypedDataDomain = {\n      chainId,\n      name: domain.name,\n      version: domain.version,\n      verifyingContract: domain.verifyingContract as Hex,\n      salt: domain.salt as Hex,\n    };\n\n    const signature = await viemClient.signTypedData({\n      // either `viemClient` has account assigned to it,\n      // or the provider `viemClient` was created with must control `account` (viemClient.getAddresses()[0]===account)\n      account: viemClient.account || (account as Hex),\n      domain: viemDomain,\n      types,\n      primaryType,\n      message: data,\n    });\n\n    return signature;\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\ntype ViemTxParams = {\n  to: Hex;\n  data?: Hex;\n  value?: bigint;\n  nonce?: number;\n  gas?: bigint;\n} & (\n  | { maxFeePerGas?: bigint; maxPriorityFeePerGas?: bigint }\n  | { gasPrice?: bigint }\n);\n\nexport function txParamsToViemTxParams(\n  txParams: Omit<\n    MarkOptional<TransactionParams, 'data' | 'value'>,\n    'chainId' | 'from'\n  >\n): ViemTxParams {\n  const gas = txParams.gas !== undefined ? BigInt(txParams.gas) : undefined;\n  const gasPrice =\n    txParams.gasPrice !== undefined ? BigInt(txParams.gasPrice) : undefined;\n  const maxFeePerGas =\n    txParams.maxFeePerGas !== undefined\n      ? BigInt(txParams.maxFeePerGas)\n      : undefined;\n  const maxPriorityFeePerGas =\n    txParams.maxPriorityFeePerGas !== undefined\n      ? BigInt(txParams.maxPriorityFeePerGas)\n      : undefined;\n\n  const viemTxParams = {\n    to: txParams.to as Hex,\n    data: txParams.data as Hex,\n    value: txParams.value !== undefined ? BigInt(txParams.value) : undefined,\n    gas,\n    ...(txParams.maxFeePerGas !== undefined\n      ? { maxFeePerGas, maxPriorityFeePerGas }\n      : { gasPrice }),\n  };\n  return viemTxParams;\n}\n\nfunction argsToViemArgs(args: any[]): any[] {\n  return args.map((arg) => {\n    if (typeof arg === 'string') {\n      if (arg.startsWith('0x')) {\n        return arg;\n      }\n      const asNumber = Number(arg);\n      if (Number.isNaN(asNumber)) {\n        return arg;\n      }\n      return BigInt(asNumber);\n    }\n    return arg;\n  });\n}\n","import type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport { constructGetSpender } from '../swap/spender';\n\ntype GetDeltaContract = (\n  requestParams?: RequestParameters\n) => Promise<Address | null>;\nexport type GetDeltaContractFunctions = {\n  /** @description returns ParaswapDelta contract address when Delta is available on current chain */\n  getDeltaContract: GetDeltaContract;\n};\n\nexport const constructGetDeltaContract = (\n  options: ConstructFetchInput\n): GetDeltaContractFunctions => {\n  // analogous to getSpender() but for Delta Orders Contract = ParaswapDelta\n\n  const { getContracts } = constructGetSpender(options);\n\n  const getDeltaContract: GetDeltaContract = async (requestParams) => {\n    const { ParaswapDelta } = await getContracts(requestParams);\n    return ParaswapDelta || null;\n  };\n\n  return { getDeltaContract };\n};\n","import { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\n\nexport type PartnerFeeResponse = {\n  partnerFee: number; // in %, e.g. 0.12\n  partnerAddress: string;\n  takeSurplus: boolean;\n};\n\ntype PartnerFeeQueryParams = {\n  partner: string;\n};\n\ntype GetPartnerFee = (\n  options: PartnerFeeQueryParams,\n  requestParams?: RequestParameters\n) => Promise<PartnerFeeResponse>;\n\nexport type GetPartnerFeeFunctions = {\n  getPartnerFee: GetPartnerFee;\n};\n\nexport const constructGetPartnerFee = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetPartnerFeeFunctions => {\n  const partnerFeeUrl = `${apiURL}/prices/partnerfee/${chainId}` as const;\n\n  // going on the assumption that one `partner` will correspond to one `partnerFee` during the lifetime of SDK instance,\n  // to avoid unnecessary network requests\n  const cachedPartnerFee = new Map<string, PartnerFeeResponse>();\n\n  const getPartnerFee: GetPartnerFee = async (options, requestParams) => {\n    if (cachedPartnerFee.has(options.partner)) {\n      return cachedPartnerFee.get(options.partner)!;\n    }\n\n    const search = constructSearchString<PartnerFeeQueryParams>(options);\n\n    const fetchURL = `${partnerFeeUrl}/${search}` as const;\n\n    const data = await fetcher<PartnerFeeResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    cachedPartnerFee.set(options.partner, data);\n\n    return data;\n  };\n\n  return {\n    getPartnerFee,\n  };\n};\n","import { MarkOptional } from 'ts-essentials';\nimport { Domain, ZERO_ADDRESS } from '../../common/orders/buildOrderData';\nimport { Bridge, DeltaAuctionOrder } from './types';\n\n// Order(address owner,address beneficiary,address srcToken,address destToken,uint256 srcAmount,uint256 destAmount,uint256 deadline,uint256 nonce,bytes permit, bridge Bridge)\";\nconst SWAP_ORDER_EIP_712_TYPES = {\n  Order: [\n    { name: 'owner', type: 'address' },\n    { name: 'beneficiary', type: 'address' },\n    { name: 'srcToken', type: 'address' },\n    { name: 'destToken', type: 'address' },\n    { name: 'srcAmount', type: 'uint256' },\n    { name: 'destAmount', type: 'uint256' },\n    { name: 'expectedAmount', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n    { name: 'kind', type: 'uint8' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'partnerAndFee', type: 'uint256' },\n    { name: 'permit', type: 'bytes' },\n    { name: 'metadata', type: 'bytes' },\n    { name: 'bridge', type: 'Bridge' },\n  ],\n  Bridge: [\n    {\n      name: 'protocolSelector',\n      type: 'bytes4',\n    },\n    {\n      name: 'destinationChainId',\n      type: 'uint256',\n    },\n    {\n      name: 'outputToken',\n      type: 'address',\n    },\n    {\n      name: 'scalingFactor',\n      type: 'int8',\n    },\n    {\n      name: 'protocolData',\n      type: 'bytes',\n    },\n  ],\n};\n\nexport type SignableDeltaOrderData = {\n  types: {\n    Order: typeof SWAP_ORDER_EIP_712_TYPES.Order;\n    Bridge: typeof SWAP_ORDER_EIP_712_TYPES.Bridge;\n  };\n  domain: Domain;\n  data: DeltaAuctionOrder;\n};\n\ntype SignDeltaOrderInput = {\n  orderInput: DeltaAuctionOrder;\n  paraswapDeltaAddress: string;\n  chainId: number;\n};\n\nfunction produceDeltaOrderTypedData({\n  orderInput,\n  chainId,\n  paraswapDeltaAddress,\n}: SignDeltaOrderInput): SignableDeltaOrderData {\n  const typedData = {\n    types: {\n      Order: SWAP_ORDER_EIP_712_TYPES.Order,\n      Bridge: SWAP_ORDER_EIP_712_TYPES.Bridge,\n    },\n    domain: {\n      name: 'Portikus',\n      version: '2.0.0',\n      chainId,\n      verifyingContract: paraswapDeltaAddress,\n    },\n    data: orderInput,\n  };\n\n  return typedData;\n}\n\nexport type DeltaOrderDataInput = MarkOptional<\n  Omit<DeltaAuctionOrder, 'partnerAndFee'>,\n  'beneficiary' | 'deadline' | 'nonce' | 'permit'\n>;\n\nexport type BuildDeltaOrderDataInput = MarkOptional<\n  DeltaOrderDataInput,\n  'metadata'\n> & {\n  partnerAddress: string;\n  paraswapDeltaAddress: string;\n  partnerFeeBps: number;\n  partnerTakesSurplus?: boolean;\n  chainId: number;\n  bridge: Bridge;\n};\n\n// default deadline = 1 hour for now (may be changed later)\nexport const DELTA_DEFAULT_EXPIRY = 60 * 60; // seconds\n\nexport function buildDeltaSignableOrderData({\n  owner,\n  beneficiary = owner,\n\n  srcToken,\n  destToken,\n  srcAmount,\n  destAmount,\n  expectedAmount,\n\n  deadline = Math.floor(Date.now() / 1000 + DELTA_DEFAULT_EXPIRY),\n  nonce = Date.now().toString(10), // random enough to not cause collisions\n\n  permit = '0x',\n\n  kind,\n  metadata = '0x',\n\n  partnerAddress,\n  partnerFeeBps,\n  partnerTakesSurplus = false,\n\n  chainId,\n  paraswapDeltaAddress,\n  bridge,\n}: BuildDeltaOrderDataInput): SignableDeltaOrderData {\n  const orderInput: DeltaAuctionOrder = {\n    owner,\n    beneficiary,\n    srcToken,\n    destToken,\n    srcAmount,\n    destAmount,\n    expectedAmount,\n    deadline,\n    nonce,\n    permit,\n    partnerAndFee: producePartnerAndFee({\n      partnerFeeBps,\n      partnerAddress,\n      partnerTakesSurplus,\n    }),\n    bridge,\n    kind,\n    metadata,\n  };\n\n  return produceDeltaOrderTypedData({\n    orderInput,\n    chainId,\n    paraswapDeltaAddress,\n  });\n}\n\ntype ProducePartnerAndFeeInput = {\n  partnerFeeBps: number;\n  partnerAddress: string;\n  partnerTakesSurplus: boolean;\n};\n\n// fee and address are encoded together\nfunction producePartnerAndFee({\n  partnerFeeBps,\n  partnerAddress,\n  partnerTakesSurplus,\n}: ProducePartnerAndFeeInput): string {\n  if (partnerAddress === ZERO_ADDRESS) return '0';\n\n  const partnerAndFee =\n    (BigInt(partnerAddress) << BigInt(96)) |\n    BigInt(partnerFeeBps.toFixed(0)) |\n    (BigInt(partnerTakesSurplus) << BigInt(8));\n\n  return partnerAndFee.toString(10);\n}\n","import { SwapSide } from '../../../constants';\n\nenum OrderKind {\n  Sell = 0,\n  Buy = 1,\n}\n\nexport const SwapSideToOrderKind = {\n  [SwapSide.SELL]: OrderKind.Sell,\n  [SwapSide.BUY]: OrderKind.Buy,\n} as const;\n\nexport type DeltaAuctionOrder = {\n  /** @description The address of the order owner */\n  owner: string;\n  /** @description The address of the order beneficiary */\n  beneficiary: string; // beneficiary==owner if no transferTo\n  /** @description The address of the src token */\n  srcToken: string; // lowercase\n  /** @description The address of the dest token */\n  destToken: string; // lowercase\n  /** @description The amount of src token to swap */\n  srcAmount: string; // wei\n  /** @description The minimum amount of dest token to receive */\n  destAmount: string; // wei\n  /** @description The expected amount of token to receive */\n  expectedAmount: string; // wei\n  /** @description The kind of the order */\n  kind: OrderKind;\n  /** @description Metadata for the order, hex string */\n  metadata: string;\n  /** @description The deadline for the order */\n  deadline: number; // seconds\n  /** @description The nonce of the order */\n  nonce: string; // can be random, can even be Date.now()\n  /** @description Optional permit signature for the src token */\n  permit: string; //can be \"0x\"\n  /** @description Encoded partner address, fee bps, and flags for the order. partnerAndFee = (partner << 96) | (partnerTakesSurplus << 8) | fee in bps (max fee is 2%) */\n  partnerAndFee: string;\n  /** @description The bridge input */\n  bridge: Bridge;\n};\n\nexport type Bridge = {\n  protocolSelector: string; // Hex string\n  destinationChainId: number;\n  /** @description The address of the output token. Same as Order.destToken but on destination chain, so can still be a different address */\n  outputToken: string;\n  scalingFactor: number;\n\n  /** @description Data specific to the protocol */\n  protocolData: string; // Hex string\n};\n\nexport type DeltaAuctionStatus =\n  | 'NOT_STARTED'\n  | 'RUNNING'\n  | 'EXECUTING'\n  | 'EXECUTED'\n  | 'FAILED'\n  | 'EXPIRED'\n  | 'CANCELLED'\n  | 'SUSPENDED';\n\ntype DeltaAuctionTransaction = {\n  id: string;\n  hash: string;\n  orderId: string;\n  bidId: string | null;\n  blockNumber: number;\n  blockHash: string;\n  gasUsed: bigint;\n  gasPrice: bigint;\n  blobGasUsed: bigint;\n  blobGasPrice: bigint;\n  index: number;\n  status: number;\n  from: string;\n  to: string;\n  receivedAmount: string;\n  receivedAmountUSD: number;\n  spentAmount: string;\n  spentAmountUSD: number;\n  filledPercent: number; // in base points\n  protocolFee: string;\n  partnerFee: string;\n  agent: string;\n  auctionId: string;\n};\n\nexport type DeltaAuction = {\n  id: string;\n  deltaVersion: string; // 1.0 or 2.0 currently\n  user: string;\n  signature: string;\n  status: DeltaAuctionStatus;\n  order: DeltaAuctionOrder;\n  orderHash: string | null; // not available on old Orders only\n  transactions: DeltaAuctionTransaction[];\n  chainId: number;\n  partner: string;\n  referrerAddress: string | null;\n  expiresAt: string;\n  createdAt: string;\n  updatedAt: string;\n  partiallyFillable: boolean;\n\n  excludeAgents: string[] | null;\n  includeAgents: string[] | null;\n\n  bridgeMetadata: BridgeMetadata | null;\n  bridgeStatus: BridgeStatus | null;\n\n  // @TODO only returned after POST Order so far\n  // orderVersion: string; // \"2.0.0\"\n  // deltaGasOverhead: number;\n\n  type: 'MARKET' | 'LIMIT'; // @TODO when available in API for individual /order/:hash|:id\n};\n\nexport type BridgeMetadata = {\n  /** @description The amount that user should expect to get */\n  outputAmount: string;\n  /** @description The cross-chain deadline. If deadline passes, the bridgeStatus would be expired */\n  fillDeadline: number;\n  /** @description The deposit id */\n  depositId: number;\n  /** @description The transaction hash on the destination chain that fulfilled the order. When bridgeStatus='filled' */\n  fillTx?: string;\n  /** @description The transaction hash on the source chain that refunded the deposit. When bridgeStatus='refunded' */\n  depositRefundTxHash?: string;\n};\n\n//                                                             refunded is basically failed\nexport type BridgeStatus = 'pending' | 'filled' | 'expired' | 'refunded';\n\n//// available on BridgePrice ////\n\n// so far\ntype ProtocolName = 'Across' | 'StargateBus' | 'StargateTaxi';\n\ntype BridgeQuoteFee = {\n  feeToken: string;\n  amount: string;\n  amountInSrcToken: string;\n  amountInUSD: string;\n};\n\nexport type BridgePriceInfo = {\n  protocolName: ProtocolName;\n  destAmountAfterBridge: string;\n  destUSDAfterBridge: string;\n  fees: BridgeQuoteFee[];\n  estimatedTimeMs: number;\n};\n","import type {\n  ConstructFetchInput,\n  EnumerateLiteral,\n  RequestParameters,\n} from '../../types';\nimport { constructGetDeltaContract } from './getDeltaContract';\nimport { BridgePrice } from './getDeltaPrice';\nimport { constructGetPartnerFee } from './getPartnerFee';\nimport {\n  buildDeltaSignableOrderData,\n  type BuildDeltaOrderDataInput,\n  type SignableDeltaOrderData,\n} from './helpers/buildDeltaOrderData';\nimport { SwapSideToOrderKind } from './helpers/types';\nimport { BeneficiaryType } from '../common/orders/types';\nimport { SwapSide } from '../../constants';\nexport type { SignableDeltaOrderData } from './helpers/buildDeltaOrderData';\n\nexport type SwapSideUnion = EnumerateLiteral<typeof SwapSide>;\n\nexport type BuildDeltaOrderDataParams = {\n  /** @description The address of the order owner */\n  owner: string;\n  /** @description The address of the order beneficiary */\n  beneficiary?: string; // beneficiary==owner if no transferTo\n  /** @description The address of the src token */\n  srcToken: string; // lowercase\n  /** @description The address of the dest token. For Crosschain Order - destination token on the destination chain */\n  destToken: string; // lowercase\n  /** @description The amount of src token to swap */\n  srcAmount: string; // wei\n  /** @description The minimum amount of dest token to receive */\n  destAmount: string; // wei, deltaPrice.destAmount - slippage\n  /** @description The deadline for the order */\n  deadline?: number; // seconds\n  /** @description The nonce of the order */\n  nonce?: number | string; // can be random, can even be Date.now()\n  /** @description Optional permit signature for the src token https://developers.velora.xyz/api/velora-api/velora-delta-api/build-a-delta-order-to-sign#supported-permits-order#supported-permits */\n  permit?: string; //can be \"0x\"\n  /** @description Partner string. */\n  partner?: string;\n\n  /** @description Destination Chain ID for Crosschain Orders */\n  destChainId?: number;\n  /** @description Whether the beneficiary is a contract. Needed to automatically fill in crosschain Bridge */\n  beneficiaryType?: BeneficiaryType;\n\n  /** @description price response received from /delta/prices (getDeltaPrice method) */\n  deltaPrice: Pick<\n    BridgePrice,\n    | 'destAmount'\n    | 'partner'\n    | 'partnerFee'\n    | 'destToken'\n    | 'srcAmount'\n    | 'bridge'\n  >;\n\n  /** @description partner fee in basis points (bps), 50bps=0.5% */\n  partnerFeeBps?: number;\n  /** @description partner address */\n  partnerAddress?: string;\n  /** @description take surplus */\n  partnerTakesSurplus?: boolean;\n\n  /** @description The side of the order. Default is SELL */\n  side?: SwapSideUnion;\n  /** @description Metadata for the order, hex string */\n  metadata?: string;\n};\n\ntype BuildDeltaOrder = (\n  buildOrderParams: BuildDeltaOrderDataParams,\n  requestParams?: RequestParameters\n) => Promise<SignableDeltaOrderData>;\n\nexport type BuildDeltaOrderFunctions = {\n  /** @description Build Orders to be posted to Delta API for execution */\n  buildDeltaOrder: BuildDeltaOrder;\n};\n\nexport const constructBuildDeltaOrder = (\n  options: ConstructFetchInput\n): BuildDeltaOrderFunctions => {\n  const { chainId } = options;\n\n  // cached internally\n  const { getDeltaContract } = constructGetDeltaContract(options);\n  // cached internally for `partner`\n  const { getPartnerFee } = constructGetPartnerFee(options);\n\n  const buildDeltaOrder: BuildDeltaOrder = async (options, requestParams) => {\n    const ParaswapDelta = await getDeltaContract(requestParams);\n    if (!ParaswapDelta) {\n      throw new Error(`Delta is not available on chain ${chainId}`);\n    }\n\n    ////// Partner logic //////\n\n    // externally supplied partner fee data takes precedence\n    let partnerAddress = options.partnerAddress;\n    let partnerFeeBps =\n      options.partnerFeeBps ?? options.deltaPrice.partnerFee * 100;\n    let partnerTakesSurplus = options.partnerTakesSurplus;\n\n    // if fee given, takeSurplus is ignored\n    const feeOrTakeSurplusSupplied =\n      partnerFeeBps !== undefined || partnerTakesSurplus !== undefined;\n\n    if (partnerAddress === undefined || feeOrTakeSurplusSupplied) {\n      const partner = options.partner || options.deltaPrice.partner;\n      const partnerFeeResponse = await getPartnerFee(\n        { partner },\n        requestParams\n      );\n\n      partnerAddress = partnerAddress ?? partnerFeeResponse.partnerAddress;\n      // deltaPrice.partnerFee and partnerFeeResponse.partnerFee should be the same, but give priority to externally provided\n      partnerFeeBps = partnerFeeBps ?? partnerFeeResponse.partnerFee;\n      partnerTakesSurplus =\n        partnerTakesSurplus ?? partnerFeeResponse.takeSurplus;\n    }\n\n    const swapSide = options.side ?? SwapSide.SELL;\n\n    const expectedAmount =\n      swapSide === SwapSide.SELL\n        ? options.deltaPrice.destAmount\n        : options.deltaPrice.srcAmount;\n\n    const input: BuildDeltaOrderDataInput = {\n      owner: options.owner,\n      beneficiary: options.beneficiary,\n      srcToken: options.srcToken,\n      // for some cases of WETH->ETH crosschain swaps, the destToken is changed to WETH or ETH,\n      // this is already reflected in deltaPrice\n      destToken: options.deltaPrice.destToken,\n      srcAmount: options.srcAmount,\n      destAmount: options.destAmount,\n      expectedAmount,\n      deadline: options.deadline,\n      nonce: options.nonce?.toString(10),\n      permit: options.permit,\n      kind: SwapSideToOrderKind[swapSide],\n      metadata: options.metadata,\n\n      chainId,\n      paraswapDeltaAddress: ParaswapDelta,\n      partnerAddress,\n      partnerTakesSurplus,\n      partnerFeeBps,\n\n      bridge: options.deltaPrice.bridge, // ZERO_BRIDGE for same-chain Orders\n    };\n\n    return buildDeltaSignableOrderData(input);\n  };\n\n  return {\n    buildDeltaOrder,\n  };\n};\n","import { assert } from 'ts-essentials';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { BridgePrice } from './getDeltaPrice';\n// import { constructGetMulticallHandlers } from './getMulticallHandlers';\nimport {\n  // getDeltaBridge,\n  GetDeltaBridgeAndDestTokenOutput,\n} from './helpers/across';\nimport { BeneficiaryType } from '../common/orders/types';\nexport type { SignableDeltaOrderData } from './helpers/buildDeltaOrderData';\n\nexport type BuildCrosschainOrderBridgeParams = {\n  /** @description The address of the destination token on the destination chain */\n  destToken: string; // lowercase\n  /** @description Destination Chain ID for Crosschain Orders */\n  destChainId: number;\n  /** @description Whether the beneficiary is a contract. Needed to automatically fill in crosschain Bridge */\n  beneficiaryType: BeneficiaryType;\n\n  /** @description price response received from /delta/prices (getDeltaPrice method) */\n  deltaPrice: BridgePrice;\n};\n\ntype BuildCrosschainOrderBridge = (\n  buildOrderParams: BuildCrosschainOrderBridgeParams,\n  requestParams?: RequestParameters\n) => Promise<GetDeltaBridgeAndDestTokenOutput>;\n\nexport { GetDeltaBridgeAndDestTokenOutput as CrosschainOrderBridgeAndChanges };\n\nexport type BuildCrosschainOrderBridgeFunctions = {\n  /** @description Build Orders to be posted to Delta API for execution */\n  buildCrosschainOrderBridge: BuildCrosschainOrderBridge;\n};\n\nexport const constructBuildCrosschainOrderBridge = (\n  options: ConstructFetchInput\n): BuildCrosschainOrderBridgeFunctions => {\n  const { chainId } = options;\n\n  // cached internally for `multicall` contracts\n  // const { getMulticallHandlers } = constructGetMulticallHandlers(options);\n\n  const buildCrosschainOrderBridge: BuildCrosschainOrderBridge = async (\n    { destToken, destChainId, beneficiaryType, deltaPrice },\n    requestParams\n  ) => {\n    assert(\n      chainId !== deltaPrice.bridge.destinationChainId,\n      '`deltaPrice.bridge.destinationChainId` must be different from `chainId` for crosschain Order.bridge'\n    );\n\n    assert(\n      destChainId === deltaPrice.bridge.destinationChainId,\n      '`destChainId` must match `deltaPrice.bridge.destinationChainId` for crosschain Order.bridge'\n    );\n\n    /* const getMulticallHandler = async (chainId: number) => {\n      const multicallHandlersMap = await getMulticallHandlers(requestParams);\n      const multicallHandler = multicallHandlersMap[chainId];\n\n      assert(\n        multicallHandler,\n        `Multicall handler not found for chain ${chainId}`\n      );\n\n      return multicallHandler;\n    };\n\n    const { bridge } = await getDeltaBridge({\n      destTokenDestChain: destToken,\n      destChainId,\n      bridgeFee: deltaPrice.bridgeFee,\n      bridgeOutputToken: deltaPrice.bridge.outputToken,\n      beneficiaryType,\n      getMulticallHandler,\n    }); */\n\n    // @TODO remove the whole buildCrosschainOrderBridge() when API provides BridgePrice.bridge = whole Bridge object\n    const bridge = {\n      protocolSelector: '0x00000000',\n      scalingFactor: 0,\n      protocolData: '0x',\n      destinationChainId: deltaPrice.bridge.destinationChainId,\n      outputToken: deltaPrice.bridge.outputToken,\n    };\n\n    return {\n      bridge,\n    };\n  };\n\n  return {\n    buildCrosschainOrderBridge,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { DeltaAuctionOrder, DeltaAuction } from './helpers/types';\n\nexport type DeltaOrderToPost = {\n  /** @description Partner string */\n  partner?: string;\n  /** @description Referrer address */\n  referrerAddress?: string;\n  order: DeltaAuctionOrder;\n  /** @description Signature of the order from order.owner address. EOA signatures must be submitted in ERC-2098 Compact Representation. */\n  signature: string;\n  chainId: number;\n  /** @description designates the Order as being able to partially filled, as opposed to fill-or-kill */\n  partiallyFillable?: boolean;\n\n  /** @description Type of the order. MARKET or LIMIT. Default is MARKET */\n  type?: 'MARKET' | 'LIMIT';\n\n  includeAgents?: string[];\n  excludeAgents?: string[];\n};\n\nexport type PostDeltaOrderParams = Omit<DeltaOrderToPost, 'chainId'>;\n\nexport type DeltaOrderApiResponse = Omit<DeltaAuction, 'transactions'> & {\n  orderVersion: string; // \"2.0.0\"\n  deltaGasOverhead: number; // @TODO may be removed\n  type: 'MARKET' | 'LIMIT';\n};\n\ntype PostDeltaOrder = (\n  postData: PostDeltaOrderParams,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderApiResponse>;\n\nexport type PostDeltaOrderFunctions = {\n  postDeltaOrder: PostDeltaOrder;\n};\n\nexport const constructPostDeltaOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostDeltaOrderFunctions => {\n  const postOrderUrl = `${apiURL}/delta/orders` as const;\n\n  const postDeltaOrder: PostDeltaOrder = (postData, requestParams) => {\n    const deltaOrderToPost: DeltaOrderToPost = { ...postData, chainId };\n\n    return fetcher<DeltaOrderApiResponse>({\n      url: postOrderUrl,\n      method: 'POST',\n      data: deltaOrderToPost,\n      requestParams,\n    });\n  };\n\n  return { postDeltaOrder };\n};\n","import type { SignableDeltaOrderData } from './buildDeltaOrderData';\n\nexport function sanitizeDeltaOrderData({\n  owner,\n  beneficiary,\n  srcToken,\n  destToken,\n  srcAmount,\n  destAmount,\n  expectedAmount,\n  deadline,\n  nonce,\n  permit,\n  partnerAndFee,\n  bridge,\n  kind,\n  metadata,\n}: SignableDeltaOrderData['data'] &\n  Record<string, any>): SignableDeltaOrderData['data'] {\n  return {\n    owner,\n    beneficiary,\n    srcToken,\n    destToken,\n    srcAmount,\n    destAmount,\n    expectedAmount,\n    deadline,\n    nonce,\n    permit,\n    partnerAndFee,\n    bridge,\n    kind,\n    metadata,\n  };\n}\n","import type { ConstructProviderFetchInput } from '../../types';\nimport { SignableDeltaOrderData } from './helpers/buildDeltaOrderData';\nimport { sanitizeDeltaOrderData } from './helpers/misc';\n\nexport type SignLimitOrderFunctions = {\n  signLimitOrder: (\n    signableOrderData: SignableDeltaOrderData\n  ) => Promise<string>;\n};\n\ntype SignDeltaOrder = (\n  signableOrderData: SignableDeltaOrderData\n) => Promise<string>;\n\nexport type SignDeltaOrderFunctions = {\n  signDeltaOrder: SignDeltaOrder;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignDeltaOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignDeltaOrderFunctions => {\n  const signDeltaOrder: SignDeltaOrder = async (typedData) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableDeltaOrderData = {\n      ...typedData,\n      data: sanitizeDeltaOrderData(typedData.data),\n    };\n    const signature = await options.contractCaller.signTypedDataCall(\n      typedDataOnly\n    );\n\n    return signature;\n  };\n\n  return { signDeltaOrder };\n};\n","import { Bridge } from '../..';\nimport { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  EnumerateLiteral,\n  RequestParameters,\n} from '../../types';\nimport { ZERO_ADDRESS } from '../common/orders/buildOrderData';\nimport { BridgePriceInfo } from './helpers/types';\n\ntype SwapSideUnion = EnumerateLiteral<typeof SwapSide>;\n\nexport type DeltaPriceParams = {\n  /** @description Source Token Address. Not Native Token */\n  srcToken: string;\n  /** @description Destination Token Address */\n  destToken: string;\n  /** @description srcToken amount in wei */\n  amount: string;\n  /** @description Source Token Decimals */\n  srcDecimals: number;\n  /** @description Destination Token Decimals */\n  destDecimals: number;\n  /** @description User's Wallet Address */\n  userAddress?: string;\n  /** @description Beneficiary Address */\n  beneficiary?: string; // beneficiary==owner if no transferTo\n  /** @description Partner string. */\n  partner?: string;\n  /** @description Destination Chain ID for Crosschain Orders */\n  destChainId?: number;\n  /** @description SELL or BUY, default is SELL */\n  side?: SwapSideUnion;\n\n  includeAgents?: string[];\n  excludeAgents?: string[];\n};\n\ntype DeltaPriceQueryOptions = Omit<\n  DeltaPriceParams,\n  'includeAgents' | 'excludeAgents'\n> & {\n  chainId: number; // will return error from API on unsupported chains\n  includeAgents?: string;\n  excludeAgents?: string;\n};\n\n// for same-chain Orders, all 0 params\nexport const DEFAULT_BRIDGE = {\n  protocolSelector: '0x00000000', // 4 bytes\n  destinationChainId: 0,\n  outputToken: ZERO_ADDRESS,\n  scalingFactor: 0,\n  protocolData: '0x',\n} as const satisfies Bridge;\n\nexport type DeltaPrice = {\n  srcToken: string;\n  destToken: string;\n  srcAmount: string;\n  /** @description Available for BUY side */\n  srcAmountBeforeFee?: string;\n  destAmount: string;\n  /** @description Available for SELL side */\n  destAmountBeforeFee?: string;\n  gasCost: string;\n  gasCostBeforeFee: string;\n  gasCostUSD: string;\n  gasCostUSDBeforeFee: string;\n  srcUSD: string;\n  /** @description Available for BUY side */\n  srcUSDBeforeFee?: string;\n  destUSD: string;\n  /** @description Available for SELL side */\n  destUSDBeforeFee?: string;\n  partner: string;\n  partnerFee: number; // in %\n  hmac: string;\n  bridge: Bridge; // for single-chain DeltaPrice, it's DEFAULT_BRIDGE\n};\n\nexport type BridgePrice = Omit<DeltaPrice, 'bridge'> & {\n  // destAmountAfterBridge: string; // became bridgeInfo.destAmountAfterBridge\n  // destUSDAfterBridge: string; // became bridgeInfo.destUSDAfterBridge\n  // bridgeFee: string; // became bridgeInfo.fees[0].amount\n  // bridgeFeeUSD: string; // became bridgeInfo.fees[0].amountInUSD\n  // poolAddress: string;\n  bridge: Bridge;\n  bridgeInfo: BridgePriceInfo;\n};\n\ntype DeltaPriceResponse = {\n  price: DeltaPrice | BridgePrice;\n  deltaAddress: string;\n};\n\ninterface GetDeltaPrice {\n  (\n    options: DeltaPriceParams & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<BridgePrice>;\n  (\n    options: DeltaPriceParams & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice>;\n  (options: DeltaPriceParams, requestParams?: RequestParameters): Promise<\n    DeltaPrice | BridgePrice\n  >;\n}\n\nexport type GetDeltaPriceFunctions = {\n  getDeltaPrice: GetDeltaPrice;\n};\n\nexport const constructGetDeltaPrice = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetDeltaPriceFunctions => {\n  const pricesUrl = `${apiURL}/delta/prices` as const;\n\n  async function getDeltaPrice(\n    options: DeltaPriceParams & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<BridgePrice>;\n  async function getDeltaPrice(\n    options: DeltaPriceParams & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice>;\n  async function getDeltaPrice(\n    options: DeltaPriceParams,\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice | BridgePrice>;\n  async function getDeltaPrice(\n    options: DeltaPriceParams,\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice | BridgePrice> {\n    const { includeAgents, excludeAgents, ...rest } = options;\n    const includeAgentsString = includeAgents\n      ? includeAgents.join(',')\n      : undefined;\n    const excludeAgentsString = excludeAgents\n      ? excludeAgents.join(',')\n      : undefined;\n\n    const search = constructSearchString<DeltaPriceQueryOptions>({\n      ...rest,\n      chainId,\n      side: options.side ?? SwapSide.SELL,\n      includeAgents: includeAgentsString,\n      excludeAgents: excludeAgentsString,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<DeltaPriceResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.price;\n  }\n\n  return {\n    getDeltaPrice,\n  };\n};\n","import { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport type { DeltaAuction } from './helpers/types';\n\nexport type DeltaOrderFromAPI = Omit<DeltaAuction, 'signature'>;\n\ntype GetDeltaOrderById = (\n  orderId: string,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderFromAPI>;\n\ntype GetDeltaOrderByHash = (\n  orderHash: string,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderFromAPI>;\n\ntype OrdersFilter = {\n  /** @description Order.owner to fetch Delta Order for */\n  userAddress: Address;\n  /** @description Pagination option, page. Default 1 */\n  page?: number;\n  /** @description Pagination option, limit. Default 100 */\n  limit?: number;\n  /** @description Filter by chainId, without this filter, orders from all chains are returned */\n  chainId?: number; // @TODO currently not working\n  /** @description Filter by type. MARKET, LIMIT, or ALL. Default is ALL */\n  type?: 'MARKET' | 'LIMIT' | 'ALL';\n};\ntype OrderFiltersQuery = OrdersFilter;\n\ntype GetDeltaOrders = (\n  options: OrdersFilter,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderFromAPI[]>;\n\ntype GetRequiredBalanceParams = {\n  userAddress: Address;\n  tokenAddress?: Address;\n};\n\ntype GetRequiredBalance = (\n  userParams: GetRequiredBalanceParams,\n  requestParams?: RequestParameters\n) => Promise<Record<string, string>>; // token -> balance in Limit Orders\n\nexport type GetDeltaOrdersFunctions = {\n  getDeltaOrderById: GetDeltaOrderById;\n  getDeltaOrderByHash: GetDeltaOrderByHash;\n  getDeltaOrders: GetDeltaOrders;\n  getRequiredBalanceForDeltaLimitOrders: GetRequiredBalance;\n};\n\nexport const constructGetDeltaOrders = ({\n  apiURL = API_URL,\n  fetcher,\n  chainId,\n}: ConstructFetchInput): GetDeltaOrdersFunctions => {\n  const baseUrl = `${apiURL}/delta/orders` as const;\n\n  const getDeltaOrderById: GetDeltaOrderById = async (\n    orderId,\n    requestParams\n  ) => {\n    const fetchURL = `${baseUrl}/${orderId}` as const;\n\n    const order = await fetcher<DeltaOrderFromAPI>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  const getDeltaOrderByHash: GetDeltaOrderByHash = async (\n    orderHash,\n    requestParams\n  ) => {\n    const fetchURL = `${baseUrl}/hash/${orderHash}` as const;\n\n    const order = await fetcher<DeltaOrderFromAPI>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  const getDeltaOrders: GetDeltaOrders = async (options, requestParams) => {\n    const search = constructSearchString<OrderFiltersQuery>({\n      userAddress: options.userAddress,\n      page: options.page,\n      limit: options.limit,\n      chainId: options.chainId,\n      type: options.type,\n    });\n\n    const fetchURL = `${baseUrl}${search}` as const;\n\n    const orders = await fetcher<DeltaOrderFromAPI[]>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return orders;\n  };\n\n  const getRequiredBalanceForDeltaLimitOrders: GetRequiredBalance = async (\n    userParams,\n    requestParams\n  ) => {\n    const userURL =\n      `${baseUrl}/fillablebalance/${chainId}/${userParams.userAddress}` as const;\n    const fetchURL = userParams.tokenAddress\n      ? (`${userURL}/${userParams.tokenAddress}` as const)\n      : userURL;\n\n    const response = await fetcher<Record<string, string>>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return response;\n  };\n\n  return {\n    getDeltaOrderById,\n    getDeltaOrderByHash,\n    getDeltaOrders,\n    getRequiredBalanceForDeltaLimitOrders,\n  };\n};\n","import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\nimport { constructGetDeltaContract } from './getDeltaContract';\n\nexport type ApproveTokenForDeltaFunctions<T> = {\n  /** @description approving ParaswapDelta contract as spender for Token */\n  approveTokenForDelta: ApproveToken<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForDelta = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForDeltaFunctions<T> => {\n  // getDeltaContract is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getDeltaContract } = constructGetDeltaContract(options);\n\n  const getParaswapDeltaAddress = async (requestParams?: RequestParameters) => {\n    const deltaContract = await getDeltaContract(requestParams);\n    if (!deltaContract) {\n      throw new Error(`Delta is not available on chain ${options.chainId}`);\n    }\n    return deltaContract;\n  };\n\n  const approveTokenForDelta: ApproveToken<T> = approveTokenMethodFactory<T>(\n    options.contractCaller,\n    getParaswapDeltaAddress\n  );\n\n  return {\n    approveTokenForDelta,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\n\n// srcChainId -> destChainId -> outputToken[]\n// output Tokens that are supported for a srcChainId -> destChainId pair\nexport type BridgeInfo = Record<number, Record<number, Address[]>>;\ntype BridgeInfoResponse = { supportedTokens: BridgeInfo };\n\ntype GetBridgeInfo = (requestParams?: RequestParameters) => Promise<BridgeInfo>;\n\nexport type GetBridgeInfoFunctions = {\n  getBridgeInfo: GetBridgeInfo;\n};\n\nexport const constructGetBridgeInfo = ({\n  apiURL = API_URL,\n  fetcher,\n}: ConstructFetchInput): GetBridgeInfoFunctions => {\n  const bridgeInfoUrl = `${apiURL}/delta/prices/bridge-info` as const;\n\n  const getBridgeInfo: GetBridgeInfo = async (requestParams) => {\n    const data = await fetcher<BridgeInfoResponse>({\n      url: bridgeInfoUrl,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.supportedTokens;\n  };\n\n  return {\n    getBridgeInfo,\n  };\n};\n","import { API_URL } from '../../constants';\nimport { runOnceAndCache } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\n\n// chainId -> multicallHandler\nexport type MulticallHandlersResponse = Record<number, Address>;\n\ntype GetMulticallHandlers = (\n  requestParams?: RequestParameters\n) => Promise<MulticallHandlersResponse>;\n\nexport type GetMulticallHandlersFunctions = {\n  getMulticallHandlers: GetMulticallHandlers;\n};\n\nexport const constructGetMulticallHandlers = ({\n  apiURL = API_URL,\n  fetcher,\n}: ConstructFetchInput): GetMulticallHandlersFunctions => {\n  const multicallHandlersUrl =\n    `${apiURL}/delta/prices/multicall-handlers` as const;\n\n  const _getMulticallHandlers: GetMulticallHandlers = async (requestParams) => {\n    const data = await fetcher<MulticallHandlersResponse>({\n      url: multicallHandlersUrl,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  // cached for the same instance of `{getMulticallHandlers} = constructGetMulticallHandlers()`\n  // so should persist across same apiUrl & network (and response is even network agnostic)\n  const getMulticallHandlers = runOnceAndCache(_getMulticallHandlers);\n\n  return {\n    getMulticallHandlers,\n  };\n};\n","import { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\n\ntype TokenSupportedInDeltaResponse = { supported: boolean };\ntype IsTokenSupportedInDeltaQueryOptions = {\n  token: Address;\n  chainId: number;\n};\n\ntype IsTokenSupportedInDelta = (\n  token: Address,\n  requestParams?: RequestParameters\n) => Promise<boolean>;\n\nexport type IsTokenSupportedInDeltaFunctions = {\n  isTokenSupportedInDelta: IsTokenSupportedInDelta;\n};\n\nexport const constructIsTokenSupportedInDelta = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): IsTokenSupportedInDeltaFunctions => {\n  const bridgeInfoUrl = `${apiURL}/delta/prices/is-token-supported` as const;\n\n  const isTokenSupportedInDelta: IsTokenSupportedInDelta = async (\n    token,\n    requestParams\n  ) => {\n    const search = constructSearchString<IsTokenSupportedInDeltaQueryOptions>({\n      token,\n      chainId,\n    });\n\n    const fetchURL = `${bridgeInfoUrl}/${search}` as const;\n\n    const data = await fetcher<TokenSupportedInDeltaResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.supported;\n  };\n\n  return {\n    isTokenSupportedInDelta,\n  };\n};\n","import { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { BridgePrice, DeltaPrice } from '../delta/getDeltaPrice';\nimport type {\n  ConstructFetchInput,\n  EnumerateLiteral,\n  RequestParameters,\n  OptimalRate,\n} from '../../types';\n\ntype TradeMode = 'delta' | 'market' | 'all';\n// enable passing enum value by string\ntype SwapSideUnion = EnumerateLiteral<typeof SwapSide>;\n\nexport type QuoteParams<M extends TradeMode = TradeMode> = {\n  /** @description Source Token Address */\n  srcToken: string;\n  /** @description Destination Token Address */\n  destToken: string;\n  /** @description srcToken amount (in case of SELL) or destToken amount (in case of BUY), in wei */\n  amount: string;\n  /** @description Source Token Decimals.  */\n  srcDecimals: number;\n  /** @description Destination Token Decimals */\n  destDecimals: number;\n  /** @description SELL or BUY, default is SELL */\n  side?: SwapSideUnion;\n  /** @description User's Wallet Address */\n  userAddress?: string;\n  /** @description Partner string */\n  partner?: string;\n  /** @description Preferred mode for the trade. In case of \"all\", Delta pricing is returned, with Market as a fallback */\n  mode: M;\n};\n\ntype QuoteQueryOptions = QuoteParams & {\n  chainId: number; // will return error from API on unsupported chains\n};\n\ntype FallbackReason = {\n  errorType: string;\n  details: string;\n};\n\nexport type QuoteWithMarketPrice = {\n  market: OptimalRate;\n};\n\nexport type QuoteWithDeltaPrice = {\n  delta: DeltaPrice;\n  deltaAddress: string;\n};\n\nexport type QuoteWithBridgePrice = {\n  delta: BridgePrice;\n  deltaAddress: string;\n};\n\nexport type QuoteWithDeltaPriceAndBridgePrice = {\n  delta: DeltaPrice | BridgePrice;\n  deltaAddress: string;\n};\n\nexport type QuoteWithMarketPriceAsFallback = QuoteWithMarketPrice & {\n  fallbackReason: FallbackReason;\n};\n\nexport type QuoteResponse =\n  | QuoteWithDeltaPrice\n  | QuoteWithMarketPrice\n  | QuoteWithBridgePrice\n  | QuoteWithMarketPriceAsFallback\n  | QuoteWithDeltaPriceAndBridgePrice;\n\ninterface GetQuoteFunc {\n  (\n    options: QuoteParams<'delta'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPrice>;\n  (\n    options: QuoteParams<'delta'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  (\n    options: QuoteParams<'delta'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPriceAndBridgePrice>;\n  (\n    options: QuoteParams<'market'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithMarketPrice>;\n  (\n    options: QuoteParams<'all'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<\n    QuoteWithDeltaPrice | QuoteWithMarketPriceAsFallback // \"all\" mode tries for deltaPrice and falls back to market priceRoute\n  >;\n  (\n    options: QuoteParams<'all'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  (options: QuoteParams<'all'>, requestParams?: RequestParameters): Promise<\n    QuoteWithDeltaPriceAndBridgePrice | QuoteWithMarketPriceAsFallback // \"all\" mode tries for deltaPrice and falls back to market priceRoute\n  >;\n  (\n    options: QuoteParams,\n    requestParams?: RequestParameters\n  ): Promise<QuoteResponse>;\n}\n\nexport type GetQuoteFunctions = {\n  getQuote: GetQuoteFunc;\n};\n\nexport const constructGetQuote = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetQuoteFunctions => {\n  const pricesUrl = `${apiURL}/quote` as const;\n\n  function getQuote(\n    options: QuoteParams<'delta'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPrice>;\n  function getQuote(\n    options: QuoteParams<'delta'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  function getQuote(\n    options: QuoteParams<'delta'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPriceAndBridgePrice>;\n  function getQuote(\n    options: QuoteParams<'market'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithMarketPrice>;\n  function getQuote(\n    options: QuoteParams<'all'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<\n    QuoteWithDeltaPrice | QuoteWithMarketPriceAsFallback // \"all\" mode tries for deltaPrice and falls back to market priceRoute\n  >;\n  function getQuote(\n    options: QuoteParams<'all'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  function getQuote(\n    options: QuoteParams<'all'>,\n    requestParams?: RequestParameters\n  ): Promise<\n    QuoteWithDeltaPriceAndBridgePrice | QuoteWithMarketPriceAsFallback\n  >;\n  function getQuote(\n    options: QuoteParams,\n    requestParams?: RequestParameters\n  ): Promise<QuoteResponse>;\n  async function getQuote(\n    options: QuoteParams,\n    requestParams?: RequestParameters\n  ): Promise<QuoteResponse> {\n    const search = constructSearchString<QuoteQueryOptions>({\n      ...options,\n      chainId,\n      side: options.side ?? SwapSide.SELL,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<QuoteResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  }\n\n  return {\n    getQuote,\n  };\n};\n","import { Domain } from '../../common/orders/buildOrderData';\n\nconst ORDER_CANCELLATIONS_EIP_712_TYPES = {\n  OrderCancellations: [{ name: 'orderIds', type: 'string[]' }],\n};\n\nexport type CancelDeltaOrderData = {\n  orderIds: string[];\n};\n\nexport type SignableCancelDeltaOrderData = {\n  types: {\n    OrderCancellations: (typeof ORDER_CANCELLATIONS_EIP_712_TYPES)['OrderCancellations'];\n  };\n  domain: Domain;\n  data: CancelDeltaOrderData;\n};\n\ntype BuildCancelDeltaOrderInput = {\n  orderInput: CancelDeltaOrderData;\n  paraswapDeltaAddress: string;\n  chainId: number;\n};\n\nexport function buildCancelDeltaOrderSignableData({\n  orderInput,\n  chainId,\n  paraswapDeltaAddress,\n}: BuildCancelDeltaOrderInput): SignableCancelDeltaOrderData {\n  const typedData = {\n    types: {\n      OrderCancellations: ORDER_CANCELLATIONS_EIP_712_TYPES.OrderCancellations,\n    },\n    domain: {\n      name: 'Portikus',\n      version: '2.0.0',\n      chainId,\n      verifyingContract: paraswapDeltaAddress,\n    },\n    data: {\n      // explicityly pick only the necessary fields,\n      // otherwise signing will break if more is present\n      orderIds: orderInput.orderIds,\n    },\n  };\n\n  return typedData;\n}\n","import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport { constructGetDeltaContract } from './getDeltaContract';\nimport {\n  buildCancelDeltaOrderSignableData,\n  CancelDeltaOrderData,\n} from './helpers/buildCancelDeltaOrderData';\n\ntype SuccessResponse = { success: true };\n\ntype CancelDeltaOrderRequestParams = {\n  orderIds: string[];\n  signature: string;\n};\n\nexport type SignCancelDeltaOrderRequest = (\n  params: CancelDeltaOrderData,\n  requestParams?: RequestParameters\n) => Promise<string>;\n\nexport type PostCancelDeltaOrderRequest = (\n  params: CancelDeltaOrderRequestParams,\n  requestParams?: RequestParameters\n) => Promise<SuccessResponse>;\n\nexport type CancelDeltaOrder = (\n  params: CancelDeltaOrderData,\n  requestParams?: RequestParameters\n) => Promise<SuccessResponse>;\n\nexport type CancelDeltaOrderFunctions = {\n  signCancelLimitDeltaOrderRequest: SignCancelDeltaOrderRequest;\n  postCancelLimitDeltaOrderRequest: PostCancelDeltaOrderRequest;\n  /** @description Cancel a Limit Delta order */\n  cancelLimitDeltaOrders: CancelDeltaOrder;\n};\n\nexport const constructCancelDeltaOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller' | 'fetcher' | 'apiURL' | 'chainId'\n  >\n): CancelDeltaOrderFunctions => {\n  // cached internally\n  const { getDeltaContract } = constructGetDeltaContract(options);\n\n  const signCancelLimitDeltaOrderRequest: SignCancelDeltaOrderRequest = async (\n    params,\n    requestParams\n  ) => {\n    const ParaswapDelta = await getDeltaContract(requestParams);\n    if (!ParaswapDelta) {\n      throw new Error(`Delta is not available on chain ${options.chainId}`);\n    }\n\n    const typedData = buildCancelDeltaOrderSignableData({\n      orderInput: params,\n      paraswapDeltaAddress: ParaswapDelta,\n      chainId: options.chainId,\n    });\n    const signature = await options.contractCaller.signTypedDataCall(typedData);\n\n    return signature;\n  };\n\n  const postCancelLimitDeltaOrderRequest: PostCancelDeltaOrderRequest = async (\n    params,\n    requestParams\n  ) => {\n    const cancelUrl = `${options.apiURL}/delta/orders/cancel` as const;\n\n    const res = await options.fetcher<SuccessResponse>({\n      url: cancelUrl,\n      method: 'POST',\n      data: params,\n      requestParams,\n    });\n\n    return res;\n  };\n\n  const cancelLimitDeltaOrders: CancelDeltaOrder = async (\n    { orderIds },\n    requestParams\n  ) => {\n    const signature = await signCancelLimitDeltaOrderRequest(\n      { orderIds },\n      requestParams\n    );\n\n    const res = await postCancelLimitDeltaOrderRequest(\n      {\n        orderIds,\n        signature,\n      },\n      requestParams\n    );\n\n    return res;\n  };\n\n  return {\n    signCancelLimitDeltaOrderRequest,\n    postCancelLimitDeltaOrderRequest,\n    cancelLimitDeltaOrders,\n  };\n};\n","import type {\n  AnyFunction,\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ConstructProviderFetchInput,\n} from '../types';\nimport type { Merge, UnionToIntersection } from 'ts-essentials';\nimport type { ApproveTokenFunctions } from '../methods/swap/approve';\nimport type { CancelLimitOrderFunctions } from '../methods/limitOrders/cancelOrder';\nimport type { ApproveTokenForLimitOrderFunctions } from '../methods/limitOrders/approveForOrder';\nimport type { CancelNFTOrderFunctions } from '../methods/nftOrders/cancelOrder';\nimport type { ApproveTokenForNFTOrderFunctions } from '../methods/nftOrders/approveForOrder';\nimport type { FillOrderDirectlyFunctions } from '../methods/limitOrders/fillOrderDirectly';\nimport type { ApproveTokenForDeltaFunctions } from '../methods/delta/approveForDelta';\nimport { API_URL, DEFAULT_VERSION } from '../constants';\n\nexport type SDKConfig<TxResponse = any> = ConstructProviderFetchInput<\n  TxResponse,\n  'staticCall' | 'transactCall' | 'signTypedDataCall'\n> &\n  ConstructFetchInput;\n\ntype SDKFunction<T extends ConstructBaseInput> = (\n  config: T\n) => Record<string, AnyFunction | Record<string, AnyFunction>>;\n\ntype IntersectionOfReturns<Funcs extends AnyFunction[]> = UnionToIntersection<\n  ReturnType<Funcs[number]>\n>;\n\ntype PartialSDKResult<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = InferWithTxResponse<Config, Funcs>;\n\ntype InferWithTxResponse<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = Config extends SDKConfig<infer TxResponse> // if can infer TxResponse inside Config\n  ? // and if returns can be successfully intersected\n    IntersectionOfReturns<Funcs> extends Record<string, any>\n    ? MergeExtendableRecursively<\n        IntersectionOfReturns<Funcs>,\n        [\n          // if there are ApproveTokenFunctions or CancelLimitOrderFunctions in the intersection\n          // which means constructApproveToken or constructCancelLimitOrder was passed in Funcs\n          ApproveTokenFunctions<TxResponse>,\n          CancelLimitOrderFunctions<TxResponse>,\n          FillOrderDirectlyFunctions<TxResponse>,\n          ApproveTokenForLimitOrderFunctions<TxResponse>,\n          CancelNFTOrderFunctions<TxResponse>,\n          ApproveTokenForNFTOrderFunctions<TxResponse>,\n          ApproveTokenForDeltaFunctions<TxResponse>\n        ]\n        // then merge IntersectionOfReturns<Funcs> with them recursively\n      >\n    : IntersectionOfReturns<Funcs>\n  : IntersectionOfReturns<Funcs>;\n\n// merges Accum with Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableOnce<\n  Accum extends Record<string, any>,\n  Replacement extends Record<string, any>\n> = Accum extends Record<keyof Replacement, any>\n  ? Merge<Accum, Replacement>\n  : Accum;\n\n// recursively merges Accum with each Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableRecursively<\n  Accum extends Record<string, any>,\n  Replacements extends Record<string, any>[]\n> = Replacements extends [\n  head: infer Head extends Record<string, any>,\n  ...tail: infer Tail\n]\n  ? Tail extends Record<string, any>[]\n    ? MergeExtendableRecursively<MergeExtendableOnce<Accum, Head>, Tail>\n    : MergeExtendableOnce<Accum, Head>\n  : Accum;\n\n/** @description construct composable SDK with methods you choose yourself */\nexport const constructPartialSDK = <\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n>(\n  config: Config, // config is auto-inferred to cover the used functions\n  ...funcs: Funcs\n): PartialSDKResult<Config, Funcs> & Required<ConstructBaseInput> => {\n  const sdkFuncs = funcs.reduce<Partial<IntersectionOfReturns<Funcs>>>(\n    (accum, func) => {\n      const sdkSlice = func(config);\n      return Object.assign(accum, sdkSlice);\n    },\n    {}\n  );\n\n  const sdk = {\n    ...sdkFuncs,\n    apiURL: config.apiURL ?? API_URL,\n    version: config.version ?? DEFAULT_VERSION,\n    chainId: config.chainId,\n  } as PartialSDKResult<Config, Funcs> & Required<ConstructBaseInput>;\n\n  return sdk;\n};\n","import { constructPartialSDK, SDKConfig } from '../../sdk/partial';\nimport { constructGetAdapters, GetAdaptersFunctions } from './adapters';\nimport { ApproveTokenFunctions, constructApproveToken } from './approve';\nimport { constructGetBalances, GetBalancesFunctions } from './balance';\nimport { constructGetRate, GetRateFunctions } from './rates';\nimport { constructGetSpender, GetSpenderFunctions } from './spender';\nimport { constructSwapTx, GetSwapTxFunctions } from './swapTx';\nimport { constructGetTokens, GetTokensFunctions } from './token';\nimport { BuildTxFunctions, constructBuildTx } from './transaction';\n\nexport type SwapSDKMethods<TxResponse> = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  ApproveTokenFunctions<TxResponse> &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions &\n  GetSwapTxFunctions;\n\n/** @description construct SDK with every Swap-related method, fetching from API and token approval */\nexport const constructSwapSDK = <TxResponse>(\n  config: SDKConfig<TxResponse>\n): SwapSDKMethods<TxResponse> => {\n  const constructApproveTokenWithTxResponse = constructApproveToken<TxResponse>;\n\n  // include all available Swap methods\n  return constructPartialSDK(\n    config,\n    constructGetBalances,\n    constructGetTokens,\n    constructGetSpender,\n    constructApproveTokenWithTxResponse,\n    constructBuildTx,\n    constructGetAdapters,\n    constructGetRate,\n    constructSwapTx\n  );\n};\n","import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport type { LimitOrderToSend, LimitOrderFromApi } from './helpers/types';\nimport {\n  BuildLimitOrderFunctions,\n  BuildLimitOrderInput,\n  constructBuildLimitOrder,\n} from './buildOrder';\nimport {\n  CancelLimitOrderFunctions,\n  constructCancelLimitOrder,\n} from './cancelOrder';\nimport { constructGetLimitOrders, GetLimitOrdersFunctions } from './getOrders';\nimport { constructPostLimitOrder, PostLimitOrderFunctions } from './postOrder';\nimport { constructSignLimitOrder, SignLimitOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForLimitOrder,\n  ApproveTokenForLimitOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetLimitOrdersContractFunctions,\n  constructGetLimitOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildLimitOrdersTxFunctions,\n  constructBuildLimitOrderTx,\n} from './transaction';\nimport type { Address } from '@paraswap/core';\nimport {\n  FillOrderDirectlyFunctions,\n  constructFillOrderDirectly,\n} from './fillOrderDirectly';\n\ntype SubmitLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  extra?: { permitMakerAsset?: string },\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\n\ntype SubmitP2POrder = (\n  buildLimitOrderParams: BuildLimitOrderInput & { taker: Address },\n  extra?: { permitMakerAsset?: string },\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\n\nexport type SubmitLimitOrderFuncs = {\n  submitLimitOrder: SubmitLimitOrder;\n  submitP2POrder: SubmitP2POrder;\n};\n\nexport const constructSubmitLimitOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitLimitOrderFuncs => {\n  const { buildLimitOrder } = constructBuildLimitOrder(options);\n  const { signLimitOrder } = constructSignLimitOrder(options);\n  const { postLimitOrder, postP2POrder } = constructPostLimitOrder(options);\n\n  const prepareLimitOrder = async (\n    buildLimitOrderParams: BuildLimitOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<LimitOrderToSend> => {\n    const orderData = await buildLimitOrder(buildLimitOrderParams);\n    const signature = await signLimitOrder(orderData);\n\n    const orderWithSignature: LimitOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitLimitOrder: SubmitLimitOrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postLimitOrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitP2POrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postP2POrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  return { submitLimitOrder, submitP2POrder };\n};\n\nexport type LimitOrderHandlers<T> = SubmitLimitOrderFuncs &\n  BuildLimitOrderFunctions &\n  SignLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  GetLimitOrdersFunctions &\n  GetLimitOrdersContractFunctions &\n  BuildLimitOrdersTxFunctions &\n  CancelLimitOrderFunctions<T> &\n  ApproveTokenForLimitOrderFunctions<T> &\n  FillOrderDirectlyFunctions<T>;\n\n/** @description construct SDK with every LimitOrders-related method, fetching from API and contract calls */\nexport const constructAllLimitOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): LimitOrderHandlers<TxResponse> => {\n  const limitOrdersGetters = constructGetLimitOrders(options);\n  const limitOrdersContractGetter = constructGetLimitOrdersContract(options);\n\n  const limitOrdersSubmit = constructSubmitLimitOrder(options);\n  const limitOrdersBuild = constructBuildLimitOrder(options);\n  const limitOrdersSign = constructSignLimitOrder(options);\n  const limitOrdersPost = constructPostLimitOrder(options);\n\n  const limitOrdersCancel = constructCancelLimitOrder(options);\n  const limitOrdersApproveToken = constructApproveTokenForLimitOrder(options);\n\n  const limitOrdersFillOrderDirectly = constructFillOrderDirectly(options);\n\n  const limitOrdersBuildTx = constructBuildLimitOrderTx(options);\n\n  return {\n    ...limitOrdersGetters,\n    ...limitOrdersContractGetter,\n    ...limitOrdersSubmit,\n    ...limitOrdersBuild,\n    ...limitOrdersSign,\n    ...limitOrdersPost,\n    ...limitOrdersCancel,\n    ...limitOrdersApproveToken,\n    ...limitOrdersFillOrderDirectly,\n    ...limitOrdersBuildTx,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport {\n  BuildDeltaOrderDataParams,\n  BuildDeltaOrderFunctions,\n  constructBuildDeltaOrder,\n} from './buildDeltaOrder';\nimport {\n  constructPostDeltaOrder,\n  DeltaOrderApiResponse,\n  DeltaOrderToPost,\n  PostDeltaOrderFunctions,\n} from './postDeltaOrder';\nimport {\n  constructSignDeltaOrder,\n  SignDeltaOrderFunctions,\n} from './signDeltaOrder';\nimport {\n  GetDeltaContractFunctions,\n  constructGetDeltaContract,\n} from './getDeltaContract';\nimport {\n  constructGetDeltaPrice,\n  GetDeltaPriceFunctions,\n} from './getDeltaPrice';\nimport {\n  constructGetDeltaOrders,\n  GetDeltaOrdersFunctions,\n} from './getDeltaOrders';\nimport {\n  constructGetPartnerFee,\n  GetPartnerFeeFunctions,\n} from './getPartnerFee';\nimport {\n  ApproveTokenForDeltaFunctions,\n  constructApproveTokenForDelta,\n} from './approveForDelta';\nimport {\n  constructGetBridgeInfo,\n  GetBridgeInfoFunctions,\n} from './getBridgeInfo';\nimport {\n  constructGetMulticallHandlers,\n  GetMulticallHandlersFunctions,\n} from './getMulticallHandlers';\nimport {\n  constructIsTokenSupportedInDelta,\n  IsTokenSupportedInDeltaFunctions,\n} from './isTokenSupportedInDelta';\nimport {\n  BuildCrosschainOrderBridgeFunctions,\n  constructBuildCrosschainOrderBridge,\n} from './buildCrosschainOrderBridge';\nimport {\n  CancelDeltaOrderFunctions,\n  constructCancelDeltaOrder,\n} from './cancelDeltaOrder';\n\nexport type SubmitDeltaOrderParams = BuildDeltaOrderDataParams & {\n  /** @description designates the Order as being able to be partially filled, as opposed to fill-or-kill */\n  partiallyFillable?: boolean;\n  /** @description Referrer address */\n  referrerAddress?: string;\n} & Pick<DeltaOrderToPost, 'type' | 'includeAgents' | 'excludeAgents'>;\n\ntype SubmitDeltaOrder = (\n  orderParams: SubmitDeltaOrderParams\n) => Promise<DeltaOrderApiResponse>;\n\nexport type SubmitDeltaOrderFuncs = {\n  submitDeltaOrder: SubmitDeltaOrder;\n};\n\nexport const constructSubmitDeltaOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitDeltaOrderFuncs => {\n  const { buildDeltaOrder } = constructBuildDeltaOrder(options);\n  const { signDeltaOrder } = constructSignDeltaOrder(options);\n  const { postDeltaOrder } = constructPostDeltaOrder(options);\n\n  const submitDeltaOrder: SubmitDeltaOrder = async (orderParams) => {\n    const orderData = await buildDeltaOrder(orderParams);\n    const signature = await signDeltaOrder(orderData);\n\n    const response = await postDeltaOrder({\n      signature,\n      partner: orderParams.partner,\n      order: orderData.data,\n      partiallyFillable: orderParams.partiallyFillable,\n      referrerAddress: orderParams.referrerAddress,\n      type: orderParams.type,\n      includeAgents: orderParams.includeAgents,\n      excludeAgents: orderParams.excludeAgents,\n    });\n\n    return response;\n  };\n\n  return { submitDeltaOrder };\n};\n\nexport type DeltaOrderHandlers<T> = SubmitDeltaOrderFuncs &\n  ApproveTokenForDeltaFunctions<T> &\n  BuildDeltaOrderFunctions &\n  BuildCrosschainOrderBridgeFunctions &\n  GetDeltaOrdersFunctions &\n  GetDeltaPriceFunctions &\n  GetDeltaContractFunctions &\n  GetPartnerFeeFunctions &\n  GetMulticallHandlersFunctions &\n  GetBridgeInfoFunctions &\n  IsTokenSupportedInDeltaFunctions &\n  PostDeltaOrderFunctions &\n  SignDeltaOrderFunctions &\n  CancelDeltaOrderFunctions;\n\n/** @description construct SDK with every Delta Order-related method, fetching from API and Order signing */\nexport const constructAllDeltaOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall'\n  >\n): DeltaOrderHandlers<TxResponse> => {\n  const deltaOrdersGetters = constructGetDeltaOrders(options);\n  const deltaOrdersContractGetter = constructGetDeltaContract(options);\n  const deltaPrice = constructGetDeltaPrice(options);\n\n  const partnerFee = constructGetPartnerFee(options);\n  const bridgeInfo = constructGetBridgeInfo(options);\n  const isTokenSupportedInDelta = constructIsTokenSupportedInDelta(options);\n  const multicallHandlers = constructGetMulticallHandlers(options);\n\n  const approveTokenForDelta = constructApproveTokenForDelta(options);\n\n  const deltaOrdersSubmit = constructSubmitDeltaOrder(options);\n\n  const buildCrosschainOrderBridge =\n    constructBuildCrosschainOrderBridge(options);\n\n  const deltaOrdersBuild = constructBuildDeltaOrder(options);\n  const deltaOrdersSign = constructSignDeltaOrder(options);\n  const deltaOrdersPost = constructPostDeltaOrder(options);\n\n  const deltaOrdersCancel = constructCancelDeltaOrder(options);\n\n  return {\n    ...deltaOrdersGetters,\n    ...deltaOrdersContractGetter,\n    ...deltaPrice,\n    ...partnerFee,\n    ...bridgeInfo,\n    ...isTokenSupportedInDelta,\n    ...multicallHandlers,\n    ...approveTokenForDelta,\n    ...deltaOrdersSubmit,\n    ...deltaOrdersBuild,\n    ...deltaOrdersSign,\n    ...deltaOrdersPost,\n    ...deltaOrdersCancel,\n    ...buildCrosschainOrderBridge,\n  };\n};\n","import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport type { NFTOrderToSend, NFTOrderFromAPI } from './helpers/types';\nimport {\n  BuildNFTOrderFunctions,\n  BuildNFTOrderInput,\n  constructBuildNFTOrder,\n} from './buildOrder';\nimport {\n  CancelNFTOrderFunctions,\n  constructCancelNFTOrder,\n} from './cancelOrder';\nimport { constructGetNFTOrders, GetNFTOrdersFunctions } from './getOrders';\nimport { constructPostNFTOrder, PostNFTOrderFunctions } from './postOrder';\nimport { constructSignNFTOrder, SignNFTOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForNFTOrder,\n  ApproveTokenForNFTOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetNFTOrdersContractFunctions,\n  constructGetNFTOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildNFTOrdersTxFunctions,\n  constructBuildNFTOrderTx,\n} from './transaction';\n\ntype SubmitNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  extra?: { permitMakerAsset?: string },\n  requestParams?: RequestParameters\n) => Promise<NFTOrderFromAPI>;\n\nexport type SubmitNFTOrderFuncs = {\n  submitNFTOrder: SubmitNFTOrder;\n  submitP2POrder: SubmitNFTOrder;\n};\n\nexport const constructSubmitNFTOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitNFTOrderFuncs => {\n  const { buildNFTOrder } = constructBuildNFTOrder(options);\n  const { signNFTOrder } = constructSignNFTOrder(options);\n  const { postNFTLimitOrder, postNFTP2POrder } = constructPostNFTOrder(options);\n\n  const prepareNFTOrder = async (\n    buildNFTOrderParams: BuildNFTOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<NFTOrderToSend> => {\n    const orderData = await buildNFTOrder(buildNFTOrderParams);\n    const signature = await signNFTOrder(orderData);\n\n    const orderWithSignature: NFTOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitNFTOrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTLimitOrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTP2POrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  return { submitNFTOrder, submitP2POrder };\n};\n\nexport type NFTOrderHandlers<T> = SubmitNFTOrderFuncs &\n  BuildNFTOrderFunctions &\n  SignNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  GetNFTOrdersFunctions &\n  GetNFTOrdersContractFunctions &\n  BuildNFTOrdersTxFunctions &\n  CancelNFTOrderFunctions<T> &\n  ApproveTokenForNFTOrderFunctions<T>;\n\n/** @description construct SDK with every NFTOrders-related method, fetching from API and contract calls */\nexport const constructAllNFTOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): NFTOrderHandlers<TxResponse> => {\n  const NFTOrdersGetters = constructGetNFTOrders(options);\n  const NFTOrdersContractGetter = constructGetNFTOrdersContract(options);\n\n  const NFTOrdersSubmit = constructSubmitNFTOrder(options);\n  const NFTOrdersBuild = constructBuildNFTOrder(options);\n  const NFTOrdersSign = constructSignNFTOrder(options);\n  const NFTOrdersPost = constructPostNFTOrder(options);\n\n  const NFTOrdersCancel = constructCancelNFTOrder(options);\n  const NFTOrdersApproveToken = constructApproveTokenForNFTOrder(options);\n\n  const NFTOrdersBuildTx = constructBuildNFTOrderTx(options);\n\n  return {\n    ...NFTOrdersGetters,\n    ...NFTOrdersContractGetter,\n    ...NFTOrdersSubmit,\n    ...NFTOrdersBuild,\n    ...NFTOrdersSign,\n    ...NFTOrdersPost,\n    ...NFTOrdersCancel,\n    ...NFTOrdersApproveToken,\n    ...NFTOrdersBuildTx,\n  };\n};\n","import type { SDKConfig } from './partial';\nimport { constructSwapSDK, SwapSDKMethods } from '../methods/swap';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\nimport {\n  constructAllDeltaOrdersHandlers,\n  DeltaOrderHandlers,\n} from '../methods/delta';\nimport {\n  constructGetQuote,\n  GetQuoteFunctions,\n} from '../methods/quote/getQuote';\nimport { ConstructBaseInput } from '../types';\nimport { API_URL, DEFAULT_VERSION } from '../constants';\n\nexport type AllSDKMethods<TxResponse> = {\n  swap: SwapSDKMethods<TxResponse>;\n  limitOrders: LimitOrderHandlers<TxResponse>;\n  nftOrders: NFTOrderHandlers<TxResponse>;\n  delta: DeltaOrderHandlers<TxResponse>;\n  quote: GetQuoteFunctions;\n} & Required<ConstructBaseInput>;\n\n/** @description construct SDK with every method, for swap and limitOrders */\nexport const constructFullSDK = <TxResponse = any>(\n  config: SDKConfig<TxResponse>\n): AllSDKMethods<TxResponse> => {\n  // include all available functions\n  const swap: SwapSDKMethods<TxResponse> = constructSwapSDK(config);\n  const limitOrders: LimitOrderHandlers<TxResponse> =\n    constructAllLimitOrdersHandlers(config);\n  const nftOrders: NFTOrderHandlers<TxResponse> =\n    constructAllNFTOrdersHandlers(config);\n  const delta: DeltaOrderHandlers<TxResponse> =\n    constructAllDeltaOrdersHandlers(config);\n  const quote = constructGetQuote(config);\n\n  return {\n    swap,\n    limitOrders,\n    nftOrders,\n    delta,\n    quote,\n    apiURL: config.apiURL ?? API_URL,\n    chainId: config.chainId,\n    version: config.version ?? DEFAULT_VERSION,\n  };\n};\n","import { constructPartialSDK, SDKConfig } from './partial';\nimport {\n  GetAdaptersFunctions,\n  constructGetAdapters,\n} from '../methods/swap/adapters';\nimport {\n  GetBalancesFunctions,\n  constructGetBalances,\n} from '../methods/swap/balance';\nimport { GetRateFunctions, constructGetRate } from '../methods/swap/rates';\nimport {\n  GetSpenderFunctions,\n  constructGetSpender,\n} from '../methods/swap/spender';\nimport { GetTokensFunctions, constructGetTokens } from '../methods/swap/token';\nimport {\n  BuildTxFunctions,\n  constructBuildTx,\n} from '../methods/swap/transaction';\nimport { constructSwapTx, GetSwapTxFunctions } from '../methods/swap/swapTx';\n\nimport {\n  constructAxiosFetcher,\n  constructFetchFetcher,\n  constructEthersV5ContractCaller,\n  constructEthersV6ContractCaller,\n  constructWeb3ContractCaller,\n  constructViemContractCaller,\n} from '../helpers';\n\nimport type {\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ContractCallerFunctions,\n  TransactionContractCallerFn,\n  TxHash,\n  Address,\n  FetcherFunction,\n  ExtraFetchParams,\n} from '../types';\n\nimport type { EthersProviderDeps, MinViemClient } from '../helpers';\nimport type Web3 from 'web3';\n\nimport type { SwapSDKMethods } from '../methods/swap';\nimport {\n  BuildLimitOrderFunctions,\n  constructBuildLimitOrder,\n} from '../methods/limitOrders/buildOrder';\nimport {\n  constructPostLimitOrder,\n  PostLimitOrderFunctions,\n} from '../methods/limitOrders/postOrder';\nimport {\n  constructGetLimitOrders,\n  GetLimitOrdersFunctions,\n} from '../methods/limitOrders/getOrders';\nimport {\n  constructGetLimitOrdersContract,\n  GetLimitOrdersContractFunctions,\n} from '../methods/limitOrders/getOrdersContract';\nimport {\n  constructBuildLimitOrderTx,\n  BuildLimitOrdersTxFunctions,\n} from '../methods/limitOrders/transaction';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\n\nimport {\n  constructGetNFTOrdersContract,\n  GetNFTOrdersContractFunctions,\n} from '../methods/nftOrders/getOrdersContract';\nimport {\n  constructGetNFTOrders,\n  GetNFTOrdersFunctions,\n} from '../methods/nftOrders/getOrders';\nimport {\n  BuildNFTOrderFunctions,\n  constructBuildNFTOrder,\n} from '../methods/nftOrders/buildOrder';\nimport {\n  constructPostNFTOrder,\n  PostNFTOrderFunctions,\n} from '../methods/nftOrders/postOrder';\nimport {\n  constructBuildNFTOrderTx,\n  BuildNFTOrdersTxFunctions,\n} from '../methods/nftOrders/transaction';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\n\nimport { constructSwapSDK } from '../methods/swap';\nimport type { AxiosRequirement } from '../helpers/fetchers/axios';\nimport { API_URL, DEFAULT_VERSION } from '../constants';\nimport {\n  constructAllDeltaOrdersHandlers,\n  DeltaOrderHandlers,\n} from '../methods/delta';\nimport {\n  BuildDeltaOrderFunctions,\n  constructBuildDeltaOrder,\n} from '../methods/delta/buildDeltaOrder';\nimport {\n  constructGetDeltaOrders,\n  GetDeltaOrdersFunctions,\n} from '../methods/delta/getDeltaOrders';\nimport {\n  constructGetDeltaPrice,\n  GetDeltaPriceFunctions,\n} from '../methods/delta/getDeltaPrice';\nimport {\n  constructGetDeltaContract,\n  GetDeltaContractFunctions,\n} from '../methods/delta/getDeltaContract';\nimport {\n  constructGetPartnerFee,\n  GetPartnerFeeFunctions,\n} from '../methods/delta/getPartnerFee';\nimport {\n  constructPostDeltaOrder,\n  PostDeltaOrderFunctions,\n} from '../methods/delta/postDeltaOrder';\nimport {\n  constructGetQuote,\n  GetQuoteFunctions,\n} from '../methods/quote/getQuote';\nimport {\n  constructGetBridgeInfo,\n  GetBridgeInfoFunctions,\n} from '../methods/delta/getBridgeInfo';\nimport {\n  constructGetMulticallHandlers,\n  GetMulticallHandlersFunctions,\n} from '../methods/delta/getMulticallHandlers';\nimport {\n  constructIsTokenSupportedInDelta,\n  IsTokenSupportedInDeltaFunctions,\n} from '../methods/delta/isTokenSupportedInDelta';\nimport {\n  BuildCrosschainOrderBridgeFunctions,\n  constructBuildCrosschainOrderBridge,\n} from '../methods/delta/buildCrosschainOrderBridge';\n\nexport type SwapFetchMethods = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions &\n  GetSwapTxFunctions;\n\nexport type LimitOrdersFetchMethods = GetLimitOrdersContractFunctions &\n  GetLimitOrdersFunctions &\n  BuildLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  BuildLimitOrdersTxFunctions;\n\nexport type NFTOrdersFetchMethods = GetNFTOrdersContractFunctions &\n  GetNFTOrdersFunctions &\n  BuildNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  BuildNFTOrdersTxFunctions;\n\nexport type DeltaFetchMethods = BuildDeltaOrderFunctions &\n  BuildCrosschainOrderBridgeFunctions &\n  GetDeltaOrdersFunctions &\n  GetDeltaPriceFunctions &\n  GetDeltaContractFunctions &\n  GetPartnerFeeFunctions &\n  GetMulticallHandlersFunctions &\n  GetBridgeInfoFunctions &\n  IsTokenSupportedInDeltaFunctions &\n  PostDeltaOrderFunctions;\n\nexport type SimpleFetchSDK = {\n  swap: SwapFetchMethods;\n  limitOrders: LimitOrdersFetchMethods;\n  nftOrders: NFTOrdersFetchMethods;\n  delta: DeltaFetchMethods;\n  quote: QuoteFetchMethods;\n} & Required<ConstructBaseInput>;\n\nexport type QuoteFetchMethods = GetQuoteFunctions;\n\nexport type SimpleSDK = {\n  swap: SwapSDKMethods<TxHash>;\n  limitOrders: LimitOrderHandlers<TxHash>;\n  nftOrders: NFTOrderHandlers<TxHash>;\n  delta: DeltaOrderHandlers<TxHash>;\n  quote: QuoteFetchMethods;\n} & Required<ConstructBaseInput>;\n\nexport type FetcherOptions = (\n  | {\n      axios: AxiosRequirement;\n    }\n  | { fetch: typeof fetch }\n  | { fetcher: FetcherFunction }\n) &\n  ExtraFetchParams;\n\ntype SimpleOptions = ConstructBaseInput & FetcherOptions;\n\nexport type ProviderOptions = (\n  | EthersProviderDeps\n  | { web3: Web3 }\n  | { viemClient: MinViemClient }\n) & {\n  account: Address;\n};\n\nconst constructFetcher = (options: FetcherOptions): FetcherFunction => {\n  if ('axios' in options) {\n    return constructAxiosFetcher(options.axios, options);\n  }\n  if ('fetch' in options) {\n    return constructFetchFetcher(options.fetch, options);\n  }\n  return (params) => {\n    // adding apiKey to headers if it's provided\n    const headers = options?.apiKey\n      ? {\n          'X-API-KEY': options.apiKey,\n          ...params.headers,\n          ...params.requestParams?.headers,\n        }\n      : params.headers;\n\n    return options.fetcher({ ...params, headers });\n  };\n};\n\n/** @description construct SDK with methods that fetch from API and optionally with blockchain provider calling methods */\nexport function constructSimpleSDK(options: SimpleOptions): SimpleFetchSDK;\n\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions: ProviderOptions\n): SimpleSDK;\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions?: ProviderOptions\n): SimpleFetchSDK | SimpleSDK {\n  const fetcher = constructFetcher(options);\n\n  if (!providerOptions) {\n    const config: ConstructFetchInput = {\n      apiURL: options.apiURL,\n      chainId: options.chainId,\n      version: options.version,\n      fetcher,\n    };\n\n    // include all available functions that don't need `contractCaller`\n    const swap: SwapFetchMethods = constructPartialSDK(\n      config,\n      constructGetBalances,\n      constructGetTokens,\n      constructGetSpender,\n      constructBuildTx,\n      constructGetAdapters,\n      constructGetRate,\n      constructSwapTx\n    );\n\n    const limitOrders = constructPartialSDK(\n      config,\n      constructBuildLimitOrder,\n      constructPostLimitOrder,\n      constructGetLimitOrders,\n      constructGetLimitOrdersContract,\n      constructBuildLimitOrderTx\n    );\n\n    const nftOrders = constructPartialSDK(\n      config,\n      constructBuildNFTOrder,\n      constructPostNFTOrder,\n      constructGetNFTOrders,\n      constructGetNFTOrdersContract,\n      constructBuildNFTOrderTx\n    );\n\n    const delta = constructPartialSDK(\n      config,\n      constructBuildDeltaOrder,\n      constructBuildCrosschainOrderBridge,\n      constructPostDeltaOrder,\n      constructGetDeltaOrders,\n      constructGetDeltaPrice,\n      constructGetDeltaContract,\n      constructGetPartnerFee,\n      constructGetMulticallHandlers,\n      constructGetBridgeInfo,\n      constructIsTokenSupportedInDelta\n    );\n\n    const quote = constructPartialSDK(config, constructGetQuote);\n\n    return {\n      swap,\n      limitOrders,\n      nftOrders,\n      delta,\n      quote,\n      apiURL: options.apiURL ?? API_URL,\n      chainId: options.chainId,\n      version: options.version ?? DEFAULT_VERSION,\n    };\n  }\n\n  const contractCaller = constructSimpleContractCaller(providerOptions);\n\n  const config: SDKConfig<TxHash> = {\n    apiURL: options.apiURL,\n    version: options.version,\n    chainId: options.chainId,\n    fetcher,\n    contractCaller,\n  };\n\n  const swap: SwapSDKMethods<TxHash> = constructSwapSDK(config);\n\n  const limitOrders: LimitOrderHandlers<TxHash> =\n    constructAllLimitOrdersHandlers<TxHash>(config);\n\n  const nftOrders: NFTOrderHandlers<TxHash> =\n    constructAllNFTOrdersHandlers<TxHash>(config);\n\n  const delta: DeltaOrderHandlers<TxHash> =\n    constructAllDeltaOrdersHandlers<TxHash>(config);\n\n  const quote = constructGetQuote(config);\n\n  return {\n    swap,\n    limitOrders,\n    nftOrders,\n    delta,\n    quote,\n    apiURL: options.apiURL ?? API_URL,\n    chainId: options.chainId,\n    version: options.version ?? DEFAULT_VERSION,\n  };\n}\n\nfunction constructSimpleContractCaller(\n  providerOptions: ProviderOptions\n): ContractCallerFunctions<TxHash> {\n  if ('ethersProviderOrSigner' in providerOptions) {\n    const {\n      staticCall,\n      transactCall: _transactCall,\n      signTypedDataCall,\n    } = constructEthersV5ContractCaller(\n      providerOptions,\n      providerOptions.account\n    );\n\n    const transactCall: TransactionContractCallerFn<TxHash> = async (\n      params\n    ) => {\n      const contractTx = await _transactCall(params);\n\n      // as soon as tx is sent\n      // returning tx hash, it's up to the user to wait for tx\n      return contractTx.hash as TxHash;\n    };\n\n    return { staticCall, transactCall, signTypedDataCall };\n  }\n\n  if ('ethersV6ProviderOrSigner' in providerOptions) {\n    const {\n      staticCall,\n      transactCall: _transactCall,\n      signTypedDataCall,\n    } = constructEthersV6ContractCaller(\n      providerOptions,\n      providerOptions.account\n    );\n\n    const transactCall: TransactionContractCallerFn<TxHash> = async (\n      params\n    ) => {\n      const contractTx = await _transactCall(params);\n\n      // as soon as tx is sent\n      // returning tx hash, it's up to the user to wait for tx\n      return contractTx.hash as TxHash;\n    };\n\n    return { staticCall, transactCall, signTypedDataCall };\n  }\n\n  if ('viemClient' in providerOptions) {\n    const contractCaller = constructViemContractCaller(\n      providerOptions.viemClient,\n      providerOptions.account\n    );\n    return contractCaller;\n  }\n\n  const {\n    staticCall,\n    transactCall: _transactCall,\n    signTypedDataCall,\n  } = constructWeb3ContractCaller(\n    providerOptions.web3,\n    providerOptions.account\n  );\n\n  const transactCall: TransactionContractCallerFn<TxHash> = async (params) => {\n    const unpromiEvent = await _transactCall(params);\n\n    // as soon as tx is sent\n    // returning tx hash, it's up to the user to wait for tx\n    return new Promise<TxHash>((resolve, reject) => {\n      unpromiEvent.once('transactionHash', (hash) => resolve(hash as TxHash));\n      unpromiEvent.once('error', reject);\n    });\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n}\n"],"names":["API_URL","DEFAULT_VERSION","objectToFilledEntries","object","Object","entries","filter","_ref","value","undefined","map","_ref2","key","String","constructSearchString","queryOptions","queryEntries","queryString","URLSearchParams","toString","isFetcherError","error","FetcherError","_Error","_ref3","_this","code","request","response","isAxiosError","message","call","status","Error","captureStackTrace","name","constructor","_assertThisInitialized","data","isDataWithError","isDataWithError2","errorType","description","_inheritsLoose","_wrapNativeSuper","isObject","obj","isFilledArray","array","length","getRandomInt","Math","floor","random","Number","MAX_SAFE_INTEGER","runOnceAndCache","func","result","_result","apply","arguments","constructGetSpender","_ref$apiURL","apiURL","_ref$version","version","chainId","fetcher","search","network","fetchURL","_getContracts","_asyncToGenerator","_regeneratorRuntime","mark","_callee","requestParams","wrap","_callee$","_context","prev","next","url","method","sent","abrupt","stop","_x","getContracts","getSpender","_callee2","_yield$getContracts","TokenTransferProxy","_callee2$","_context2","_x2","getAugustusSwapper","_ref4","_callee3","_yield$getContracts2","AugustusSwapper","_callee3$","_context3","_x3","getAugustusRFQ","_ref5","_callee4","_yield$getContracts3","AugustusRFQ","_callee4$","_context4","_x4","MinERC20Abi","constant","inputs","type","outputs","payable","stateMutability","approveTokenMethodFactory","contractCaller","amount","tokenAddress","overrides","spender","res","transactCall","address","abi","contractMethod","args","constructApproveToken","options","_constructGetSpender","approveToken","approveTokenBulk","tokenAddresses","Promise","all","constructToken","tokenProps","_tokenProps$tokenType","tokenType","_tokenProps$mainConne","mainConnector","_tokenProps$connector","connectors","connectorsInput","_tokenProps$network","rest","_objectWithoutPropertiesLoose","_excluded","_extends","isAllowance","arg","NOT_FOUND_RESPONSE","constructGetBalances","tokensUrl","getBalances","userAddress","tokens","getBalance","tokenAddressOrSymbol","token","_x5","getAllowances","tokenAddressesLowercaseSet","balances","allowances","Set","toLowerCase","has","_ref5$allowance","allowance","_x6","_x7","_x8","getAllowance","_ref6","balanceOrNotFound","_balanceOrNotFound$al","_x9","_x10","_x11","constructGetAdapters","getAdapters","query","normalizeRateOptions","_ref$options","restInput","excludeContractMethods","includeContractMethods","partner","includeDEXS","excludeDEXS","excludePools","restOptions","_excluded2","_map","join","_includeDEXS","_excludeDEXS","_excludePools","_excludeContractMethods","_includeContractMethods","transformed","INVALID_ROUTE","constructGetRate","pricesUrl","getRate","srcToken","destToken","parsedOptions","priceRoute","getRateByRoute","route","_route","constructSwapTx","getSwapTxData","constructGetTokens","getTokens","ZERO_ADDRESS","baseFetchUrlGetterFactory","orderKind","constructBaseFetchUrlGetter","urlGetter","orderURLpart","sanitizeOrderData","nonceAndMeta","expiry","makerAsset","takerAsset","maker","taker","makerAmount","takerAmount","OrderNFT","buildOrderData","verifyingContract","_ref$nonce","nonce","_makerAssetAddress","_takerAssetAddress","makerAssetId","_ref$takerAssetId","takerAssetId","makerAssetType","takerAssetType","AugustusAddress","_ref$taker","takerInNonce","BigInt","assetAddressToUint","orderNFT","types","domain","assetAddress","assetType","AssetType","ERC20","ERC1155","ERC721","_makerAsset","_takerAsset","startsWith","constructBuildTx","transactionsURL","buildTx","params","_params$takeSurplus","side","AmountMismatchError","sanitizedParams","takeSurplus","fetchParams","builtTx","SwapSide","SELL","assert","areAmountsCorrect","queryParams","orders","order","sanitizedOrderData","sanitizeNFTOrderData","sanitizeLimitOrderData","sanitizedOrder","signature","permitMakerAsset","positiveSlippageToUser","slippage","BUY","destAmount","srcAmount","inputAmount","priceRouteAmount","Order","contractTaker","AppVersion","constructBuildLimitOrder","buildLimitOrder","buildLimitOrderParams","_options$version","constructSignLimitOrder","signLimitOrder","typedData","typedDataOnly","signTypedDataCall","MinAugustusRFQAbi","internalType","constructCancelLimitOrder","cancelLimitOrder","orderHash","cancelLimitOrderBulk","orderHashes","splitSignature","slice","bytes","Uint8Array","i","parseInt","r","Array","from","b","padStart","s","v","sBytes","yParityAndS","compactSignature","compact","encodeEIP_2612PermitFunctionInput","owner","deadline","permitSignature","_splitSignature","encodedOwner","encodeAddress","encodedSpender","encodedValue","encodeUint256","encodedDeadline","encodedV","encodeUint8","encodedR","encodeBytes32","encodedS","val","encodeDAIlikePermitFunctionInput","holder","_splitSignature2","encodedHolder","encodedNonce","encodedExpiry","encodeBool","strippedAddress","replace","bn","strippedValue","components","constructFillOrderDirectly","fillOrderDirectly","takerPermit","_res","permitTakerAsset","encodedPermitParams","isDaiPermit","constructGetLimitOrders","getBaseFetchURLByEntityType","getLimitOrders","userParams","baseFetchURL","userURL","offset","limit","hideSmallBalances","orderBy","getRequiredBalance","getLimitOrderByHash","constructPostLimitOrder","getBaseFetchURLByOrderType","postTypedOrder","limitOrderWithSignatureAndPermit","_yield$fetcher","newOrder","postLimitOrder","postP2POrder","constructApproveTokenForLimitOrder","approveMakerTokenForLimitOrder","_constructApproveToke","approveTakerTokenForLimitOrder","approveTakerTokenForFillingP2POrderDirectly","constructGetLimitOrdersContract","getTokenTransferProxy","getLimitOrdersContract","constructBuildLimitOrderTx","_constructBuildTx","buildSwapTx","_constructGetRate","getSwapAndLimitOrderRate","getLimitOrdersRate","_ref2$options","_options","_checkAndParseOrders","totalTakerAmount","takerAmountString","rateInput","optimalRate","checkAndParseOrders","ContractMethod","simpleBuy","buildLimitOrderTx","_checkAndParseOrders2","fillParams","buildSwapAndLimitOrderTx","_checkAndParseOrders3","destDecimals","_orders$reduce","reduce","accum","takerAssetsSet","add","makerAssetsSet","size","_orders$","constructBuildNFTOrder","buildNFTOrder","buildNFTOrderParams","constructSignNFTOrder","signNFTOrder","constructCancelNFTOrder","_constructCancelLimit","cancelNFTOrder","cancelNFTOrderBulk","constructGetNFTOrders","getNFTOrders","getNFTOrderByHash","constructPostNFTOrder","NFTOrderWithSignatureAndPermit","postNFTLimitOrder","postNFTP2POrder","constructGetNFTOrdersContract","getNFTOrdersContract","MinNFTAbi","constructApproveTokenForNFTOrder","approveERC20ForNFTOrder","_constructGetNFTOrder","approveNFTForNFTOrder","constructBuildNFTOrderTx","getSwapAndNFTOrderRate","getNFTOrdersRate","buildNFTOrderTx","buildSwapAndNFTOrderTx","uintToAssetAddress","assetUint","constructFetcher","axios","extra","headers","allParams","_yield$axios$request","apiKey","t0","fetch","body","POSTheaders","apiHeaders","JSON","stringify","json","ok","statusText","fromEntries","config","constructEthersV5ContractCaller","account","providerOrSigner","ethersProviderOrSigner","Contract","EthersContract","staticCall","_contract$callStatic","contract","block","gas","restOverrides","normalizedOverrides","callOverrides","assertEthersContractHasMethodsV5","blockTag","gasLimit","callStatic","concat","signer","txOverrides","txResponse","isEthersProviderWithSigner","isEthersSigner","getSigner","isTypedDataCapableSigner","_signTypedData","isEthersProvider","_isProvider","_isSigner","ethersContractHasMethodsV5","_len","methods","_key","every","_len2","_key2","constructContractCaller","ethersV6ProviderOrSigner","EthersV6Contract","callableContractFunction","getFunction","send","signTypedData","baseTypeRegex","findPrimaryType","candidates","keys","candidatesSet","forEach","candidate","typedDataFields","_type$match","baseType","match","_Array$from","primaryType","web3","_contract$methods","currentProvider","eth","assertWeb3ContractHasMethods","_contract$methods2","_from","preparedCall","promiEvent","unpromiEvent","on","bind","once","_typedData","EIP712Domain","web3ContractHasMethods","viemClient","blockNumber","readContract","functionName","_overrides$gas","_overrides$value","viemTxParams","gasPriceParams","txHash","writeContract","txParamsToViemTxParams","to","maxFeePerGas","maxPriorityFeePerGas","gasPrice","argsToViemArgs","viemDomain","salt","txParams","asNumber","isNaN","constructGetDeltaContract","getDeltaContract","ParaswapDelta","constructGetPartnerFee","partnerFeeUrl","cachedPartnerFee","Map","getPartnerFee","get","set","SWAP_ORDER_EIP_712_TYPES","Bridge","produceDeltaOrderTypedData","orderInput","paraswapDeltaAddress","DELTA_DEFAULT_EXPIRY","buildDeltaSignableOrderData","_ref2$beneficiary","beneficiary","expectedAmount","_ref2$deadline","Date","now","_ref2$nonce","_ref2$permit","permit","kind","_ref2$metadata","metadata","partnerAddress","partnerFeeBps","_ref2$partnerTakesSur","partnerTakesSurplus","bridge","partnerAndFee","producePartnerAndFee","toFixed","OrderKind","SwapSideToOrderKind","_SwapSideToOrderKind","Sell","Buy","constructBuildDeltaOrder","_constructGetDeltaCon","_constructGetPartnerF","buildDeltaOrder","_options$partnerFeeBp","_options$side","_options$nonce","feeOrTakeSurplusSupplied","_partnerAddress","_partnerFeeBps","_partnerTakesSurplus","partnerFeeResponse","swapSide","input","deltaPrice","partnerFee","constructBuildCrosschainOrderBridge","buildCrosschainOrderBridge","destChainId","destinationChainId","protocolSelector","scalingFactor","protocolData","outputToken","constructPostDeltaOrder","postOrderUrl","postDeltaOrder","postData","deltaOrderToPost","sanitizeDeltaOrderData","constructSignDeltaOrder","signDeltaOrder","constructGetDeltaPrice","getDeltaPrice","_getDeltaPrice","includeAgents","excludeAgents","includeAgentsString","excludeAgentsString","price","constructGetDeltaOrders","baseUrl","getDeltaOrderById","orderId","getDeltaOrderByHash","getDeltaOrders","page","getRequiredBalanceForDeltaLimitOrders","constructApproveTokenForDelta","getParaswapDeltaAddress","deltaContract","approveTokenForDelta","constructGetBridgeInfo","bridgeInfoUrl","getBridgeInfo","supportedTokens","constructGetMulticallHandlers","multicallHandlersUrl","_getMulticallHandlers","getMulticallHandlers","constructIsTokenSupportedInDelta","isTokenSupportedInDelta","supported","constructGetQuote","getQuote","_getQuote","ORDER_CANCELLATIONS_EIP_712_TYPES","OrderCancellations","buildCancelDeltaOrderSignableData","orderIds","constructCancelDeltaOrder","signCancelLimitDeltaOrderRequest","postCancelLimitDeltaOrderRequest","cancelUrl","cancelLimitDeltaOrders","constructPartialSDK","_config$apiURL","_config$version","funcs","sdkFuncs","sdkSlice","assign","sdk","constructSwapSDK","constructApproveTokenWithTxResponse","constructSubmitLimitOrder","_constructBuildLimitO","_constructSignLimitOr","_constructPostLimitOr","prepareLimitOrder","orderData","orderWithSignature","submitLimitOrder","submitP2POrder","constructAllLimitOrdersHandlers","limitOrdersGetters","limitOrdersContractGetter","limitOrdersSubmit","limitOrdersBuild","limitOrdersSign","limitOrdersPost","limitOrdersCancel","limitOrdersApproveToken","limitOrdersFillOrderDirectly","limitOrdersBuildTx","constructSubmitDeltaOrder","_constructBuildDeltaO","_constructSignDeltaOr","_constructPostDeltaOr","submitDeltaOrder","orderParams","partiallyFillable","referrerAddress","constructAllDeltaOrdersHandlers","deltaOrdersGetters","deltaOrdersContractGetter","bridgeInfo","multicallHandlers","deltaOrdersSubmit","deltaOrdersBuild","deltaOrdersSign","deltaOrdersPost","deltaOrdersCancel","constructSubmitNFTOrder","_constructBuildNFTOrd","_constructSignNFTOrde","_constructPostNFTOrde","prepareNFTOrder","submitNFTOrder","constructAllNFTOrdersHandlers","NFTOrdersGetters","NFTOrdersContractGetter","NFTOrdersSubmit","NFTOrdersBuild","NFTOrdersSign","NFTOrdersPost","NFTOrdersCancel","NFTOrdersApproveToken","NFTOrdersBuildTx","constructFullSDK","swap","limitOrders","nftOrders","delta","quote","constructAxiosFetcher","constructFetchFetcher","_params$requestParams","constructSimpleSDK","providerOptions","_options$apiURL2","_options$version2","_options$apiURL","constructSimpleContractCaller","_constructEthersV5Con","_transactCall","contractTx","hash","_constructEthersV6Con","constructEthersV6ContractCaller","constructViemContractCaller","_constructWeb3Contrac","constructWeb3ContractCaller","resolve","reject"],"mappings":"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"}