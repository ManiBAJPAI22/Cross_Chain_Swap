{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/helpers/misc.ts","../src/methods/swap/spender.ts","../src/helpers/approve.ts","../src/methods/swap/approve.ts","../src/helpers/token.ts","../src/methods/swap/balance.ts","../src/methods/swap/adapters.ts","../src/methods/swap/helpers/normalizeRateOptions.ts","../src/methods/swap/rates.ts","../src/methods/swap/swapTx.ts","../src/methods/swap/token.ts","../src/methods/common/orders/buildOrderData.ts","../src/methods/common/orders/misc.ts","../src/methods/limitOrders/helpers/misc.ts","../src/methods/nftOrders/helpers/buildOrderData.ts","../src/methods/nftOrders/helpers/misc.ts","../src/methods/swap/transaction.ts","../src/methods/limitOrders/helpers/buildOrderData.ts","../src/methods/limitOrders/buildOrder.ts","../src/methods/limitOrders/signOrder.ts","../src/methods/limitOrders/cancelOrder.ts","../src/methods/common/orders/signature.ts","../src/methods/common/orders/encoding.ts","../src/methods/limitOrders/fillOrderDirectly.ts","../src/methods/limitOrders/getOrders.ts","../src/methods/limitOrders/postOrder.ts","../src/methods/limitOrders/approveForOrder.ts","../src/methods/limitOrders/getOrdersContract.ts","../src/methods/limitOrders/transaction.ts","../src/methods/nftOrders/buildOrder.ts","../src/methods/nftOrders/signOrder.ts","../src/methods/nftOrders/cancelOrder.ts","../src/methods/nftOrders/getOrders.ts","../src/methods/nftOrders/postOrder.ts","../src/methods/nftOrders/getOrdersContract.ts","../src/methods/nftOrders/approveForOrder.ts","../src/methods/nftOrders/transaction.ts","../src/helpers/fetchers/axios.ts","../src/helpers/fetchers/fetch.ts","../src/helpers/providers/ethers.ts","../src/helpers/providers/ethersV6.ts","../src/helpers/providers/helpers.ts","../src/helpers/providers/web3.ts","../src/helpers/providers/viem.ts","../src/methods/delta/helpers/types.ts","../src/methods/delta/getDeltaContract.ts","../src/methods/delta/getPartnerFee.ts","../src/methods/delta/helpers/buildDeltaOrderData.ts","../src/methods/delta/buildDeltaOrder.ts","../src/methods/delta/buildCrosschainOrderBridge.ts","../src/methods/delta/postDeltaOrder.ts","../src/methods/delta/helpers/misc.ts","../src/methods/delta/signDeltaOrder.ts","../src/methods/delta/getDeltaPrice.ts","../src/methods/delta/getDeltaOrders.ts","../src/methods/delta/approveForDelta.ts","../src/methods/delta/getBridgeInfo.ts","../src/methods/delta/getMulticallHandlers.ts","../src/methods/delta/isTokenSupportedInDelta.ts","../src/methods/quote/getQuote.ts","../src/methods/delta/helpers/buildCancelDeltaOrderData.ts","../src/methods/delta/cancelDeltaOrder.ts","../src/sdk/partial.ts","../src/methods/swap/index.ts","../src/methods/limitOrders/index.ts","../src/methods/delta/index.ts","../src/methods/nftOrders/index.ts","../src/sdk/full.ts","../src/sdk/simple.ts"],"sourcesContent":["import { EnumerateLiteral, APIVersion } from './types';\n\nimport type { ContractMethod } from '@paraswap/core';\n\nexport {\n  SwapSide,\n  ContractMethod,\n  ContractMethodV5,\n  ContractMethodV6,\n} from '@paraswap/core';\n\n// allows to pass by name instead of importing enum first\nexport type ContractMethodByName = EnumerateLiteral<typeof ContractMethod>;\n\nexport const API_URL = 'https://api.paraswap.io';\nexport const DEFAULT_VERSION = '6.2' satisfies APIVersion;\n","import type { Primitive } from 'ts-essentials';\n\nexport const objectToFilledEntries = <T extends Record<string, unknown>>(\n  object: T\n): [string, string][] => {\n  return (\n    Object.entries(object)\n      // removes keys with undefined values\n      .filter(([, value]) => value !== undefined)\n      .map(([key, value]) => [key, String(value)])\n  );\n};\n\nexport const constructSearchString = <\n  //                               not arrays or mappings\n  U extends Record<string, Exclude<Primitive, symbol>>\n>(\n  queryOptions: U\n): `?${string}` | '' => {\n  const queryEntries = objectToFilledEntries(queryOptions);\n\n  const queryString = new URLSearchParams(queryEntries).toString();\n\n  // returns empty string or `?${string}`\n  return queryString && `?${queryString}`;\n};\n\ntype MinAxiosError = {\n  code?: string;\n  request?: any;\n  isAxiosError: boolean;\n  message: string;\n};\n\ntype MinAxiosResponse = {\n  data: any;\n  status: number;\n  statusText: string;\n  headers: Record<string, any>;\n  config: { url?: string; method?: string };\n};\n\ntype FetcherErrorConstructorInput = MinAxiosError & {\n  response?: MinAxiosResponse;\n};\n\nexport interface FetcherErrorInterface extends FetcherErrorConstructorInput {\n  status?: number;\n  code?: string;\n}\n\nexport const isFetcherError = (error: unknown): error is FetcherError => {\n  return error instanceof FetcherError;\n};\n\nexport class FetcherError extends Error implements FetcherErrorInterface {\n  code;\n  status;\n  request;\n  response;\n  isAxiosError = false;\n\n  public constructor({\n    code,\n    request,\n    response,\n    isAxiosError,\n    message,\n  }: FetcherErrorConstructorInput) {\n    super();\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetcherError);\n    }\n\n    this.name = this.constructor.name;\n    this.code = code;\n    this.request = request;\n    this.isAxiosError = isAxiosError;\n\n    // no response on AxiosError\n    if (!response) {\n      this.message = message;\n      return;\n    }\n\n    this.response = response;\n\n    const { data, status } = response;\n    this.status = status;\n    this.message = isDataWithError(data) ? data.error : message;\n    this.message = isDataWithError2(data)\n      ? `${data.errorType}${data.description ? `: ${data.description}` : ''}`\n      : this.message;\n  }\n}\n// to turn `object -> Record` for indexed variable access\nfunction isObject(obj: unknown): obj is Record<string | symbol, any> {\n  return !!obj && typeof obj === 'object';\n}\n\nexport function isDataWithError(data: unknown): data is { error: string } {\n  return isObject(data) && typeof data['error'] === 'string';\n}\nexport function isDataWithError2(\n  data: unknown\n): data is { errorType: string; description?: string } {\n  return isObject(data) && typeof data['errorType'] === 'string';\n}\n\nexport type ExtractAbiMethodNames<T extends readonly { name: string }[]> =\n  T[number]['name'];\n\n// reduce element[] to Object{key: prop, val?: element}\n// for example\n// gatherObjectsByProp(Token[], token => token.address) => Record<address, Token|undefined>\nexport function gatherObjectsByProp<T>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string\n): Record<string, T>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transfrom: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, U>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transform?: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, T> | Record<string, U> {\n  return elements.reduce<Record<string, T> | Record<string, U>>(\n    (accum, element, index) => {\n      const key = pickProp(element, index);\n\n      const accumElem: T | U | undefined = accum[key];\n      const transformedElement = transform\n        ? //                       if transform is available, can only be U | undefined\n          transform(element, accumElem as U | undefined, index)\n        : element;\n\n      accum[key] = transformedElement;\n\n      return accum;\n    },\n    {}\n  );\n}\n\n// checks that array has at least one element\nexport const isFilledArray = <T>(array: T[]): array is [T, ...T[]] => {\n  return array.length > 0;\n};\n\nexport function getRandomInt(): number {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nexport function runOnceAndCache<T, Args extends any[]>(\n  // can pass `(...any[]) => any but null | undefined`\n  func: (...args: Args) => NonNullable<T>\n): (...args: Args) => NonNullable<T> {\n  let result: NonNullable<T>;\n\n  return (...args) => {\n    return result ?? (result = func(...args));\n  };\n}\n","import { API_URL, DEFAULT_VERSION } from '../../constants';\nimport { constructSearchString, runOnceAndCache } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  Address,\n  RequestParameters,\n} from '../../types';\n\nexport type GetSpender = (\n  requestParams?: RequestParameters\n) => Promise<Address>;\ntype GetContracts = (\n  requestParams?: RequestParameters\n) => Promise<AdaptersContractsResult>;\n\nexport type GetSpenderFunctions = {\n  getSpender: GetSpender;\n  getAugustusSwapper: GetSpender;\n  getAugustusRFQ: GetSpender;\n  getContracts: GetContracts;\n};\n\nexport interface AdaptersContractsResult {\n  AugustusSwapper: string;\n  TokenTransferProxy: string;\n  AugustusRFQ: string;\n  Executors: {\n    [key: `Executor${number}`]: string;\n  };\n  ParaswapDelta?: string; // only available on chains with Delta support\n}\n\nexport const constructGetSpender = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetSpenderFunctions => {\n  const search = constructSearchString<{ network: number; version: string }>({\n    network: chainId,\n    version,\n  });\n\n  const fetchURL = `${apiURL}/adapters/contracts${search}` as const;\n\n  const _getContracts: GetContracts = async (requestParams) => {\n    const data = await fetcher<AdaptersContractsResult>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  // cached for the same instance of `{getContracts, getSpender, getAugustusSwapper, getAugustusRFQ} = constructGetSpender()`\n  // so should persist across same apiUrl & network\n  const getContracts = runOnceAndCache(_getContracts);\n\n  const getSpender: GetSpender = async (requestParams) => {\n    const { TokenTransferProxy } = await getContracts(requestParams);\n    return TokenTransferProxy;\n  };\n\n  const getAugustusSwapper: GetSpender = async (requestParams) => {\n    const { AugustusSwapper } = await getContracts(requestParams);\n    return AugustusSwapper;\n  };\n\n  const getAugustusRFQ: GetSpender = async (requestParams) => {\n    const { AugustusRFQ } = await getContracts(requestParams);\n    return AugustusRFQ;\n  };\n\n  return { getContracts, getSpender, getAugustusSwapper, getAugustusRFQ };\n};\n","import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../types';\nimport type { ExtractAbiMethodNames } from '../helpers/misc';\nimport type { Address, PriceString } from './token';\n\n// much smaller than the whole ERC20_ABI\nconst MinERC20Abi = [\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinERC20Abi>;\n\ntype ApproveContractCaller<T> = ConstructProviderFetchInput<\n  T,\n  'transactCall'\n>['contractCaller'];\n\nexport type ApproveToken<T> = (\n  amount: PriceString,\n  tokenAddress: Address,\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type GetSpenderAsyncOrSync = (\n  requestParams?: RequestParameters\n) => Address | Promise<Address>;\n\nexport function approveTokenMethodFactory<T>(\n  contractCaller: ApproveContractCaller<T>,\n  getSpender: GetSpenderAsyncOrSync\n): ApproveToken<T> {\n  return async (amount, tokenAddress, overrides = {}, requestParams) => {\n    const spender = await getSpender(requestParams);\n\n    const res = await contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinERC20Abi,\n      contractMethod: 'approve',\n      args: [spender, amount],\n      overrides,\n    });\n\n    return res;\n  };\n}\n","import { constructGetSpender } from './spender';\nimport type {\n  ConstructProviderFetchInput,\n  TxSendOverrides,\n  Address,\n  PriceString,\n  RequestParameters,\n} from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\n\ntype ApproveTokenBulk<T> = (\n  amount: PriceString,\n  tokenAddresses: Address[],\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<Awaited<T>[]>;\n\nexport type ApproveTokenFunctions<T> = {\n  approveToken: ApproveToken<T>;\n  approveTokenBulk: ApproveTokenBulk<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveToken = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenFunctions<T> => {\n  // getSpender is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getSpender } = constructGetSpender(options);\n\n  const approveToken: ApproveToken<T> = approveTokenMethodFactory<T>(\n    options.contractCaller,\n    getSpender\n  );\n\n  const approveTokenBulk: ApproveTokenBulk<T> = async (\n    amount,\n    tokenAddresses,\n    overrides,\n    requestParams\n  ) => {\n    return Promise.all(\n      tokenAddresses.map((tokenAddress) =>\n        approveToken(amount, tokenAddress, overrides, requestParams)\n      )\n    );\n  };\n\n  return { approveToken, approveTokenBulk };\n};\n","import type { MarkOptional } from 'ts-essentials';\n\n/**\n * @type hex token or account address\n */\nexport type Address = string;\n/**\n * @type hex token address or token symbol\n */\nexport type AddressOrSymbol = string;\n/**\n * @type number in string form\n */\nexport type PriceString = string;\n/**\n * @type transaction hash\n */\nexport type TxHash = `0x${string}`;\n\n// @TODO sync with what it actually is\nexport type LendingToken =\n  | 'cToken'\n  | 'iToken'\n  | 'aToken'\n  | 'aToken2'\n  | 'idleToken'\n  | 'Chai'\n  | 'bDAI';\n\nexport type TokenType = 'ETH' | 'ERC20' | 'SYNTH';\n\n/**\n * @type Token object returned from API used internally in API\n */\n// consider if need the old class Token for backwards compatipility\n// otherwise no real need\nexport type Token = {\n  address: string;\n  decimals: number;\n  symbol?: string | undefined;\n  tokenType: LendingToken | TokenType;\n  mainConnector: string;\n  connectors: string[];\n  network: number;\n  img?: string | undefined;\n  allowance?: string | undefined;\n  balance?: string | undefined;\n};\n\ntype ConstructTokenInput = MarkOptional<\n  Token,\n  // these props are constructed from other, required props\n  'tokenType' | 'mainConnector' | 'connectors' | 'network'\n>;\n\nexport const constructToken = (tokenProps: ConstructTokenInput): Token => {\n  const {\n    tokenType = 'ERC20',\n    mainConnector = 'ETH',\n    connectors: connectorsInput = [],\n    network = 1,\n    ...rest\n  } = tokenProps;\n\n  const connectors: Token['connectors'] =\n    connectorsInput.length > 0 ? connectorsInput : [mainConnector];\n\n  return {\n    tokenType,\n    connectors,\n    mainConnector,\n    network,\n    ...rest,\n  };\n};\n","import { API_URL } from '../../constants';\nimport {\n  Token,\n  Address,\n  constructToken,\n  AddressOrSymbol,\n} from '../../helpers/token';\nimport type {\n  ConstructFetchInput,\n  TokenApiResponse,\n  TokensApiResponse,\n  RequestParameters,\n} from '../../types';\n\ntype GetBalances = (\n  userAddress: Address,\n  requestParams?: RequestParameters\n) => Promise<Token[]>;\ntype GetBalance = (\n  userAddress: Address,\n  tokenAddressOrSymbol: AddressOrSymbol,\n  requestParams?: RequestParameters\n) => Promise<Token | typeof NOT_FOUND_RESPONSE>;\n\nexport interface Allowance {\n  tokenAddress: Address;\n  allowance: string;\n}\n\ntype GetAllowances = (\n  userAddress: Address,\n  tokenAddresses: Address[],\n  requestParams?: RequestParameters\n) => Promise<Allowance[]>;\ntype GetAllowance = (\n  userAddress: Address,\n  tokenAddress: Address,\n  requestParams?: RequestParameters\n) => Promise<Allowance | typeof NOT_FOUND_RESPONSE>;\n\nexport const isAllowance = (\n  arg: Awaited<ReturnType<GetAllowance>>\n): arg is Allowance => {\n  return 'allowance' in arg;\n};\n\nexport type GetBalancesFunctions = {\n  getBalance: GetBalance;\n  getBalances: GetBalances;\n  getAllowance: GetAllowance;\n  getAllowances: GetAllowances;\n};\n\nconst NOT_FOUND_RESPONSE = { message: 'Not Found' } as const;\n\nexport const constructGetBalances = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetBalancesFunctions => {\n  const tokensUrl = `${apiURL}/users/tokens/${chainId}` as const;\n\n  const getBalances: GetBalances = async (userAddress, requestParams) => {\n    const fetchURL = `${tokensUrl}/${userAddress}` as const;\n\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n\n    return tokens;\n  };\n\n  const getBalance: GetBalance = async (\n    userAddress,\n    tokenAddressOrSymbol,\n    requestParams\n  ) => {\n    const fetchURL =\n      `${tokensUrl}/${userAddress}/${tokenAddressOrSymbol}` as const;\n\n    const data = await fetcher<TokenApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    if (!data.token) {\n      return NOT_FOUND_RESPONSE;\n    }\n\n    return constructToken(data.token);\n  };\n\n  const getAllowances: GetAllowances = async (\n    userAddress,\n    tokenAddresses,\n    requestParams\n  ) => {\n    const tokenAddressesLowercaseSet = new Set(\n      tokenAddresses.map((address) => address.toLowerCase())\n    );\n\n    const balances = await getBalances(userAddress, requestParams);\n\n    const allowances: Allowance[] = balances\n      .filter((token) =>\n        tokenAddressesLowercaseSet.has(token.address.toLowerCase())\n      )\n      .map(({ address, allowance = '0' }) => ({\n        tokenAddress: address,\n        allowance,\n      }));\n\n    return allowances;\n  };\n\n  const getAllowance: GetAllowance = async (\n    userAddress,\n    tokenAddress,\n    requestParams\n  ) => {\n    const balanceOrNotFound = await getBalance(\n      userAddress,\n      tokenAddress,\n      requestParams\n    );\n\n    if ('message' in balanceOrNotFound) {\n      return balanceOrNotFound;\n    }\n\n    const { address, allowance = '0' } = balanceOrNotFound;\n\n    return { tokenAddress: address, allowance };\n  };\n\n  return {\n    getBalance,\n    getBalances,\n    getAllowance,\n    getAllowances,\n  };\n};\n","import type {\n  ConstructFetchInput,\n  APIVersion,\n  RequestParameters,\n} from '../../types';\nimport { constructSearchString } from '../../helpers/misc';\nimport { API_URL, DEFAULT_VERSION } from '../../constants';\n\ntype AdaptersAsStrings = string[];\n\nexport type GetAdaptersFunctions = {\n  getAdapters: (\n    requestParams?: RequestParameters\n  ) => Promise<AdaptersAsStrings>;\n};\n\ntype SearchStringParams = {\n  network: number;\n  version?: APIVersion;\n};\n\nexport const constructGetAdapters = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetAdaptersFunctions => {\n  const getAdapters: GetAdaptersFunctions['getAdapters'] = async (\n    requestParams\n  ): Promise<AdaptersAsStrings> => {\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const query = constructSearchString<SearchStringParams>({\n      network: chainId,\n      version,\n    });\n\n    const fetchURL = `${apiURL}/adapters/list${query}` as const;\n\n    const data = await fetcher<AdaptersAsStrings>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  return { getAdapters };\n};\n","import type { PickKeys } from 'ts-essentials';\nimport type { RateOptions } from '../rates';\n\ntype StringArrKeys = PickKeys<RateOptions, string[] | undefined>;\n\ntype MinRateOptionsInput = Pick<RateOptions, StringArrKeys> &\n  Pick<RateOptions, 'partner'>;\n\ntype NormalizedRateOptions<\n  O extends MinRateOptionsInput,\n  T extends { options?: Partial<O> }\n> = Partial<Record<StringArrKeys | 'partner', string>> &\n  Partial<Omit<O, StringArrKeys | 'partner'>> &\n  Omit<T, 'options'>;\n\nexport function normalizeRateOptions<\n  O extends MinRateOptionsInput,\n  T extends { options?: Partial<O> }\n>({ options = {}, ...restInput }: T): NormalizedRateOptions<O, T> {\n  const {\n    excludeContractMethods,\n    includeContractMethods,\n    partner,\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    ...restOptions\n  } = options;\n\n  const [\n    _includeDEXS,\n    _excludeDEXS,\n    _excludePools,\n    _excludeContractMethods,\n    _includeContractMethods,\n  ] = [\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    excludeContractMethods,\n    includeContractMethods,\n    //                                                                                              no \"\" empty string\n  ].map((array) => array?.join(',') || undefined);\n\n  const transformed: Partial<Record<StringArrKeys | 'partner', string>> = {\n    excludeContractMethods: _excludeContractMethods,\n    includeContractMethods: _includeContractMethods,\n    partner,\n    includeDEXS: _includeDEXS,\n    excludeDEXS: _excludeDEXS,\n    excludePools: _excludePools,\n  };\n\n  return { ...transformed, ...restOptions, ...restInput };\n}\n","import {\n  API_URL,\n  DEFAULT_VERSION,\n  ContractMethodByName,\n} from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  PriceRouteApiResponse,\n  Address,\n  AddressOrSymbol,\n  PriceString,\n  OptimalRate,\n  RequestParameters,\n} from '../../types';\nimport { normalizeRateOptions } from './helpers/normalizeRateOptions';\n\ntype RateQueryParams = {\n  /**\n   * @description Source Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  srcToken: string;\n\n  /**\n   * @description Source Token Decimals. (Can be omitted if Token Symbol is used in `srcToken`).\n   */\n  srcDecimals?: number;\n\n  /**\n   * @description Destination Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  destToken: string;\n\n  /**\n   * @description srcToken amount (in case of SELL) or destToken amount (in case of BUY). The amount should be in **WEI/Raw units** (eg. 1WBTC -> 100000000).\n   */\n  amount: string;\n\n  /**\n   * @description **SELL** or **BUY**. Default: `SELL`.\n   */\n  side?: 'SELL' | 'BUY';\n\n  /**\n   * @description Network ID. (Mainnet - 1, Optimism - 10, BSC - 56, Polygon - 137, Fantom - 250, zkEVM - 1101, Base - 8453, Arbitrum - 42161, Avalanche - 43114). Default: `1`.\n   */\n  network?: number;\n\n  /**\n   * @description If provided, **others** object is filled in the response with price quotes from other exchanges _(if available for comparison)_. Default: `false`.\n   */\n  otherExchangePrices?: boolean;\n\n  /**\n   * @description Comma Separated List of DEXs to include. **Supported DEXs:** UniswapV2, UniswapV3, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, Balancer, MakerDAO, Chai, Aave, Aave2 and more. You can view all currently supported dexes filtered by chain [here](https://api.paraswap.io/adapters/list/1) eg: `UniswapV3,MakerDAO`.\n   */\n  includeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to include in pricing (without spaces). View the list of the supported methods for [V5](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v5#supported-methods) and [V6](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v6.2#supported-methods) eg: `swapExactAmountIn,swapExactAmountInOnUniswapV2`.\n   */\n  includeContractMethods?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to exclude from pricing (without spaces). View the list of the supported methods for [V5](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v5#supported-methods) and [V6](https://developers.velora.xyz/api/velora-api/velora-market-api/master/api-v6.2#supported-methods).\n   */\n  excludeContractMethods?: string;\n\n  /**\n   * @description User's Wallet Address.\n   */\n  userAddress?: string;\n\n  /**\n   * @description Dash (-) separated list of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string;\n\n  /**\n   * @description Partner string.\n   */\n  partner?: string;\n\n  /**\n   * @description Destination Token Decimals. (Can be omitted if Token Symbol is used in `destToken`).\n   */\n  destDecimals?: number;\n\n  /**\n   * @description In %. It's a way to bypass the API price impact check (default = 15%).\n   */\n  maxImpact?: number;\n\n  /**\n   * @description Receiver's Wallet address. (Can be omitted if swapping tokens from and to same account).\n   */\n  receiver?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  srcTokenTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  destTokenTransferFee?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.\n   */\n  srcTokenDexTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs, not on ordinary transfers.\n   */\n  destTokenDexTransferFee?: string;\n\n  /**\n   * @description To specify the protocol version. **Values:** 5 or 6.2 **Default**: 5.\n   */\n  version?: number | string;\n\n  /**\n   * @description Specify that methods without fee support should be excluded from the price route. Default: `false`.\n   */\n  excludeContractMethodsWithoutFeeModel?: boolean;\n\n  /**\n   * @description If tokens USD prices are not available, `Bad USD Price` error will be thrown. Use this param to skip this check. Default: `false`.\n   */\n  ignoreBadUsdPrice?: boolean;\n  /**\n   * @description \tExclude all RFQs from pricing, e.g.: AugustusRFQ, Hashflow. Default: false\n   */\n  excludeRFQ?: boolean;\n};\n\n// more details in the docs https://developers.velora.xyz/api/velora-api/velora-market-api/get-rate-for-a-token-pair#query-parameters\nexport type RateOptions = {\n  excludeDEXS?: string[];\n  includeDEXS?: string[];\n  excludePools?: string[];\n  excludeContractMethods?: ContractMethodByName[];\n  includeContractMethods?: ContractMethodByName[];\n  partner?: string;\n  /** @description In %. It's a way to bypass the API price impact check (default = 15%) */\n  maxImpact?: number;\n  maxUSDImpact?: number;\n  otherExchangePrices?: boolean;\n  /** @description proceed with priceRoute building even when tokens don't have USD price. Default: false */\n  ignoreBadUsdPrice?: boolean;\n  /** @description Exclude all RFQs from pricing, e.g.: AugustusRFQ, Hashflow. Default: false */\n  excludeRFQ?: boolean;\n  /** @description \tSpecify that methods without fee support should be excluded from the price route. Default: false */\n  excludeContractMethodsWithoutFeeModel?: boolean;\n  /** @description If the source token is a tax token, you should specify the tax amount in BPS.  */\n  srcTokenTransferFee?: string;\n  /** @description If the destination token is a tax token, you should specify the tax amount in BPS.  */\n  destTokenTransferFee?: string;\n  /** @description Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.  */\n  srcTokenDexTransferFee?: string;\n  /** @description Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.  */\n  destTokenDexTransferFee?: string;\n};\n\ntype CommonGetRateInput = {\n  amount: PriceString;\n  userAddress?: Address;\n  side?: 'SELL' | 'BUY';\n  options?: RateOptions;\n  srcDecimals?: number;\n  destDecimals?: number;\n};\n\nexport type GetRateInput = CommonGetRateInput & {\n  srcToken: AddressOrSymbol;\n  destToken: AddressOrSymbol;\n};\n\nexport type GetRate = (\n  options: GetRateInput,\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\ntype GetRateByRouteInput = CommonGetRateInput & {\n  route: AddressOrSymbol[];\n};\n\ntype GetRateByRoute = (\n  options: GetRateByRouteInput,\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\nexport type GetRateFunctions = {\n  getRate: GetRate;\n  getRateByRoute: GetRateByRoute;\n};\nconst INVALID_ROUTE = 'Invalid Route';\n\nexport const constructGetRate = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetRateFunctions => {\n  const pricesUrl = `${apiURL}/prices` as const;\n\n  const getRate: GetRate = async (\n    { srcToken, destToken, ...rest },\n    requestParams\n  ) => {\n    const parsedOptions = normalizeRateOptions(rest);\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<Omit<RateQueryParams, 'route'>>({\n      srcToken,\n      destToken,\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.priceRoute;\n  };\n\n  const getRateByRoute: GetRateByRoute = async (\n    { route, ...rest },\n    requestParams\n  ) => {\n    if (route.length < 2) {\n      throw new Error(INVALID_ROUTE);\n    }\n\n    const parsedOptions = normalizeRateOptions(rest);\n\n    const _route = route.join('-');\n\n    const search = constructSearchString<\n      Omit<RateQueryParams, 'srcToken' | 'destToken'>\n    >({\n      route: _route, // route can be used in place of srcToken+destToken\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.priceRoute;\n  };\n\n  return {\n    getRate,\n    getRateByRoute,\n  };\n};\n","import {\n  API_URL,\n  DEFAULT_VERSION,\n  ContractMethodByName,\n} from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  RequestParameters,\n  SwapApiResponse,\n} from '../../types';\nimport { normalizeRateOptions } from './helpers/normalizeRateOptions';\n\n/**\n * Types for transaction parameters.\n */\ntype SwapQueryParams = {\n  /**\n   * @description Source Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  srcToken: string;\n\n  /**\n   * @description Source Token Decimals. (Can be omitted if Token Symbol is used in `srcToken`).\n   */\n  srcDecimals?: number;\n\n  /**\n   * @description Destination Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  destToken: string;\n\n  /**\n   * @description srcToken amount (in case of SELL) or destToken amount (in case of BUY). The amount should be in **WEI/Raw units** (eg. 1WBTC -> 100000000).\n   */\n  amount: string;\n\n  /**\n   * @description **SELL** or **BUY**. Default: `SELL`.\n   */\n  side: 'SELL' | 'BUY';\n\n  /**\n   * @description Network ID. (Mainnet - 1, Optimism - 10, BSC - 56, Polygon - 137, Fantom - 250, zkEVM - 1101, Base - 8453, Arbitrum - 42161, Avalanche - 43114). Default: `1`.\n   */\n  network?: number;\n\n  /**\n   * @description Comma Separated List of DEXs to include. **Supported DEXs:** Uniswap, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, 0x, MakerDAO, Chai, Aave, Aave2, MultiPath, MegaPath, Curve, Curve3, Saddle, IronV2, BDai, idle, Weth, Beth, UniswapV2, Balancer, 0xRFQt, SushiSwap, LINKSWAP, Synthetix, DefiSwap, Swerve, CoFiX, Shell, DODOV1, DODOV2, OnChainPricing, PancakeSwap, PancakeSwapV2, ApeSwap, Wbnb, acryptos, streetswap, bakeryswap, julswap, vswap, vpegswap, beltfi, ellipsis, QuickSwap, COMETH, Wmatic, Nerve, Dfyn, UniswapV3, Smoothy, PantherSwap, OMM1, OneInchLP, CurveV2, mStable, WaultFinance, MDEX, ShibaSwap, CoinSwap, SakeSwap, JetSwap, Biswap, BProtocol eg: `UniswapV3,0x`.\n   */\n  includeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to include without spaces. **Available values:** swapOnUniswap, buyOnUniswap, swapOnUniswapFork, buyOnUniswapFork, swapOnUniswapV2Fork, buyOnUniswapV2Fork, simpleBuy, simpleSwap, multiSwap, megaSwap, protectedMultiSwap, protectedMegaSwap, protectedSimpleSwap, protectedSimpleBuy, swapOnZeroXv2, swapOnZeroXv4, buy. eg: `simpleSwap,multiSwap`.\n   */\n  includeContractMethods?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to exclude without spaces. (from the list of contract methods mentioned above).\n   */\n  excludeContractMethods?: string;\n\n  /**\n   * @description User's Wallet Address.\n   */\n  userAddress: string;\n\n  /**\n   * @description Dash (-) separated list of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string;\n\n  /**\n   * @description Partner string.\n   */\n  partner?: string;\n\n  /**\n   * @description If provided it is used together with `partnerAddress`. Should be in basis points percentage. Look at `slippage` parameter description for understanding better. Eg: `200` (for 2% fee percent). Fees have to be claimed from the Fee Claimer contract unless `_isSurplusToUser_` or `_isDirectFeeTransfer_` are used.\n   */\n  partnerFeeBps?: string;\n\n  /**\n   * @description Address that will be entitled to claim fees or surplus. Fees have to be claimed from the Fee Claimer contract unless `_isSurplusToUser_` or `_isDirectFeeTransfer_` are used.\n   */\n  partnerAddress?: string;\n\n  /**\n   * @description Allowed slippage percentage represented in basis points. _Eg:_ for **2.5%** slippage, set the value to **2.5 \\* 100 = 250**; for 10% = 1000.\n   */\n  slippage: number;\n\n  /**\n   * @description Destination Token Decimals. (Can be omitted if Token Symbol is used in `destToken`).\n   */\n  destDecimals?: number;\n\n  /**\n   * @description In %. It's a way to bypass the API price impact check (default = 15%).\n   */\n  maxImpact?: number;\n\n  /**\n   * @description Receiver's Wallet address. (Can be omitted if swapping tokens from and to same account).\n   */\n  receiver?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  srcTokenTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  destTokenTransferFee?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.\n   */\n  srcTokenDexTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs, not on ordinary transfers.\n   */\n  destTokenDexTransferFee?: string;\n\n  /**\n   * @description To specify the protocol version. **Values:** 5 or 6.2 **Default**: 5.\n   */\n  version?: number | string;\n\n  /**\n   * @description If tokens USD prices are not available, `Bad USD Price` error will be thrown. Use this param to skip this check. Default: `false`.\n   */\n  ignoreBadUsdPrice?: boolean;\n\n  /**\n   * @description Specify if user should receive surplus instead of partner. Default: `false`.\n   */\n  isSurplusToUser?: boolean;\n\n  /**\n   * @description Specify if fees should be sent directly to the partner instead of registering them on FeeClaimer. Default: `false`.\n   */\n  isDirectFeeTransfer?: boolean;\n\n  /**\n   * @description Allows for capping the surplus at 1% maximum. Default: `true`.\n   */\n  isCapSurplus?: boolean;\n\n  /**\n   * @description Allows to collect surplus. Works with `partnerAddress`. Default: `false`.\n   */\n  takeSurplus?: boolean;\n};\n\ntype SwapTxInputFields =\n  | 'srcToken'\n  | 'destToken'\n  | 'amount'\n  | 'side'\n  | 'srcDecimals'\n  | 'destDecimals'\n  | 'userAddress'\n  | 'slippage';\ntype SwapTxInputListFields =\n  | 'includeDEXS'\n  | 'excludeDEXS'\n  | 'includeContractMethods'\n  | 'excludeContractMethods'\n  | 'route';\n\ntype SwapRateOptions = Omit<\n  SwapQueryParams,\n  SwapTxInputFields | SwapTxInputListFields | 'network' | 'version'\n> & {\n  /**\n   * @description List of DEXs to include. **Supported DEXs:** Uniswap, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, 0x, MakerDAO, Chai, Aave, Aave2, MultiPath, MegaPath, Curve, Curve3, Saddle, IronV2, BDai, idle, Weth, Beth, UniswapV2, Balancer, 0xRFQt, SushiSwap, LINKSWAP, Synthetix, DefiSwap, Swerve, CoFiX, Shell, DODOV1, DODOV2, OnChainPricing, PancakeSwap, PancakeSwapV2, ApeSwap, Wbnb, acryptos, streetswap, bakeryswap, julswap, vswap, vpegswap, beltfi, ellipsis, QuickSwap, COMETH, Wmatic, Nerve, Dfyn, UniswapV3, Smoothy, PantherSwap, OMM1, OneInchLP, CurveV2, mStable, WaultFinance, MDEX, ShibaSwap, CoinSwap, SakeSwap, JetSwap, Biswap, BProtocol eg: `UniswapV3,0x`.\n   */\n  includeDEXS?: string[];\n\n  /**\n   * @description List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string[];\n\n  /**\n   * @description List of Contract Methods to include without spaces. **Available values:** swapOnUniswap, buyOnUniswap, swapOnUniswapFork, buyOnUniswapFork, swapOnUniswapV2Fork, buyOnUniswapV2Fork, simpleBuy, simpleSwap, multiSwap, megaSwap, protectedMultiSwap, protectedMegaSwap, protectedSimpleSwap, protectedSimpleBuy, swapOnZeroXv2, swapOnZeroXv4, buy. eg: `simpleSwap,multiSwap`.\n   */\n  includeContractMethods?: ContractMethodByName[];\n\n  /**\n   * @description List of Contract Methods to exclude without spaces. (from the list of contract methods mentioned above).\n   */\n  excludeContractMethods?: ContractMethodByName[];\n};\n\ntype SwapTxInput = Pick<SwapQueryParams, SwapTxInputFields> & {\n  /**\n   * @description List of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string[];\n\n  options?: SwapRateOptions;\n};\n\nexport type SwapTxResult = SwapApiResponse;\n\nexport type GetSwapTxData = (\n  options: SwapTxInput,\n  requestParams?: RequestParameters\n) => Promise<SwapTxResult>;\n\nexport type GetSwapTxFunctions = {\n  getSwapTxData: GetSwapTxData;\n};\n\nexport const constructSwapTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetSwapTxFunctions => {\n  const pricesUrl = `${apiURL}/swap` as const;\n\n  const getSwapTxData: GetSwapTxData = async (\n    { srcToken, destToken, amount, route, ...rest },\n    requestParams\n  ) => {\n    const parsedOptions = normalizeRateOptions(rest);\n\n    const _route = route?.join('-');\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SwapQueryParams>({\n      amount,\n      srcToken,\n      destToken,\n      route: _route,\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<SwapApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  return {\n    getSwapTxData,\n  };\n};\n","import { API_URL } from '../../constants';\nimport { constructToken } from '../../helpers/token';\nimport type {\n  RequestParameters,\n  ConstructFetchInput,\n  Token,\n  TokensApiResponse,\n} from '../../types';\n\ntype GetTokens = (extra?: RequestParameters) => Promise<Token[]>;\n\nexport type GetTokensFunctions = {\n  getTokens: GetTokens;\n};\n\nexport const constructGetTokens = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetTokensFunctions => {\n  const fetchURL = `${apiURL}/tokens/${chainId}` as const;\n\n  const getTokens: GetTokens = async (requestParams) => {\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n    return tokens;\n  };\n\n  return { getTokens };\n};\n","export const name = 'AUGUSTUS RFQ';\nexport const version = '1';\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\n\ntype TypedDataDomain = {\n  name?: string;\n  version?: string;\n  chainId?: bigint | string | number;\n  verifyingContract?: string;\n  salt?: string;\n};\n\nexport type TypedDataField = {\n  name: string;\n  type: string;\n};\n\nexport type SignableTypedData = {\n  types: Record<string, TypedDataField[]>;\n  domain: TypedDataDomain;\n  data: Record<string, any>;\n};\n\nexport type Domain = {\n  name: string;\n  version: string;\n  chainId: number;\n  verifyingContract: string;\n};\n","import type { LimitOrderFromApi } from '../../limitOrders/helpers/types';\nimport { ZERO_ADDRESS } from './buildOrderData';\nimport type { OrderType } from './types';\n\ntype GetBaseFetchUrlInput = {\n  apiURL: string;\n  chainId: number;\n};\n\nexport type BaseFetchUrlInputConstructor<Kind extends OrderKind> = (\n  params: GetBaseFetchUrlInput\n) => UrlByTypeFunction<Kind>;\n\ntype OrderType2URLPart = {\n  LIMIT: 'orders';\n  P2P: 'p2p';\n};\n\ntype OrderKind = 'nft' | 'ft';\n\nexport type BaseFetchUrl<\n  Kind extends OrderKind,\n  Type extends OrderType = OrderType\n> = `${string}/${Kind}/${OrderType2URLPart[Type]}/${number}`;\n\nexport type MinFetchUrl<Kind extends OrderKind> = `${string}/${Kind}/order`;\nexport type OrderFillableBalanceFetchUrl<Kind extends OrderKind> =\n  `${string}/${Kind}/fillablebalance/${number}`;\n\ninterface UrlByTypeFunction<Kind extends OrderKind> {\n  (): MinFetchUrl<Kind>;\n  (type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n  (type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n  (type: OrderType): BaseFetchUrl<Kind>;\n  (type: 'fillablebalance'): OrderFillableBalanceFetchUrl<Kind>;\n  (type?: OrderType | 'fillablebalance'):\n    | BaseFetchUrl<Kind>\n    | MinFetchUrl<Kind>\n    | OrderFillableBalanceFetchUrl<Kind>;\n}\n\nexport function baseFetchUrlGetterFactory<Kind extends OrderKind>(\n  orderKind: Kind\n): BaseFetchUrlInputConstructor<Kind> {\n  return function constructBaseFetchUrlGetter({\n    chainId,\n    apiURL,\n  }: GetBaseFetchUrlInput): UrlByTypeFunction<Kind> {\n    function urlGetter(type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n    function urlGetter(type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n    function urlGetter(type: OrderType): BaseFetchUrl<Kind>;\n    function urlGetter(\n      type: 'fillablebalance'\n    ): OrderFillableBalanceFetchUrl<Kind>;\n    function urlGetter(): MinFetchUrl<Kind>;\n    function urlGetter(\n      type?: OrderType | 'fillablebalance'\n    ):\n      | BaseFetchUrl<Kind>\n      | MinFetchUrl<Kind>\n      | OrderFillableBalanceFetchUrl<Kind> {\n      if (!type) return `${apiURL}/${orderKind}/order` as const;\n\n      if (type === 'fillablebalance')\n        return `${apiURL}/${orderKind}/fillablebalance/${chainId}` as const;\n\n      const orderURLpart = type === 'LIMIT' ? 'orders' : 'p2p';\n      return `${apiURL}/${orderKind}/${orderURLpart}/${chainId}` as const;\n    }\n\n    return urlGetter;\n  };\n}\n\n// orders with taker = EOA address\n// that can't be filled through AugustusSwapper,\n// only through AugustusRFQ\nexport function isOrderFillableDirectlyOnRFQOnly(\n  order: Pick<LimitOrderFromApi, 'taker' | 'takerFromMeta'>\n): boolean {\n  // with 0x taker fillable by anyone\n  if (order.taker === ZERO_ADDRESS) return false;\n\n  // same intended EOA taker and msg.sender taker\n  return order.taker.toLowerCase() === order.takerFromMeta.toLowerCase();\n}\n","import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n  OrderFillableBalanceFetchUrl,\n} from '../../common/orders/misc';\nimport type { OrderData } from './buildOrderData';\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset,\n  takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n}: OrderData & Record<string, any>): OrderData {\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n}\n\n/* \nGET\n/ft/orders/:chainId/maker/:walletAddress\n/ft/orders/:chainId/taker/:walletAddress\n/ft/p2p/:chainId/maker/:walletAddress\n/ft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'ft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/ft/fillablebalance/:chainId/:walletAddress/:makerAsset?\n*/\nexport type GetRequiredAllowanceURL =\n  `${OrderFillableBalanceFetchUrl<'ft'>}/${string}${`/${string}` | ''}`;\n\n/*\nGET\n/ft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'ft'>}/${string}`;\n\n/* \nPOST create order\n/ft/orders/:chainId/\n/ft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'ft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'ft'> =\n  baseFetchUrlGetterFactory('ft');\n","import type { Address } from '../../../types';\nimport type { AssetTypeVariant } from './types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\nimport { getRandomInt } from '../../../helpers/misc';\n\nconst OrderNFT = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'uint256' },\n  { name: 'makerAssetId', type: 'uint256' },\n  { name: 'takerAsset', type: 'uint256' },\n  { name: 'takerAssetId', type: 'uint256' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildNFTOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  makerAssetId: string; // required when BUYing NFT\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  takerAssetId?: string;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  makerAssetType: AssetTypeVariant;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  takerAssetType: AssetTypeVariant;\n  maker: Address;\n  // OrderData.taker must be Augustus for p2p limitOrders to involve swap through Augustus\n  // this is the actual user taker which will go into nonceAndMeta\n  taker?: Address;\n  AugustusAddress: Address;\n}\n\nexport type SignableNFTOrderData = {\n  types: { OrderNFT: typeof OrderNFT };\n  domain: Domain;\n  data: NFTOrderData;\n};\n\nexport type BigIntAsString = string;\n\nexport type NFTOrderData = {\n  expiry: number;\n  // '1' when trading 1 NFT token\n  makerAmount: BigIntAsString;\n  makerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  makerAssetId: BigIntAsString;\n  // '1' when trading 1 NFT token\n  takerAmount: BigIntAsString;\n  takerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  takerAssetId: BigIntAsString;\n  nonceAndMeta: BigIntAsString;\n  maker: Address;\n  taker: Address;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset: _makerAssetAddress,\n  takerAsset: _takerAssetAddress,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId = '0',\n  makerAssetType,\n  takerAssetType,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus -- taker = Augustus, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus -- taker = Augustus, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS, //@TODO allow Orders outside of AugustusRFQ\n}: BuildNFTOrderDataInput): SignableNFTOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  const makerAsset = assetAddressToUint(_makerAssetAddress, makerAssetType);\n\n  const takerAsset = assetAddressToUint(_takerAssetAddress, takerAssetType);\n\n  const orderNFT: NFTOrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker: AugustusAddress,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n\n  return {\n    types: { OrderNFT },\n    domain: { name, version, chainId, verifyingContract },\n    data: orderNFT,\n  };\n}\n\n// create a packed number that contains assetAddress and AssetType\nexport function assetAddressToUint(\n  assetAddress: Address,\n  assetType: AssetTypeVariant\n): BigIntAsString {\n  return (BigInt(assetAddress) + (BigInt(assetType) << BigInt(160))).toString(\n    10\n  );\n}\n","import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n} from '../../common/orders/misc';\nimport {\n  assetAddressToUint,\n  BuildNFTOrderDataInput,\n  NFTOrderData,\n} from './buildOrderData';\n\n// any number can be assigned to AssetType enum\n// https://github.com/Microsoft/TypeScript/issues/22311\n// export enum AssetType {\n//   ERC20 = 0,\n//   ERC1155 = 1,\n//   ERC721 = 2,\n// }\n\nexport const AssetType = {\n  ERC20: 0,\n  ERC1155: 1,\n  ERC721: 2,\n} as const;\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset: _makerAsset,\n  takerAsset: _takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId,\n  // asset types provided when Order has them ,e.g. got Order by hash from API\n  makerAssetType,\n  takerAssetType,\n}: NFTOrderData &\n  Partial<Pick<BuildNFTOrderDataInput, 'makerAssetType' | 'takerAssetType'>> &\n  Record<string, any>): NFTOrderData {\n  const makerAsset =\n    makerAssetType !== undefined && _makerAsset.startsWith('0x')\n      ? assetAddressToUint(_makerAsset, makerAssetType)\n      : _makerAsset;\n  const takerAsset =\n    takerAssetType !== undefined && _takerAsset.startsWith('0x')\n      ? assetAddressToUint(_takerAsset, takerAssetType)\n      : _takerAsset;\n\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n}\n\n/* \nGET\n/nft/orders/:chainId/maker/:walletAddress\n/nft/orders/:chainId/taker/:walletAddress\n/nft/p2p/:chainId/maker/:walletAddress\n/nft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'nft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/nft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'nft'>}/${string}`;\n\n/* \nPOST create order\n/nft/orders/:chainId/\n/nft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'nft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'nft'> =\n  baseFetchUrlGetterFactory('nft');\n","import type { WithGasPrice, WithMaxFee } from '../../gas';\nimport type {\n  ConstructFetchInput,\n  Address,\n  FetcherPostInput,\n  PriceString,\n  OptimalRate,\n  RequestParameters,\n} from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { OrderData } from '../limitOrders/buildOrder';\nimport { sanitizeOrderData as sanitizeLimitOrderData } from '../limitOrders/helpers/misc';\nimport { sanitizeOrderData as sanitizeNFTOrderData } from '../nftOrders/helpers/misc';\nimport { AssetTypeVariant } from '../nftOrders/helpers/types';\n\nexport interface TransactionParams {\n  to: string;\n  from: string;\n  value: string;\n  data: string;\n  gas?: string;\n  chainId: number;\n  // either gasPrice or maxFeePerGas & maxPriorityFeePerGas will be present\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n}\n\nexport type SwappableOrder = OrderData & {\n  permitMakerAsset?: string;\n  signature: string;\n};\n\nexport type SwappableNFTOrder = SwappableOrder & {\n  makerAssetId: string;\n  takerAssetId: string;\n  makerAssetType: AssetTypeVariant;\n  takerAssetType: AssetTypeVariant;\n};\n\n// when priceRoute with side=SELL, slippage can replace destAmount\nexport type TxInputAmountsPartSell = {\n  slippage: number;\n  srcAmount: PriceString;\n  destAmount?: never; // disallowed\n};\n// when priceRoute with side=BUY, slippage can replace srcAmount\nexport type TxInputAmountsPartBuy = {\n  slippage: number;\n  srcAmount?: never; // disallowed\n  destAmount: PriceString;\n};\n// both srcAmount and destAmount can be present in absence of slippage\nexport type TxInputAmountsPartBuyOrSell = {\n  slippage?: never; // disallowed\n  srcAmount: PriceString;\n  destAmount: PriceString;\n};\n\n// more details in the docs https://developers.velora.xyz/api/velora-api/velora-market-api/build-parameters-for-transaction#request-body\nexport type BuildTxInputBase = {\n  srcToken: Address;\n  destToken: Address;\n  userAddress: Address;\n  /** @description Whenever msg.sender (`userAddress`) i.e. address calling the Velora contract is different than the address sending the transaction, `txOrigin` must be passed along with `userAddress` */\n  txOrigin?: string;\n  /** @description used with referral link */\n  referrer?: string;\n  partner?: string;\n  partnerAddress?: string;\n  partnerFeeBps?: number;\n  /** @description If user should receive surplus instead of partner. Default: false */\n  isSurplusToUser?: boolean;\n  /** @description If fees should be sent directly to the partner instead of registering them on FeeClaimer. v6 only. Default: false */\n  isDirectFeeTransfer?: boolean;\n  /** @deprecated Use \"takeSurplus\" instead. Positive slippage goes to user, true by default */\n  positiveSlippageToUser?: boolean;\n  /** @description Set to true to take positive slippage. Works with partnerAddress. Default: false */\n  takeSurplus?: boolean;\n  /** @description Cap the surplus at 1% maximum. Default: true */\n  isCapSurplus?: boolean;\n  receiver?: Address;\n  srcDecimals?: number;\n  destDecimals?: number;\n  permit?: string;\n  deadline?: string;\n};\n\n// for Swap transaction\nexport type BuildSwapTxInput = BuildTxInputBase & {\n  priceRoute: OptimalRate;\n} & (\n    | TxInputAmountsPartSell\n    | TxInputAmountsPartBuy\n    | TxInputAmountsPartBuyOrSell\n  ); // this union doesn't allow to mix srcAmount & destAmount & slippage together\n\n// building block for LimitOrders and NFT Orders swaps\n// can only use priceRoute.side=BUY and related TxInputAmountsPart*\ntype BuildTxInputBaseBUYForOrders<\n  // to Omit extra keys\n  // can't do Omit<> around union, breaks discriminated union\n  K extends keyof TxInputAmountsPartBuy | keyof BuildTxInputBase = never\n> = Omit<BuildTxInputBase, K> &\n  // destAmount is sum(orders[].makerAmount)\n  (| Omit<TxInputAmountsPartBuy, 'destAmount' | K>\n    | Omit<TxInputAmountsPartBuyOrSell, 'destAmount' | K>\n  );\n\n// for LimitOrder Fill, without swap\nexport type BuildLimitOrderTxInput = BuildTxInputBaseBUYForOrders & {\n  orders: SwappableOrder[];\n  srcDecimals: number;\n  destDecimals: number;\n};\n\n// for NFT Order Fill, without swap\nexport type BuildNFTOrderTxInput =\n  // @TODO if NFT can ever be srcToken, change logic\n  //                           for NFT token destDecimals = 0 is acceptable\n  BuildTxInputBaseBUYForOrders<'destDecimals'> & {\n    orders: SwappableNFTOrder[];\n    srcDecimals: number;\n  };\n\nexport interface BuildSwapAndLimitOrderTxInput0\n  // destAmount is sum(orders[].makerAmount)\n  extends Omit<BuildTxInputBase, 'destAmount'> {\n  priceRoute: OptimalRate; // priceRoute.side=BUY\n  orders: SwappableOrder[];\n  destDecimals: number;\n}\n// for Swap + LimitOrder, priceRoute must have side=BUY\nexport type BuildSwapAndLimitOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableOrder[];\n    destDecimals: number;\n  };\n\n// with slippage for a swap and fill - p2p - order, without to fill a p2p order directly with the intended taker asset\n\n// for Swap + NFT Order, priceRoute must have side=BUY\nexport type BuildSwapAndNFTOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableNFTOrder[];\n  };\n\nexport type BuildTxInput =\n  | BuildSwapTxInput\n  | BuildLimitOrderTxInput\n  | BuildNFTOrderTxInput\n  | BuildSwapAndLimitOrderTxInput\n  | BuildSwapAndNFTOrderTxInput;\n\nexport type BuildOptionsBase = {\n  /** @description Allows the API to skip performing onchain checks such as balances, allowances, as well as transaction simulations. The response does not contain `gas` parameter when set to `true` */\n  ignoreChecks?: boolean;\n  /** @description Allows the API to skip gas checks. The response does not contain `gas` parameter when set to `true` */\n  ignoreGasEstimate?: boolean;\n  /** @description Allows the API to skip performing onchain allowance checks. */\n  ignoreAllowance?: boolean;\n  /** @description Allows the API to return the contract parameters only. */\n  onlyParams?: boolean;\n};\n\nexport type BuildOptionsWithGasPrice = BuildOptionsBase & Partial<WithGasPrice>;\nexport type BuildOptionsWitWithMaxFee = BuildOptionsBase & Partial<WithMaxFee>;\n\nexport type BuildOptions = BuildOptionsWithGasPrice | BuildOptionsWitWithMaxFee;\n\ntype BuildTx = (\n  params: BuildTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\nexport type BuildTxFunctions = {\n  buildTx: BuildTx;\n};\n\ntype SearchStringParams = BuildOptions;\n\nexport const constructBuildTx = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildTxFunctions => {\n  const transactionsURL = `${apiURL}/transactions/${chainId}` as const;\n\n  const buildTx: BuildTx = async (params, options = {}, requestParams) => {\n    if (\n      'priceRoute' in params &&\n      'destAmount' in params && // isn't provided together with `orders`\n      !('orders' in params) // when present, destAmount becomes sum(orders[].makerAmount)\n    ) {\n      const {\n        priceRoute,\n        priceRoute: { side },\n      } = params;\n      const AmountMismatchError =\n        side === SwapSide.SELL\n          ? 'Source Amount Mismatch'\n          : 'Destination Amount Mismatch';\n\n      // user provides srcAmount or slippage but not both. so we only validate accordingly.\n      assert(\n        areAmountsCorrect({\n          queryParams: params,\n          side,\n          priceRoute,\n        }),\n        AmountMismatchError\n      );\n    }\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SearchStringParams>(options);\n\n    const fetchURL = `${transactionsURL}/${search}` as const;\n\n    const sanitizedParams =\n      'orders' in params && params.orders.length > 0\n        ? {\n            ...params,\n            //  make sure we don't pass more with orders than API expects\n            orders: params.orders.map((order) => {\n              const sanitizedOrderData =\n                'makerAssetId' in order\n                  ? sanitizeNFTOrderData(order) // assetType is provided here, because Order.*Asset may be address\n                  : // if Order received from API by hash\n                    sanitizeLimitOrderData(order);\n\n              const sanitizedOrder: SwappableOrder = {\n                ...sanitizedOrderData,\n                signature: order.signature,\n              };\n\n              if (order.permitMakerAsset) {\n                sanitizedOrder.permitMakerAsset = order.permitMakerAsset;\n              }\n\n              return sanitizedOrder;\n            }),\n          }\n        : params;\n\n    const takeSurplus =\n      params.takeSurplus ??\n      (params.positiveSlippageToUser !== undefined\n        ? !params.positiveSlippageToUser\n        : undefined);\n\n    if ('positiveSlippageToUser' in sanitizedParams) {\n      // positiveSlippageToUser & takeSurplus together will Error in API\n      delete sanitizedParams.positiveSlippageToUser;\n    }\n    if (takeSurplus !== undefined) {\n      sanitizedParams.takeSurplus = takeSurplus;\n    }\n\n    const fetchParams: FetcherPostInput = {\n      url: fetchURL,\n      method: 'POST',\n      data: sanitizedParams,\n      requestParams,\n    };\n\n    const builtTx = await fetcher<TransactionParams>(fetchParams);\n\n    return builtTx;\n  };\n\n  return { buildTx };\n};\n\ninterface AreAmountsCorrectInput {\n  queryParams: { srcAmount?: string; destAmount?: string; slippage?: number };\n  side: SwapSide;\n  priceRoute: OptimalRate;\n}\n\nfunction areAmountsCorrect({\n  queryParams,\n  side,\n  priceRoute,\n}: AreAmountsCorrectInput): boolean {\n  // return early after a simpler check if the user was swapping before filling\n  if (queryParams.slippage) {\n    return (\n      (side === SwapSide.BUY &&\n        queryParams.destAmount === priceRoute.destAmount) ||\n      (side === SwapSide.SELL && queryParams.srcAmount === priceRoute.srcAmount)\n    );\n  }\n\n  // provided amounts match the previously queried price route\n  const [inputAmount, priceRouteAmount] =\n    side === SwapSide.SELL\n      ? [queryParams.srcAmount, priceRoute.srcAmount]\n      : [queryParams.destAmount, priceRoute.destAmount];\n\n  return inputAmount === priceRouteAmount;\n}\n","import { getRandomInt } from '../../../helpers/misc';\nimport type { Address, APIVersion } from '../../../types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\n\nconst Order = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'address' },\n  { name: 'takerAsset', type: 'address' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  maker: Address;\n  // OrderData.taker must be Augustus (or other Executor) for p2p limitOrders to involve swap through Augustus\n  /** @description actual user taker which will go into nonceAndMeta */\n  taker?: Address;\n  /** @description contract executor (Augustus or similar) that is allowed to execute the order, gois in Order.taker */\n  contractTaker?: Address;\n\n  AugustusAddress: Address;\n  AppVersion: APIVersion;\n}\n\nexport type SignableOrderData = {\n  types: { Order: typeof Order };\n  domain: Domain;\n  data: OrderData;\n};\n\nexport type OrderData = {\n  nonceAndMeta: string;\n  expiry: number;\n  makerAsset: string;\n  takerAsset: string;\n  maker: string;\n  taker: string;\n  makerAmount: string;\n  takerAmount: string;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset,\n  takerAsset,\n  makerAmount,\n  takerAmount,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus (v5) or directly (v6)-- taker = Augustus | _taker, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus or not -- taker = Zero, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS,\n  // if given, overrides the above choices made based on `taker`\n  contractTaker,\n  // for v6 only support taker=_taker for OTC orders\n  AppVersion,\n}: BuildOrderDataInput): SignableOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  let taker: string;\n  // contractTaker overrides always\n  if (contractTaker) {\n    taker = contractTaker;\n  } else if (takerInNonce === ZERO_ADDRESS) {\n    // no takerInNonce -> not p2p order -> allow anyone to fill (not only Augustus)\n    taker = ZERO_ADDRESS;\n  } else {\n    // otherwise for p2p order ->\n    if (AppVersion.startsWith('6.')) {\n      //support 6.1+ versions\n\n      // limit taker to EOA for v6 version (no Arbitrary Token Swaps + OTC Fill, or OTC Fill through AugustusSwapper)\n      taker = takerInNonce;\n    } else {\n      // on v5\n      // -> fill through Augustus only\n      taker = AugustusAddress;\n    }\n  }\n\n  const order: OrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n\n  return {\n    types: { Order },\n    domain: { name, version, chainId, verifyingContract },\n    data: order,\n  };\n}\n","import { DEFAULT_VERSION } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildOrderDataInput,\n  SignableOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildLimitOrderInput = Omit<\n  BuildOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress' | 'AppVersion'\n>;\n\ntype BuildLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  requestParams?: RequestParameters\n) => Promise<SignableOrderData>;\n\nexport type BuildLimitOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildLimitOrder: BuildLimitOrder;\n};\n\nexport const constructBuildLimitOrder = (\n  options: ConstructFetchInput\n): BuildLimitOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildLimitOrder: BuildLimitOrder = async (\n    buildLimitOrderParams,\n    requestParams\n  ) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(requestParams);\n\n    const AppVersion = options.version ?? DEFAULT_VERSION;\n\n    return buildOrderData({\n      ...buildLimitOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n      AppVersion,\n    });\n  };\n\n  return {\n    buildLimitOrder,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignLimitOrderFunctions = {\n  signLimitOrder: (signableOrderData: SignableOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignLimitOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignLimitOrderFunctions => {\n  const signLimitOrder: SignLimitOrderFunctions['signLimitOrder'] = (\n    typedData\n  ) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableOrderData = {\n      ...typedData,\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signLimitOrder };\n};\n","import type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../../types';\nimport { constructGetSpender } from '../swap/spender';\n\nexport type CancelOrder<T> = (\n  orderHash: string,\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type CancelOrderBulk<T> = (\n  orderHashes: string[],\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type CancelLimitOrderFunctions<T> = {\n  cancelLimitOrder: CancelOrder<T>;\n  cancelLimitOrderBulk: CancelOrderBulk<T>;\n};\n\n// much smaller than the whole AugustusRFQ_ABI\nconst MinAugustusRFQAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'cancelOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'orderHashes',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'cancelOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype AvailableMethods = ExtractAbiMethodNames<typeof MinAugustusRFQAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructCancelLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const cancelLimitOrder: CancelOrder<T> = async (\n    orderHash,\n    overrides = {},\n    requestParams\n  ) => {\n    const verifyingContract = await getAugustusRFQ(requestParams);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrder',\n      args: [orderHash],\n      overrides,\n    });\n\n    return res;\n  };\n\n  const cancelLimitOrderBulk: CancelOrderBulk<T> = async (\n    orderHashes,\n    overrides = {},\n    requestParams\n  ) => {\n    const verifyingContract = await getAugustusRFQ(requestParams);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrders',\n      args: [orderHashes],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return {\n    cancelLimitOrder,\n    cancelLimitOrderBulk,\n  };\n};\n","type SplitSignatureResult = {\n  v: number;\n  r: string;\n  s: string;\n  compact: string;\n};\n\nexport function splitSignature(signature: string): SplitSignatureResult {\n  // Remove \"0x\" prefix if present\n  if (signature.startsWith('0x')) {\n    signature = signature.slice(2);\n  }\n\n  // Convert the hex string to a byte array\n  const bytes = new Uint8Array(signature.length / 2);\n  for (let i = 0; i < signature.length; i += 2) {\n    bytes[i / 2] = parseInt(signature.slice(i, i + 2), 16);\n  }\n\n  // Validate the signature length (64 or 65 bytes)\n  if (bytes.length !== 64 && bytes.length !== 65) {\n    throw new Error('Invalid signature length: must be 64 or 65 bytes');\n  }\n\n  // Extract r and s components\n  const r = `0x${Array.from(bytes.slice(0, 32), (b) =>\n    b.toString(16).padStart(2, '0')\n  ).join('')}`;\n  let s: string;\n  let v;\n\n  // Handle 64-byte (EIP-2098 compact) and 65-byte signatures\n  if (bytes.length === 64) {\n    // Extract v from the highest bit of s and clear the bit in s\n    v = 27 + (bytes[32]! >> 7);\n    bytes[32]! &= 0x7f; // Clear the highest bit\n    s = `0x${Array.from(bytes.slice(32, 64))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('')}`;\n  } else {\n    s = `0x${Array.from(bytes.slice(32, 64))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('')}`;\n\n    // Extract v directly for 65-byte signature\n    v = bytes[64]!;\n\n    // Normalize v to canonical form (27 or 28)\n    if (v < 27) {\n      v += 27;\n    }\n  }\n\n  // Compute yParityAndS (_vs) for the compact signature\n  const sBytes = Array.from(bytes.slice(32, 64));\n  if (v === 28) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    sBytes[0]! |= 0x80; // Set the highest bit if v is 28\n  }\n  const yParityAndS = `0x${sBytes\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('')}`;\n\n  // Construct the compact signature by concatenating r and yParityAndS\n  const compactSignature = r + yParityAndS.slice(2);\n\n  return { v, r, s, compact: compactSignature };\n}\n","import { splitSignature } from './signature';\n\ntype EncodeEIP_2612PermitFunctionInput = {\n  permitSignature: string;\n  owner: string;\n  spender: string;\n  value: string | bigint;\n  deadline: string | number | bigint;\n};\n\n// encoding params for Token.permit() Permit1 function\nexport function encodeEIP_2612PermitFunctionInput({\n  owner,\n  spender,\n  value,\n  deadline,\n  permitSignature,\n}: EncodeEIP_2612PermitFunctionInput): string {\n  const { v, r, s } = splitSignature(permitSignature);\n\n  const encodedOwner = encodeAddress(owner);\n  const encodedSpender = encodeAddress(spender);\n  const encodedValue = encodeUint256(value);\n  const encodedDeadline = encodeUint256(deadline.toString());\n  const encodedV = encodeUint8(v);\n  const encodedR = encodeBytes32(r);\n  const encodedS = encodeBytes32(s);\n\n  // Concatenate all encoded values, stripping the \"0x\" prefix from each (except the first one)\n  return (\n    '0x' +\n    [\n      encodedOwner,\n      encodedSpender,\n      encodedValue,\n      encodedDeadline,\n      encodedV,\n      encodedR,\n      encodedS,\n    ]\n      .map((val) => val.slice(2)) // Remove \"0x\" prefix from each encoded value\n      .join('') // Concatenate the values\n  );\n}\n\ntype EncodeDAIlikePermitFunctionInput = {\n  permitSignature: string;\n  holder: string;\n  spender: string;\n  nonce: number | bigint | string;\n  expiry: number | bigint | string;\n};\n\n// encoding params for DAIlike.permit() function\nexport function encodeDAIlikePermitFunctionInput({\n  permitSignature,\n  holder,\n  spender,\n  nonce,\n  expiry,\n}: EncodeDAIlikePermitFunctionInput): string {\n  const { v, r, s } = splitSignature(permitSignature);\n\n  const encodedHolder = encodeAddress(holder);\n  const encodedSpender = encodeAddress(spender);\n  const encodedNonce = encodeUint256(nonce.toString());\n  const encodedExpiry = encodeUint256(expiry.toString());\n  const encodedV = encodeUint8(v);\n  const encodedR = encodeBytes32(r);\n  const encodedS = encodeBytes32(s);\n\n  // Concatenate all encoded values, stripping the \"0x\" prefix from each (except the first one)\n  return (\n    '0x' +\n    [\n      encodedHolder,\n      encodedSpender,\n      encodedNonce,\n      encodedExpiry,\n      encodeBool(true), //allowed=true\n      encodedV,\n      encodedR,\n      encodedS,\n    ]\n      .map((val) => val.slice(2)) // Remove \"0x\" prefix from each encoded value\n      .join('') // Concatenate the values\n  );\n}\n\n// encode an address (20 bytes) into 32 bytes\nexport function encodeAddress(address: string): string {\n  const strippedAddress = address.replace(/^0x/, ''); // Remove \"0x\" prefix\n  return '0x' + strippedAddress.toLowerCase().padStart(64, '0');\n}\n\n// encode a uint256 value\nexport function encodeUint256(value: string | bigint): string {\n  const bn = BigInt(value);\n  return '0x' + bn.toString(16).padStart(64, '0');\n}\n\n// encode a uint8 value\nexport function encodeUint8(value: number | bigint): string {\n  return '0x' + value.toString(16).padStart(64, '0');\n}\n\n// encode a bytes32 value\nexport function encodeBytes32(value: string): string {\n  const strippedValue = value.replace(/^0x/, ''); // Remove \"0x\" prefix\n  return '0x' + strippedValue.padStart(64, '0').toLowerCase();\n}\n\n//encode a boolean\nexport function encodeBool(value: boolean): string {\n  const encodedValue = value ? '1' : '0';\n  // padded to 32 bytes\n  return '0x' + encodedValue.padStart(64, '0');\n}\n\n/* \nconst EIP_2612_PERMIT_ABI = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        name: 'value',\n        type: 'uint256',\n      },\n      {\n        name: 'deadline',\n        type: 'uint256',\n      },\n      {\n        name: 'v',\n        type: 'uint8',\n      },\n      {\n        name: 'r',\n        type: 'bytes32',\n      },\n      {\n        name: 's',\n        type: 'bytes32',\n      },\n    ],\n    name: 'permit',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n]; \n*/\n\n/* \nconst DAI_EIP_2612_PERMIT_ABI = [\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'holder',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'expiry',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bool',\n        name: 'allowed',\n        type: 'bool',\n      },\n      {\n        internalType: 'uint8',\n        name: 'v',\n        type: 'uint8',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'r',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 's',\n        type: 'bytes32',\n      },\n    ],\n    name: 'permit',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n */\n","import type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../../types';\nimport type { OrderData } from './buildOrder';\nimport { constructGetSpender } from '../swap/spender';\nimport { sanitizeOrderData } from './helpers/misc';\nimport {\n  encodeDAIlikePermitFunctionInput,\n  encodeEIP_2612PermitFunctionInput,\n} from '../common/orders/encoding';\n\nexport type FillOrderDirectlyFunctions<T> = {\n  fillOrderDirectly: FillOrderDirectly<T>;\n};\n\ntype TakerPermitEncodedInputParams = {\n  encodedPermitParams: string;\n};\n\ntype TakerPermit1Data = {\n  signature: string;\n  deadline: number | bigint | string;\n  amount?: string;\n  isDaiPermit?: false;\n};\n\ntype TakerDaiPermitData = {\n  signature: string;\n  expiry: number | bigint | string;\n  nonce: number | bigint | string;\n  isDaiPermit: true;\n};\n\ntype TakerPermitObject =\n  | TakerPermitEncodedInputParams\n  | TakerPermit1Data\n  | TakerDaiPermitData;\n\nexport type FillOrderDirectly<T> = (\n  orderFillData: {\n    order: OrderData;\n    signature: string;\n    /** @description Permit1 data or DAI Permit data or Token.parmit() input params encoded; Permit by taker for Taker Asset with AugustusRFQ as spender */\n    takerPermit?: TakerPermitObject;\n  },\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\n// much smaller than the whole AugustusRFQ_ABI\nconst MinAugustusRFQAbi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'nonceAndMeta',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint128',\n            name: 'expiry',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'makerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct AugustusRFQ.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'fillOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'nonceAndMeta',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint128',\n            name: 'expiry',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'makerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct AugustusRFQ.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'takerTokenFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address',\n        name: 'target',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes',\n        name: 'permitTakerAsset',\n        type: 'bytes',\n      },\n      {\n        internalType: 'bytes',\n        name: 'permitMakerAsset',\n        type: 'bytes',\n      },\n    ],\n    name: 'partialFillOrderWithTargetPermit',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'makerTokenFilledAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype FillOrderMethods = ExtractAbiMethodNames<typeof MinAugustusRFQAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport function constructFillOrderDirectly<T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): FillOrderDirectlyFunctions<T> {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const fillOrderDirectly: FillOrderDirectly<T> = async (\n    { order, signature, takerPermit },\n    overrides = {},\n    requestParams\n  ) => {\n    const AugustusRFQ = await getAugustusRFQ(requestParams);\n\n    const sanitizedOrder = sanitizeOrderData(order);\n\n    if (!takerPermit) {\n      const res = await options.contractCaller.transactCall<FillOrderMethods>({\n        address: AugustusRFQ,\n        abi: MinAugustusRFQAbi,\n        contractMethod: 'fillOrder',\n        args: [sanitizedOrder, signature],\n        overrides,\n      });\n\n      return res;\n    }\n\n    let permitTakerAsset: string;\n    if ('encodedPermitParams' in takerPermit) {\n      permitTakerAsset = takerPermit.encodedPermitParams;\n    } else if ('isDaiPermit' in takerPermit && takerPermit.isDaiPermit) {\n      // encoded DAI.permit() function params by taker with AugustusRFQ as spender\n      permitTakerAsset = encodeDAIlikePermitFunctionInput({\n        holder: order.taker,\n        spender: AugustusRFQ,\n        expiry: takerPermit.expiry,\n        nonce: takerPermit.nonce,\n        permitSignature: takerPermit.signature,\n      });\n    } else {\n      // encoded TakerAsset.permit() function params by taker with AugustusRFQ as spender, Permit1 only\n      permitTakerAsset = encodeEIP_2612PermitFunctionInput({\n        owner: order.taker,\n        spender: AugustusRFQ,\n        value: takerPermit.amount || order.takerAmount, // can use permit with a bigger value, fallback to exact Order takerAmount\n        deadline: takerPermit.deadline,\n        permitSignature: takerPermit.signature,\n      });\n    }\n\n    const res = await options.contractCaller.transactCall<FillOrderMethods>({\n      address: AugustusRFQ,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'partialFillOrderWithTargetPermit',\n      args: [\n        sanitizedOrder, // order\n        signature, // order.signature\n        order.takerAmount, // takerTokenFillAmount, can even partially fill\n        order.taker, // target\n        permitTakerAsset,\n        '0x', // permitMakerAsset, unused because hard to account for changing nonce for long running Orders\n      ],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return { fillOrderDirectly };\n}\n","// @TODO getOrder, getOrders from API\n// onchain from contract can't distinguish between filled or cancelled\nimport { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n  GetRequiredAllowanceURL as GetRequiredBalanceURL,\n} from './helpers/misc';\nimport type {\n  LimitOrderFromApi,\n  LimitOrdersApiResponse,\n  LimitOrderType,\n} from './helpers/types';\n\ntype PaginationParams = {\n  limit?: number;\n  offset?: number;\n  hideSmallBalances?: boolean;\n  orderBy?: 'createdAt' | 'updatedAt' | 'expiry';\n};\n\n//                     get orders by `maker` or `taker`\nexport type LimitOrdersUserParams = (\n  | { maker: Address; type: LimitOrderType }\n  | { taker: Address; type: LimitOrderType }\n) &\n  PaginationParams;\n\nexport type GetRequiredAllowanceParams = {\n  maker: Address;\n  token?: Address;\n};\n\ntype GetLimitOrderByHash = (\n  orderHash: string,\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\ntype GetLimitOrders = (\n  userParams: LimitOrdersUserParams,\n  requestParams?: RequestParameters\n) => Promise<LimitOrdersApiResponse>;\n\ntype GetRequiredBalance = (\n  userParams: GetRequiredAllowanceParams,\n  requestParams?: RequestParameters\n) => Promise<Record<string, string>>;\n\nexport type GetLimitOrdersFunctions = {\n  getLimitOrders: GetLimitOrders;\n  getLimitOrderByHash: GetLimitOrderByHash;\n  /**\n   * Gets fillableBalance for tokens from user's active orders.\n   * User needs to have enough balance & allowance to cover active orders before creating new orders.\n   * @param userParams - parameters to get allowance for active orders\n   * @param {string} userParams.maker - user to get required allowances for\n   * @param {string=} userParams.token - if given `token`, the mapping will contain that token address only\n   * @param {RequestParameters=} requestParams - requestParams passed to fetcher, can include {signal: AbortSignal, timeout: for axios, etc.}\n   * @returns `{Lowercase<Address> => wei number as string}` mapping of token to fillableBalance\n   */\n  getRequiredBalance: GetRequiredBalance;\n};\n\nexport const constructGetLimitOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetLimitOrdersFunctions => {\n  const getBaseFetchURLByEntityType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getLimitOrders: GetLimitOrders = async (userParams, requestParams) => {\n    const baseFetchURL = getBaseFetchURLByEntityType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n\n    const { offset, limit, hideSmallBalances, orderBy } = userParams;\n    const search = constructSearchString<PaginationParams>({\n      offset,\n      limit,\n      hideSmallBalances,\n      orderBy,\n    });\n\n    const fetchURL = `${baseFetchURL}/${userURL}${search}` as const;\n\n    const response = await fetcher<LimitOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getRequiredBalance: GetRequiredBalance = async (\n    userParams,\n    requestParams\n  ) => {\n    const baseFetchURL = getBaseFetchURLByEntityType('fillablebalance');\n    const userURL = `${baseFetchURL}/${userParams.maker}` as const;\n    const fetchURL = userParams.token\n      ? (`${userURL}/${userParams.token}` as const)\n      : userURL;\n\n    const response = await fetcher<\n      Record<string, string>,\n      GetRequiredBalanceURL\n    >({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getLimitOrderByHash: GetLimitOrderByHash = async (\n    orderHash,\n    requestParams\n  ) => {\n    const baseFetchURL = getBaseFetchURLByEntityType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<LimitOrderFromApi, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  return {\n    getLimitOrders,\n    getLimitOrderByHash,\n    getRequiredBalance,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  LimitOrderApiResponse,\n  LimitOrderToSend,\n  LimitOrderFromApi,\n  LimitOrderType,\n} from './helpers/types';\n\ntype PostLimitOrder = (\n  limitOrderWithSignatureAndPermit: LimitOrderToSend,\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\n\nexport type PostLimitOrderFunctions = {\n  postLimitOrder: PostLimitOrder;\n  postP2POrder: PostLimitOrder;\n};\n\nexport const constructPostLimitOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostLimitOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    limitOrderWithSignatureAndPermit: LimitOrderToSend,\n    type: LimitOrderType,\n    requestParams?: RequestParameters\n  ): Promise<LimitOrderFromApi> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    const { order: newOrder } = await fetcher<\n      LimitOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: limitOrderWithSignatureAndPermit,\n      requestParams,\n    });\n\n    return newOrder;\n  };\n\n  const postLimitOrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(\n      limitOrderWithSignatureAndPermit,\n      'LIMIT',\n      requestParams\n    );\n  };\n\n  const postP2POrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(\n      limitOrderWithSignatureAndPermit,\n      'P2P',\n      requestParams\n    );\n  };\n\n  return { postLimitOrder, postP2POrder };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetSpender } from '../swap/spender';\n\nexport type ApproveTokenForLimitOrderFunctions<T> = {\n  /** @description approving AugustusRFQ as spender for makerAsset */\n  approveMakerTokenForLimitOrder: ApproveToken<T>;\n  /** @description approving AugustusRFQ as spender for takerAsset to call SDK.fillOrderDirectly */\n  approveTakerTokenForFillingP2POrderDirectly: ApproveToken<T>;\n  /** @description approving AugustusSwapper as spender for takerAsset for Limit Orders that will be executed through it */\n  approveTakerTokenForLimitOrder: ApproveToken<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const approveMakerTokenForLimitOrder: ApproveToken<T> =\n    approveTokenMethodFactory<T>(options.contractCaller, getAugustusRFQ);\n\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveTakerTokenForLimitOrder } =\n    constructApproveToken(options);\n\n  return {\n    approveMakerTokenForLimitOrder,\n    approveTakerTokenForFillingP2POrderDirectly: approveMakerTokenForLimitOrder,\n    approveTakerTokenForLimitOrder,\n  };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetLimitOrdersContractFunctions = {\n  getLimitOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\nexport const constructGetLimitOrdersContract = (\n  options: ConstructFetchInput\n): GetLimitOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getLimitOrdersContract,\n  } = constructGetSpender(options);\n\n  return { getLimitOrdersContract, getTokenTransferProxy };\n};\n","import type { ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport {\n  API_URL,\n  SwapSide,\n  ContractMethod,\n  DEFAULT_VERSION,\n} from '../../constants';\nimport {\n  BuildLimitOrderTxInput,\n  BuildOptions,\n  BuildSwapAndLimitOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { OrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\nimport type { RequestParameters } from '../../types';\n\ntype MinBuildSwapAndLimitOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndLimitOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndLimitOrdersTx = (\n  params: MinBuildSwapAndLimitOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\ntype MinBuildLimitOrderTxInput = Omit<\n  BuildLimitOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildLimitOrdersTx = (\n  params: MinBuildLimitOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\nexport type BuildLimitOrdersTxFunctions = {\n  getLimitOrdersRate: GetLimitOrdersRate;\n  buildLimitOrderTx: BuildLimitOrdersTx;\n  buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx;\n};\n\ntype GetLimitOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\nexport const constructBuildLimitOrderTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildLimitOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    chainId,\n    fetcher,\n    version,\n  });\n\n  const { getRate: getSwapAndLimitOrderRate } = constructGetRate({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow to swap from srcToken to destToken(=order.takerAsset) followed by filling limit orders\n  const getLimitOrdersRate: GetLimitOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    requestParams\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndLimitOrderRate(\n      rateInput,\n      requestParams\n    );\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildLimitOrderTx: BuildLimitOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    const { makerAsset, takerAsset, totalTakerAmount } = checkAndParseOrders(\n      params.orders\n    );\n\n    const fillParams: BuildLimitOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      // no `slippage` in `params`\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: makerAsset,\n    };\n\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n\n  const buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    const { makerAsset } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndLimitOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // which is swapped for makerAsset, that would go towards filling the orders\n      destToken: makerAsset,\n      destDecimals: params.priceRoute.destDecimals,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n    };\n\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n\n  return {\n    getLimitOrdersRate,\n    buildLimitOrderTx,\n    buildSwapAndLimitOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  OrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: OrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset,\n    takerAsset,\n  };\n}\n","import type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildNFTOrderDataInput,\n  SignableNFTOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildNFTOrderInput = Omit<\n  BuildNFTOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress'\n>;\n\ntype BuildNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  requestParams?: RequestParameters\n) => Promise<SignableNFTOrderData>;\n\nexport type BuildNFTOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildNFTOrder: BuildNFTOrder;\n};\n\nexport const constructBuildNFTOrder = (\n  options: ConstructFetchInput\n): BuildNFTOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildNFTOrder: BuildNFTOrder = async (\n    buildNFTOrderParams,\n    requestParams\n  ) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(requestParams);\n\n    return buildOrderData({\n      ...buildNFTOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n    });\n  };\n\n  return {\n    buildNFTOrder,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableNFTOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignNFTOrderFunctions = {\n  signNFTOrder: (signableOrderData: SignableNFTOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignNFTOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignNFTOrderFunctions => {\n  const signNFTOrder: SignNFTOrderFunctions['signNFTOrder'] = (typedData) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableNFTOrderData = {\n      ...typedData,\n      // here assetType isn't provided, SignableData must already have corrent BigIntAsString\n      // @TODO consider using `template_${types}` for Address, likely bad idea when considering 3rd-party code\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signNFTOrder };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport {\n  CancelOrder,\n  CancelOrderBulk,\n  constructCancelLimitOrder,\n} from '../limitOrders/cancelOrder';\n\nexport type CancelNFTOrderFunctions<T> = {\n  cancelNFTOrder: CancelOrder<T>;\n  cancelNFTOrderBulk: CancelOrderBulk<T>;\n};\n\n// should work the same as for LimitOrders\nexport const constructCancelNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelNFTOrderFunctions<T> => {\n  const { cancelLimitOrder, cancelLimitOrderBulk } =\n    constructCancelLimitOrder(options);\n  return {\n    cancelNFTOrder: cancelLimitOrder,\n    cancelNFTOrderBulk: cancelLimitOrderBulk,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n} from './helpers/misc';\nimport type {\n  NFTOrderFromAPI,\n  NFTOrdersApiResponse,\n  NFTOrderType,\n} from './helpers/types';\n\n//                     get orders by `maker` or `taker`\nexport type NFTOrdersUserParams =\n  | { maker: Address; type: NFTOrderType }\n  | { taker: Address; type: NFTOrderType };\ntype GetNFTOrderByHash = (\n  orderHash: string,\n  requestParams?: RequestParameters\n) => Promise<NFTOrderFromAPI>;\ntype GetNFTOrders = (\n  userParams: NFTOrdersUserParams,\n  requestParams?: RequestParameters\n) => Promise<NFTOrdersApiResponse>;\n\nexport type GetNFTOrdersFunctions = {\n  getNFTOrders: GetNFTOrders;\n  getNFTOrderByHash: GetNFTOrderByHash;\n};\n\nexport const constructGetNFTOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetNFTOrdersFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getNFTOrders: GetNFTOrders = async (userParams, requestParams) => {\n    const baseFetchURL = getBaseFetchURLByOrderType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n    const fetchURL = `${baseFetchURL}/${userURL}` as const;\n\n    const response = await fetcher<NFTOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getNFTOrderByHash: GetNFTOrderByHash = async (\n    orderHash,\n    requestParams\n  ) => {\n    const baseFetchURL = getBaseFetchURLByOrderType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<NFTOrderFromAPI, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  return {\n    getNFTOrders,\n    getNFTOrderByHash,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  NFTOrderToSend,\n  NFTOrderType,\n  NFTOrderFromAPI,\n  NFTOrderApiResponse,\n} from './helpers/types';\n\ntype PostNFTOrder = (\n  NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n  requestParams?: RequestParameters\n) => Promise<NFTOrderFromAPI>;\n\nexport type PostNFTOrderFunctions = {\n  postNFTLimitOrder: PostNFTOrder;\n  postNFTP2POrder: PostNFTOrder;\n};\n\nexport const constructPostNFTOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostNFTOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n    type: NFTOrderType,\n    requestParams?: RequestParameters\n  ): Promise<NFTOrderFromAPI> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    // @TODO check API return matches\n    const { order: newOrder } = await fetcher<\n      NFTOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: NFTOrderWithSignatureAndPermit,\n      requestParams,\n    });\n\n    return { ...newOrder };\n  };\n\n  const postNFTLimitOrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(\n      NFTOrderWithSignatureAndPermit,\n      'LIMIT',\n      requestParams\n    );\n  };\n\n  const postNFTP2POrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    requestParams\n  ) => {\n    return postTypedOrder(NFTOrderWithSignatureAndPermit, 'P2P', requestParams);\n  };\n\n  return { postNFTLimitOrder, postNFTP2POrder };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetNFTOrdersContractFunctions = {\n  getNFTOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\n// should work the same as LimitOrders\nexport const constructGetNFTOrdersContract = (\n  options: ConstructFetchInput\n): GetNFTOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getNFTOrdersContract,\n  } = constructGetSpender(options);\n\n  return {\n    getNFTOrdersContract,\n    getTokenTransferProxy,\n  };\n};\n","import type { ApproveToken } from '../../helpers/approve';\nimport type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructProviderFetchInput,\n  RequestParameters,\n  TxSendOverrides,\n} from '../../types';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetNFTOrdersContract } from './getOrdersContract';\n\ntype ApproveNFT<T> = (\n  tokenAddress: Address,\n  overrides?: TxSendOverrides,\n  requestParams?: RequestParameters\n) => Promise<T>;\n\nexport type ApproveTokenForNFTOrderFunctions<T> = {\n  /** @description approving AugustusSwapper as spender for takerAsset (ERC20) for Limit Orders that will be executed through it */\n  approveERC20ForNFTOrder: ApproveToken<T>;\n  /** @description approving AugustusRFQ as spender for makerAsset (NFT) */\n  approveNFTForNFTOrder: ApproveNFT<T>;\n};\n\nconst MinNFTAbi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        name: '_approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinNFTAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForNFTOrderFunctions<T> => {\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveERC20ForNFTOrder } =\n    constructApproveToken(options);\n\n  const { getNFTOrdersContract } = constructGetNFTOrdersContract(options);\n\n  const approveNFTForNFTOrder: ApproveNFT<T> = async (\n    tokenAddress,\n    overrides = {},\n    requestParams\n  ) => {\n    // @TODO add approvetakerAssetForNFTOrder to use AugustusSwapper as spender if we ever have SELL NFT swaps\n    const AugustusRFQ = await getNFTOrdersContract(requestParams);\n\n    const res = await options.contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinNFTAbi,\n      contractMethod: 'setApprovalForAll',\n      args: [AugustusRFQ, true],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return { approveERC20ForNFTOrder, approveNFTForNFTOrder };\n};\n","import type { Address, ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport {\n  API_URL,\n  SwapSide,\n  ContractMethod,\n  DEFAULT_VERSION,\n} from '../../constants';\nimport {\n  BuildNFTOrderTxInput,\n  BuildOptions,\n  BuildSwapAndNFTOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { BigIntAsString, NFTOrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\nimport type { RequestParameters } from '../../types';\ntype MinBuildSwapAndNFTOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndNFTOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndNFTOrdersTx = (\n  params: MinBuildSwapAndNFTOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\ntype MinBuildNFTOrderTxInput = Omit<\n  BuildNFTOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildNFTOrdersTx = (\n  params: MinBuildNFTOrderTxInput,\n  options?: BuildOptions,\n  requestParams?: RequestParameters\n) => Promise<TransactionParams>;\n\nexport type BuildNFTOrdersTxFunctions = {\n  getNFTOrdersRate: GetNFTOrdersRate;\n  buildNFTOrderTx: BuildNFTOrdersTx;\n  buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx;\n};\n\ntype GetNFTOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  requestParams?: RequestParameters\n) => Promise<OptimalRate>;\n\nexport const constructBuildNFTOrderTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildNFTOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  const { getRate: getSwapAndNFTOrderRate } = constructGetRate({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow from swap from srcToken to destToken(=order.takerAsset) followed by filling NFT orders\n  const getNFTOrdersRate: GetNFTOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    requestParams\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndNFTOrderRate(rateInput, requestParams);\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildNFTOrderTx: BuildNFTOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    const { takerAsset, totalTakerAmount } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildNFTOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: 'NFT', // support any NFT\n    };\n\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n  const buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx = (\n    params,\n    options,\n    requestParams\n  ) => {\n    checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndNFTOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n      destToken: 'NFT', // support any NFT,\n      destDecimals: params.priceRoute.destDecimals,\n    };\n    return buildSwapTx(fillParams, options, requestParams);\n  };\n\n  return {\n    getNFTOrdersRate,\n    buildNFTOrderTx,\n    buildSwapAndNFTOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  NFTOrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: NFTOrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset: makerAsset.startsWith('0x')\n      ? makerAsset\n      : uintToAssetAddress(makerAsset),\n    takerAsset: takerAsset.startsWith('0x')\n      ? takerAsset\n      : uintToAssetAddress(takerAsset),\n  };\n}\n\n// extract asset address from makerAsset or takerAsset packed number encoded to contain AssetType\nfunction uintToAssetAddress(assetUint: BigIntAsString): Address {\n  return (\n    '0x' +\n    (BigInt(assetUint) & ((BigInt(1) << BigInt(160)) - BigInt(1))).toString(16)\n  );\n}\n","import type { ExtraFetchParams, FetcherFunction } from '../../types';\nimport type { AxiosStatic } from 'axios';\nimport { FetcherError } from '../misc';\n\nexport type AxiosRequirement = Pick<AxiosStatic, 'request' | 'isAxiosError'>;\n\nexport const constructFetcher =\n  (axios: AxiosRequirement, extra?: ExtraFetchParams): FetcherFunction =>\n  async (params) => {\n    try {\n      const { requestParams, ...rest } = params;\n      // adding apiKey to headers if it's provided\n      const headers = extra?.apiKey\n        ? {\n            'X-API-KEY': extra.apiKey,\n            ...rest.headers,\n            ...requestParams?.headers,\n          }\n        : { ...rest.headers, ...requestParams?.headers };\n\n      const allParams = { ...rest, ...requestParams, headers };\n\n      const { data } = await axios.request(allParams);\n\n      return data;\n    } catch (error: any) {\n      if (axios.isAxiosError(error)) {\n        // attach a more meaningful message and other props\n        throw new FetcherError(error);\n      }\n\n      throw error;\n    }\n  };\n","import type { ExtraFetchParams, FetcherFunction } from '../../types';\nimport { FetcherError } from '../misc';\n\n// @TODO may not work with node-fetch\ntype Fetch = typeof fetch;\n\nexport const constructFetcher =\n  (fetch: Fetch, extra?: ExtraFetchParams): FetcherFunction =>\n  async (params) => {\n    try {\n      const { url, method, requestParams } = params;\n      const body = method === 'POST' ? JSON.stringify(params.data) : null;\n      // Only JSON response for POST requests\n      const POSTheaders =\n        method === 'POST' && body\n          ? {\n              'Content-Type': 'application/json',\n            }\n          : undefined;\n\n      // adding apiKey to headers if it's provided\n      const apiHeaders = extra?.apiKey\n        ? { 'X-API-KEY': extra.apiKey }\n        : undefined;\n\n      // all headers combined\n      const headers =\n        POSTheaders || apiHeaders || params.headers || requestParams?.headers\n          ? {\n              ...apiHeaders,\n              ...POSTheaders,\n              ...params.headers,\n              ...requestParams?.headers,\n            }\n          : undefined;\n\n      const response = await fetch(url, {\n        method,\n        body,\n        ...requestParams,\n        headers,\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // @TODO figure out if this works analogous to AxiosError, especially code ==? status\n        throw new FetcherError({\n          code: String(response.status),\n          response: {\n            data,\n            status: response.status,\n            statusText: response.statusText,\n            headers: Object.fromEntries(response.headers.entries()),\n            config: { url, method },\n          },\n          message: response.statusText,\n          isAxiosError: false,\n        });\n      }\n\n      return data;\n    } catch (error: any) {\n      if (error instanceof FetcherError) throw error;\n      throw new FetcherError(error);\n    }\n  };\n","import type {\n  Address,\n  ContractCallerFunctions,\n  NoExtraKeysCheck,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type {\n  JsonRpcProvider,\n  BaseProvider,\n  JsonRpcSigner,\n} from '@ethersproject/providers';\nimport type { Signer } from '@ethersproject/abstract-signer';\nimport type {\n  Contract as EthersV5Contract,\n  ContractFunction as EthersContractFunctionV5,\n  PopulatedTransaction as EthersPopulatedTransactionV5,\n  PayableOverrides,\n  CallOverrides,\n  ContractTransaction,\n} from '@ethersproject/contracts';\n\nimport type { BigNumber as EthersBigNumberV5 } from '@ethersproject/bignumber';\n\nimport { assert } from 'ts-essentials';\n\nexport interface EthersV5ProviderDeps {\n  ethersProviderOrSigner: BaseProvider | Signer;\n  EthersContract: typeof EthersV5Contract; // passing Contract in allows not to include ethers as dependency\n}\n\nexport const constructEthersV5ContractCaller = (\n  {\n    ethersProviderOrSigner: providerOrSigner,\n    EthersContract: Contract,\n  }: EthersV5ProviderDeps,\n  account?: Address\n): ContractCallerFunctions<ContractTransaction> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new Contract(address, abi, providerOrSigner);\n\n    assertEthersContractHasMethodsV5(contract, contractMethod);\n    // drop keys not in CallOverrides\n    const { block, gas, ...restOverrides } = overrides;\n    // reassign values to keys in CallOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      blockTag: block,\n      gasLimit: gas,\n    };\n\n    // type FinalCallOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalCallOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      CallOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in CallOverrides\n    const callOverrides: FinalCallOverrides = normalizedOverrides;\n    // returns whatever the Contract.method returns: BigNumber, string, boolean\n    return contract.callStatic[contractMethod](...args, callOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<ContractTransaction> = async (\n    params\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const contract = new Contract(address, abi, signer);\n\n    assertEthersContractHasMethodsV5(contract, contractMethod);\n    // drop keys not in PayableOverrides\n    const { gas, from, ...restOverrides } = overrides;\n    // reassign values to keys in PayableOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      gasLimit: gas,\n    };\n\n    // type FinalPayableOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalPayableOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      PayableOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in PayableOverrides\n    const txOverrides: FinalPayableOverrides = normalizedOverrides;\n    const txResponse: ContractTransaction = await contract[contractMethod](\n      ...args,\n      txOverrides\n    );\n\n    return txResponse;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    assert(isTypedDataCapableSigner(signer), 'Signer can sign typed data');\n\n    const { data, domain, types } = typedData;\n\n    return signer._signTypedData(domain, types, data);\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isEthersProvider(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is BaseProvider {\n  return '_isProvider' in providerOrSigner && providerOrSigner._isProvider;\n}\n\nfunction isEthersProviderWithSigner(\n  providerOrSigner: JsonRpcProvider | BaseProvider | Signer\n): providerOrSigner is JsonRpcProvider {\n  return isEthersProvider(providerOrSigner) && 'getSigner' in providerOrSigner;\n}\n\nfunction isEthersSigner(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is Signer {\n  return '_isSigner' in providerOrSigner && providerOrSigner._isSigner;\n}\n\nfunction isTypedDataCapableSigner(\n  signer: Signer\n): signer is Signer & Pick<JsonRpcSigner, '_signTypedData'> {\n  return '_signTypedData' in signer;\n}\n\n/// ethers v5\ntype EthersContractWithMethodV5<T extends string> = EthersV5Contract & {\n  readonly [method in T]: EthersContractFunctionV5;\n} & {\n  readonly functions: { [method in T]: EthersContractFunctionV5 };\n\n  readonly callStatic: { [method in T]: EthersContractFunctionV5 };\n  readonly estimateGas: {\n    [method in T]: EthersContractFunctionV5<EthersBigNumberV5>;\n  };\n  readonly populateTransaction: {\n    [method in T]: EthersContractFunctionV5<EthersPopulatedTransactionV5>;\n  };\n};\n\nfunction ethersContractHasMethodsV5<T extends string>(\n  contract: EthersV5Contract,\n  ...methods: T[]\n): contract is EthersContractWithMethodV5<T> {\n  return methods.every((method) => typeof contract[method] === 'function');\n}\n\nfunction assertEthersContractHasMethodsV5<T extends string>(\n  contract: EthersV5Contract,\n  ...methods: T[]\n): asserts contract is EthersContractWithMethodV5<T> {\n  assert(\n    ethersContractHasMethodsV5(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n","import type {\n  Address,\n  ContractCallerFunctions,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport { assert } from 'ts-essentials';\nimport type {\n  JsonRpcProvider,\n  Signer,\n  ContractRunner,\n  Contract as EthersContract,\n  Overrides,\n  ContractTransactionResponse,\n} from 'ethers';\n\nexport interface EthersV6ProviderDeps {\n  ethersV6ProviderOrSigner: ContractRunner | Signer;\n  EthersV6Contract: typeof EthersContract; // passing Contract in allows not to include ethers as dependency\n}\n\nexport const constructContractCaller = (\n  {\n    ethersV6ProviderOrSigner: providerOrSigner,\n    EthersV6Contract: Contract,\n  }: EthersV6ProviderDeps,\n  account?: Address\n): ContractCallerFunctions<ContractTransactionResponse> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new Contract(address, abi, providerOrSigner);\n\n    // drop keys not in CallOverrides\n    const { block, gas, ...restOverrides } = overrides;\n    // reassign values to keys in CallOverrides\n    const normalizedOverrides: Overrides = {\n      ...restOverrides,\n      blockTag: block,\n      gasLimit: gas,\n    };\n\n    const callableContractFunction = contract.getFunction(contractMethod);\n\n    // returns whatever the Contract[\"method\"].staticCall returns: BigNumber, string, boolean\n    return callableContractFunction.staticCall(...args, normalizedOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<\n    ContractTransactionResponse\n  > = async (params) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? await providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const contract = new Contract(address, abi, signer);\n\n    // drop keys not in PayableOverrides\n    const { gas, from, ...restOverrides } = overrides;\n    // reassign values to keys in PayableOverrides\n    const normalizedOverrides: Overrides = {\n      ...restOverrides,\n      gasLimit: gas,\n    };\n\n    // if no method for contractMethod, ethers will throw\n    const callableContractFunction = contract.getFunction(contractMethod);\n\n    const txResponse = await callableContractFunction.send(\n      ...args,\n      normalizedOverrides\n    );\n\n    return txResponse;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? await providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const { data, domain, types } = typedData;\n\n    return signer.signTypedData(domain, types, data);\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isEthersProviderWithSigner(\n  providerOrSigner: JsonRpcProvider | ContractRunner | Signer\n): providerOrSigner is JsonRpcProvider {\n  return 'getSigner' in providerOrSigner;\n}\n\nfunction isEthersSigner(\n  providerOrSigner: ContractRunner | Signer\n): providerOrSigner is Signer {\n  return 'getAddress' in providerOrSigner;\n}\n","import { assert } from 'ts-essentials';\nimport { TypedDataField } from '../../methods/common/orders/buildOrderData';\n\n// regex from @ethersproject/hash TypedDataEncoder.constructor\n// may be overly strict, but reliable\nconst baseTypeRegex = /^([^\\x5b]*)(\\x5b|$)/;\n\nexport function findPrimaryType(\n  types: Record<string, TypedDataField[]>\n): string {\n  const candidates = Object.keys(types);\n  const candidatesSet = new Set(candidates);\n\n  candidates.forEach((candidate) => {\n    const typedDataFields = types[candidate];\n    if (!typedDataFields) return;\n\n    typedDataFields.forEach(({ type }) => {\n      // Get the base type (drop any array specifiers)\n      const baseType = type.match(baseTypeRegex)?.[1];\n      if (!baseType) return;\n\n      // if type was referred to as a child of another type, it can't be the primaryType\n      candidatesSet.delete(baseType);\n    });\n  });\n\n  const [primaryType] = Array.from(candidatesSet);\n\n  assert(\n    primaryType,\n    `No primary type found in SignableTypedData types, ${JSON.stringify(types)}`\n  );\n\n  return primaryType;\n}\n","import type {\n  Address,\n  ContractCallerFunctions,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type { PayableCallOptions, AbiItem } from 'web3';\nimport type Web3 from 'web3';\nimport type { ContractAbi, Contract as Web3Contract } from 'web3';\nimport type { PayableTxOptions } from 'web3-eth-contract';\nimport { assert } from 'ts-essentials';\nimport { findPrimaryType } from './helpers';\n\ntype ContractMethodRes = ReturnType<Web3ContractSendMethod>;\nexport type Web3UnpromiEvent = Pick<\n  ReturnType<ContractMethodRes['send']>,\n  'on' | 'once'\n>;\n\ntype SendOptions = PayableTxOptions;\ntype CallOptions = PayableCallOptions;\n\nexport const constructContractCaller = (\n  web3: Web3,\n  account?: Address\n): ContractCallerFunctions<Web3UnpromiEvent> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as AbiItem[], // FIXME abi types ethers dependant\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { block, gas, value, ...restOverrides } = overrides;\n\n    const normalizedOverrides: CallOptions = {\n      ...restOverrides,\n      gas: gas?.toString(10),\n      value: value?.toString(10),\n    };\n\n    return contract.methods[contractMethod](...args).call(normalizedOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<Web3UnpromiEvent> = async (\n    params\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to send transactions');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as unknown as AbiItem[], // FIXME\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { gas, from, value, nonce, ...restOverrides } = overrides;\n\n    const _from = from || account;\n\n    assert(_from, 'from is required');\n\n    const normalizedOverrides: SendOptions = {\n      ...restOverrides,\n      from: _from,\n      gas: gas?.toString(10),\n      value: value?.toString(10),\n      nonce: nonce?.toString(10),\n    };\n\n    const preparedCall = contract.methods[contractMethod](...args);\n\n    const promiEvent = preparedCall.send(normalizedOverrides);\n\n    // can't just return promiEvent, because async function returns a Promise<PromiEvent>\n    // and await Promise<PromiEvent> automatically awaits the value of PromiEvent,\n    // that is await Promise<PromiEvent> = Awaited<PromiEvent> that doesn't have .on|once\n    // so that functionality becomes lost\n    // transactCall can be made sync, but approve has to be async to await getSpender()\n    const unpromiEvent: Web3UnpromiEvent = {\n      on: promiEvent.on.bind(promiEvent),\n      once: promiEvent.once.bind(promiEvent),\n    };\n\n    return unpromiEvent;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to sign data');\n\n    const { data, domain, types } = typedData;\n\n    const _typedData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        ...types,\n      },\n      primaryType: findPrimaryType(types),\n      domain,\n      message: data,\n    };\n\n    // account must be among unlocked accounts\n    const signature = await web3.eth.signTypedData(account, _typedData as any);\n    return signature;\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\n/// web3@4\ntype Web3ContractSendMethod = Web3Contract<ContractAbi>['methods'][string];\n\ntype Web3ContractWithMethod<T extends string> = Web3Contract<ContractAbi> & {\n  methods: { [method in T]: Web3ContractSendMethod };\n};\n\nfunction web3ContractHasMethods<T extends string>(\n  contract: Web3Contract<ContractAbi>,\n  ...methods: T[]\n): contract is Web3ContractWithMethod<T> {\n  return methods.every(\n    (method) => typeof contract.methods[method] === 'function'\n  );\n}\n\nfunction assertWeb3ContractHasMethods<T extends string>(\n  contract: Web3Contract<ContractAbi>,\n  ...methods: T[]\n): asserts contract is Web3ContractWithMethod<T> {\n  assert(\n    web3ContractHasMethods(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n","import type {\n  Address,\n  ContractCallerFunctions,\n  ContractCallStaticInput,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport { assert, MarkOptional } from 'ts-essentials';\n\nimport type {\n  PublicActions,\n  WalletActions,\n  Hex,\n  BlockTag,\n  Chain,\n  Transport,\n  TypedDataDomain,\n  Account,\n} from 'viem';\nimport { findPrimaryType } from './helpers';\nimport { TransactionParams } from '../../methods/swap/transaction';\n\nexport type MinViemClient = Partial<\n  Pick<PublicActions<Transport, Chain>, 'readContract'> &\n    Pick<\n      WalletActions<Chain>,\n      'writeContract' | 'signTypedData' | 'signMessage'\n    >\n> & { account?: Account };\n\nexport const constructContractCaller = (\n  viemClient: MinViemClient,\n  account?: Address\n): ContractCallerFunctions<Hex> => {\n  const staticCall: StaticContractCallerFn = async <\n    T,\n    M extends string = string\n  >(\n    params: ContractCallStaticInput<M>\n  ): Promise<T> => {\n    assert(\n      viemClient.readContract,\n      'Viem client must have readContract Public Action'\n    );\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const { block } = overrides;\n\n    const { blockNumber, blockTag } =\n      typeof block === 'number'\n        ? { blockNumber: BigInt(block) }\n        : { blockTag: block as BlockTag };\n\n    const result = viemClient.readContract({\n      account: viemClient.account || (account as Hex),\n      address: address as Hex,\n      abi,\n      functionName: contractMethod,\n      args,\n      blockTag,\n      blockNumber,\n    });\n\n    return result as T; // can't get specific type for generic abi & method\n  };\n\n  const transactCall: TransactionContractCallerFn<Hex> = async (params) => {\n    assert(account, 'account must be specified sign transactions');\n    assert(\n      viemClient.writeContract,\n      'Viem client must have writeContract Wallet Action'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const viemTxParams = txParamsToViemTxParams({\n      ...overrides,\n      to: address,\n      gas: overrides.gas?.toString(10),\n      value: overrides.value?.toString(10),\n    });\n\n    const gasPriceParams =\n      'maxFeePerGas' in viemTxParams\n        ? {\n            maxFeePerGas: viemTxParams.maxFeePerGas,\n            maxPriorityFeePerGas: viemTxParams.maxPriorityFeePerGas,\n          }\n        : 'gasPrice' in viemTxParams\n        ? { gasPrice: viemTxParams.gasPrice }\n        : {};\n\n    const txHash = await viemClient.writeContract({\n      // either `viemClient` has account assigned to it,\n      // or the provider `viemClient` was created with must control `account` (viemClient.getAddresses()[0]===account);\n      // otherwise breaks with ` ProviderError: Unknown account 0x...`\n      account: viemClient.account || (account as Hex),\n      address: address as Hex,\n      abi,\n      functionName: contractMethod,\n      args: argsToViemArgs(args),\n      value: viemTxParams.value,\n      gas: viemTxParams.gas,\n      // ...viemTxParams,\n      // account: (overrides.from || account) as Hex,\n      nonce: overrides.nonce,\n      ...gasPriceParams,\n    });\n\n    return txHash;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      viemClient.signTypedData,\n      'Viem client must have signTypedData Wallet Action'\n    );\n\n    const { data, domain, types } = typedData;\n\n    const primaryType = findPrimaryType(types);\n\n    const chainId =\n      domain.chainId === undefined ? undefined : Number(domain.chainId);\n    const viemDomain: TypedDataDomain = {\n      chainId,\n      name: domain.name,\n      version: domain.version,\n      verifyingContract: domain.verifyingContract as Hex,\n      salt: domain.salt as Hex,\n    };\n\n    const signature = await viemClient.signTypedData({\n      // either `viemClient` has account assigned to it,\n      // or the provider `viemClient` was created with must control `account` (viemClient.getAddresses()[0]===account)\n      account: viemClient.account || (account as Hex),\n      domain: viemDomain,\n      types,\n      primaryType,\n      message: data,\n    });\n\n    return signature;\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\ntype ViemTxParams = {\n  to: Hex;\n  data?: Hex;\n  value?: bigint;\n  nonce?: number;\n  gas?: bigint;\n} & (\n  | { maxFeePerGas?: bigint; maxPriorityFeePerGas?: bigint }\n  | { gasPrice?: bigint }\n);\n\nexport function txParamsToViemTxParams(\n  txParams: Omit<\n    MarkOptional<TransactionParams, 'data' | 'value'>,\n    'chainId' | 'from'\n  >\n): ViemTxParams {\n  const gas = txParams.gas !== undefined ? BigInt(txParams.gas) : undefined;\n  const gasPrice =\n    txParams.gasPrice !== undefined ? BigInt(txParams.gasPrice) : undefined;\n  const maxFeePerGas =\n    txParams.maxFeePerGas !== undefined\n      ? BigInt(txParams.maxFeePerGas)\n      : undefined;\n  const maxPriorityFeePerGas =\n    txParams.maxPriorityFeePerGas !== undefined\n      ? BigInt(txParams.maxPriorityFeePerGas)\n      : undefined;\n\n  const viemTxParams = {\n    to: txParams.to as Hex,\n    data: txParams.data as Hex,\n    value: txParams.value !== undefined ? BigInt(txParams.value) : undefined,\n    gas,\n    ...(txParams.maxFeePerGas !== undefined\n      ? { maxFeePerGas, maxPriorityFeePerGas }\n      : { gasPrice }),\n  };\n  return viemTxParams;\n}\n\nfunction argsToViemArgs(args: any[]): any[] {\n  return args.map((arg) => {\n    if (typeof arg === 'string') {\n      if (arg.startsWith('0x')) {\n        return arg;\n      }\n      const asNumber = Number(arg);\n      if (Number.isNaN(asNumber)) {\n        return arg;\n      }\n      return BigInt(asNumber);\n    }\n    return arg;\n  });\n}\n","import { SwapSide } from '../../../constants';\n\nenum OrderKind {\n  Sell = 0,\n  Buy = 1,\n}\n\nexport const SwapSideToOrderKind = {\n  [SwapSide.SELL]: OrderKind.Sell,\n  [SwapSide.BUY]: OrderKind.Buy,\n} as const;\n\nexport type DeltaAuctionOrder = {\n  /** @description The address of the order owner */\n  owner: string;\n  /** @description The address of the order beneficiary */\n  beneficiary: string; // beneficiary==owner if no transferTo\n  /** @description The address of the src token */\n  srcToken: string; // lowercase\n  /** @description The address of the dest token */\n  destToken: string; // lowercase\n  /** @description The amount of src token to swap */\n  srcAmount: string; // wei\n  /** @description The minimum amount of dest token to receive */\n  destAmount: string; // wei\n  /** @description The expected amount of token to receive */\n  expectedAmount: string; // wei\n  /** @description The kind of the order */\n  kind: OrderKind;\n  /** @description Metadata for the order, hex string */\n  metadata: string;\n  /** @description The deadline for the order */\n  deadline: number; // seconds\n  /** @description The nonce of the order */\n  nonce: string; // can be random, can even be Date.now()\n  /** @description Optional permit signature for the src token */\n  permit: string; //can be \"0x\"\n  /** @description Encoded partner address, fee bps, and flags for the order. partnerAndFee = (partner << 96) | (partnerTakesSurplus << 8) | fee in bps (max fee is 2%) */\n  partnerAndFee: string;\n  /** @description The bridge input */\n  bridge: Bridge;\n};\n\nexport type Bridge = {\n  protocolSelector: string; // Hex string\n  destinationChainId: number;\n  /** @description The address of the output token. Same as Order.destToken but on destination chain, so can still be a different address */\n  outputToken: string;\n  scalingFactor: number;\n\n  /** @description Data specific to the protocol */\n  protocolData: string; // Hex string\n};\n\nexport type DeltaAuctionStatus =\n  | 'NOT_STARTED'\n  | 'RUNNING'\n  | 'EXECUTING'\n  | 'EXECUTED'\n  | 'FAILED'\n  | 'EXPIRED'\n  | 'CANCELLED'\n  | 'SUSPENDED';\n\ntype DeltaAuctionTransaction = {\n  id: string;\n  hash: string;\n  orderId: string;\n  bidId: string | null;\n  blockNumber: number;\n  blockHash: string;\n  gasUsed: bigint;\n  gasPrice: bigint;\n  blobGasUsed: bigint;\n  blobGasPrice: bigint;\n  index: number;\n  status: number;\n  from: string;\n  to: string;\n  receivedAmount: string;\n  receivedAmountUSD: number;\n  spentAmount: string;\n  spentAmountUSD: number;\n  filledPercent: number; // in base points\n  protocolFee: string;\n  partnerFee: string;\n  agent: string;\n  auctionId: string;\n};\n\nexport type DeltaAuction = {\n  id: string;\n  deltaVersion: string; // 1.0 or 2.0 currently\n  user: string;\n  signature: string;\n  status: DeltaAuctionStatus;\n  order: DeltaAuctionOrder;\n  orderHash: string | null; // not available on old Orders only\n  transactions: DeltaAuctionTransaction[];\n  chainId: number;\n  partner: string;\n  referrerAddress: string | null;\n  expiresAt: string;\n  createdAt: string;\n  updatedAt: string;\n  partiallyFillable: boolean;\n\n  excludeAgents: string[] | null;\n  includeAgents: string[] | null;\n\n  bridgeMetadata: BridgeMetadata | null;\n  bridgeStatus: BridgeStatus | null;\n\n  // @TODO only returned after POST Order so far\n  // orderVersion: string; // \"2.0.0\"\n  // deltaGasOverhead: number;\n\n  type: 'MARKET' | 'LIMIT'; // @TODO when available in API for individual /order/:hash|:id\n};\n\nexport type BridgeMetadata = {\n  /** @description The amount that user should expect to get */\n  outputAmount: string;\n  /** @description The cross-chain deadline. If deadline passes, the bridgeStatus would be expired */\n  fillDeadline: number;\n  /** @description The deposit id */\n  depositId: number;\n  /** @description The transaction hash on the destination chain that fulfilled the order. When bridgeStatus='filled' */\n  fillTx?: string;\n  /** @description The transaction hash on the source chain that refunded the deposit. When bridgeStatus='refunded' */\n  depositRefundTxHash?: string;\n};\n\n//                                                             refunded is basically failed\nexport type BridgeStatus = 'pending' | 'filled' | 'expired' | 'refunded';\n\n//// available on BridgePrice ////\n\n// so far\ntype ProtocolName = 'Across' | 'StargateBus' | 'StargateTaxi';\n\ntype BridgeQuoteFee = {\n  feeToken: string;\n  amount: string;\n  amountInSrcToken: string;\n  amountInUSD: string;\n};\n\nexport type BridgePriceInfo = {\n  protocolName: ProtocolName;\n  destAmountAfterBridge: string;\n  destUSDAfterBridge: string;\n  fees: BridgeQuoteFee[];\n  estimatedTimeMs: number;\n};\n","import type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport { constructGetSpender } from '../swap/spender';\n\ntype GetDeltaContract = (\n  requestParams?: RequestParameters\n) => Promise<Address | null>;\nexport type GetDeltaContractFunctions = {\n  /** @description returns ParaswapDelta contract address when Delta is available on current chain */\n  getDeltaContract: GetDeltaContract;\n};\n\nexport const constructGetDeltaContract = (\n  options: ConstructFetchInput\n): GetDeltaContractFunctions => {\n  // analogous to getSpender() but for Delta Orders Contract = ParaswapDelta\n\n  const { getContracts } = constructGetSpender(options);\n\n  const getDeltaContract: GetDeltaContract = async (requestParams) => {\n    const { ParaswapDelta } = await getContracts(requestParams);\n    return ParaswapDelta || null;\n  };\n\n  return { getDeltaContract };\n};\n","import { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\n\nexport type PartnerFeeResponse = {\n  partnerFee: number; // in %, e.g. 0.12\n  partnerAddress: string;\n  takeSurplus: boolean;\n};\n\ntype PartnerFeeQueryParams = {\n  partner: string;\n};\n\ntype GetPartnerFee = (\n  options: PartnerFeeQueryParams,\n  requestParams?: RequestParameters\n) => Promise<PartnerFeeResponse>;\n\nexport type GetPartnerFeeFunctions = {\n  getPartnerFee: GetPartnerFee;\n};\n\nexport const constructGetPartnerFee = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetPartnerFeeFunctions => {\n  const partnerFeeUrl = `${apiURL}/prices/partnerfee/${chainId}` as const;\n\n  // going on the assumption that one `partner` will correspond to one `partnerFee` during the lifetime of SDK instance,\n  // to avoid unnecessary network requests\n  const cachedPartnerFee = new Map<string, PartnerFeeResponse>();\n\n  const getPartnerFee: GetPartnerFee = async (options, requestParams) => {\n    if (cachedPartnerFee.has(options.partner)) {\n      return cachedPartnerFee.get(options.partner)!;\n    }\n\n    const search = constructSearchString<PartnerFeeQueryParams>(options);\n\n    const fetchURL = `${partnerFeeUrl}/${search}` as const;\n\n    const data = await fetcher<PartnerFeeResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    cachedPartnerFee.set(options.partner, data);\n\n    return data;\n  };\n\n  return {\n    getPartnerFee,\n  };\n};\n","import { MarkOptional } from 'ts-essentials';\nimport { Domain, ZERO_ADDRESS } from '../../common/orders/buildOrderData';\nimport { Bridge, DeltaAuctionOrder } from './types';\n\n// Order(address owner,address beneficiary,address srcToken,address destToken,uint256 srcAmount,uint256 destAmount,uint256 deadline,uint256 nonce,bytes permit, bridge Bridge)\";\nconst SWAP_ORDER_EIP_712_TYPES = {\n  Order: [\n    { name: 'owner', type: 'address' },\n    { name: 'beneficiary', type: 'address' },\n    { name: 'srcToken', type: 'address' },\n    { name: 'destToken', type: 'address' },\n    { name: 'srcAmount', type: 'uint256' },\n    { name: 'destAmount', type: 'uint256' },\n    { name: 'expectedAmount', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n    { name: 'kind', type: 'uint8' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'partnerAndFee', type: 'uint256' },\n    { name: 'permit', type: 'bytes' },\n    { name: 'metadata', type: 'bytes' },\n    { name: 'bridge', type: 'Bridge' },\n  ],\n  Bridge: [\n    {\n      name: 'protocolSelector',\n      type: 'bytes4',\n    },\n    {\n      name: 'destinationChainId',\n      type: 'uint256',\n    },\n    {\n      name: 'outputToken',\n      type: 'address',\n    },\n    {\n      name: 'scalingFactor',\n      type: 'int8',\n    },\n    {\n      name: 'protocolData',\n      type: 'bytes',\n    },\n  ],\n};\n\nexport type SignableDeltaOrderData = {\n  types: {\n    Order: typeof SWAP_ORDER_EIP_712_TYPES.Order;\n    Bridge: typeof SWAP_ORDER_EIP_712_TYPES.Bridge;\n  };\n  domain: Domain;\n  data: DeltaAuctionOrder;\n};\n\ntype SignDeltaOrderInput = {\n  orderInput: DeltaAuctionOrder;\n  paraswapDeltaAddress: string;\n  chainId: number;\n};\n\nfunction produceDeltaOrderTypedData({\n  orderInput,\n  chainId,\n  paraswapDeltaAddress,\n}: SignDeltaOrderInput): SignableDeltaOrderData {\n  const typedData = {\n    types: {\n      Order: SWAP_ORDER_EIP_712_TYPES.Order,\n      Bridge: SWAP_ORDER_EIP_712_TYPES.Bridge,\n    },\n    domain: {\n      name: 'Portikus',\n      version: '2.0.0',\n      chainId,\n      verifyingContract: paraswapDeltaAddress,\n    },\n    data: orderInput,\n  };\n\n  return typedData;\n}\n\nexport type DeltaOrderDataInput = MarkOptional<\n  Omit<DeltaAuctionOrder, 'partnerAndFee'>,\n  'beneficiary' | 'deadline' | 'nonce' | 'permit'\n>;\n\nexport type BuildDeltaOrderDataInput = MarkOptional<\n  DeltaOrderDataInput,\n  'metadata'\n> & {\n  partnerAddress: string;\n  paraswapDeltaAddress: string;\n  partnerFeeBps: number;\n  partnerTakesSurplus?: boolean;\n  chainId: number;\n  bridge: Bridge;\n};\n\n// default deadline = 1 hour for now (may be changed later)\nexport const DELTA_DEFAULT_EXPIRY = 60 * 60; // seconds\n\nexport function buildDeltaSignableOrderData({\n  owner,\n  beneficiary = owner,\n\n  srcToken,\n  destToken,\n  srcAmount,\n  destAmount,\n  expectedAmount,\n\n  deadline = Math.floor(Date.now() / 1000 + DELTA_DEFAULT_EXPIRY),\n  nonce = Date.now().toString(10), // random enough to not cause collisions\n\n  permit = '0x',\n\n  kind,\n  metadata = '0x',\n\n  partnerAddress,\n  partnerFeeBps,\n  partnerTakesSurplus = false,\n\n  chainId,\n  paraswapDeltaAddress,\n  bridge,\n}: BuildDeltaOrderDataInput): SignableDeltaOrderData {\n  const orderInput: DeltaAuctionOrder = {\n    owner,\n    beneficiary,\n    srcToken,\n    destToken,\n    srcAmount,\n    destAmount,\n    expectedAmount,\n    deadline,\n    nonce,\n    permit,\n    partnerAndFee: producePartnerAndFee({\n      partnerFeeBps,\n      partnerAddress,\n      partnerTakesSurplus,\n    }),\n    bridge,\n    kind,\n    metadata,\n  };\n\n  return produceDeltaOrderTypedData({\n    orderInput,\n    chainId,\n    paraswapDeltaAddress,\n  });\n}\n\ntype ProducePartnerAndFeeInput = {\n  partnerFeeBps: number;\n  partnerAddress: string;\n  partnerTakesSurplus: boolean;\n};\n\n// fee and address are encoded together\nfunction producePartnerAndFee({\n  partnerFeeBps,\n  partnerAddress,\n  partnerTakesSurplus,\n}: ProducePartnerAndFeeInput): string {\n  if (partnerAddress === ZERO_ADDRESS) return '0';\n\n  const partnerAndFee =\n    (BigInt(partnerAddress) << BigInt(96)) |\n    BigInt(partnerFeeBps.toFixed(0)) |\n    (BigInt(partnerTakesSurplus) << BigInt(8));\n\n  return partnerAndFee.toString(10);\n}\n","import type {\n  ConstructFetchInput,\n  EnumerateLiteral,\n  RequestParameters,\n} from '../../types';\nimport { constructGetDeltaContract } from './getDeltaContract';\nimport { BridgePrice } from './getDeltaPrice';\nimport { constructGetPartnerFee } from './getPartnerFee';\nimport {\n  buildDeltaSignableOrderData,\n  type BuildDeltaOrderDataInput,\n  type SignableDeltaOrderData,\n} from './helpers/buildDeltaOrderData';\nimport { SwapSideToOrderKind } from './helpers/types';\nimport { BeneficiaryType } from '../common/orders/types';\nimport { SwapSide } from '../../constants';\nexport type { SignableDeltaOrderData } from './helpers/buildDeltaOrderData';\n\nexport type SwapSideUnion = EnumerateLiteral<typeof SwapSide>;\n\nexport type BuildDeltaOrderDataParams = {\n  /** @description The address of the order owner */\n  owner: string;\n  /** @description The address of the order beneficiary */\n  beneficiary?: string; // beneficiary==owner if no transferTo\n  /** @description The address of the src token */\n  srcToken: string; // lowercase\n  /** @description The address of the dest token. For Crosschain Order - destination token on the destination chain */\n  destToken: string; // lowercase\n  /** @description The amount of src token to swap */\n  srcAmount: string; // wei\n  /** @description The minimum amount of dest token to receive */\n  destAmount: string; // wei, deltaPrice.destAmount - slippage\n  /** @description The deadline for the order */\n  deadline?: number; // seconds\n  /** @description The nonce of the order */\n  nonce?: number | string; // can be random, can even be Date.now()\n  /** @description Optional permit signature for the src token https://developers.velora.xyz/api/velora-api/velora-delta-api/build-a-delta-order-to-sign#supported-permits-order#supported-permits */\n  permit?: string; //can be \"0x\"\n  /** @description Partner string. */\n  partner?: string;\n\n  /** @description Destination Chain ID for Crosschain Orders */\n  destChainId?: number;\n  /** @description Whether the beneficiary is a contract. Needed to automatically fill in crosschain Bridge */\n  beneficiaryType?: BeneficiaryType;\n\n  /** @description price response received from /delta/prices (getDeltaPrice method) */\n  deltaPrice: Pick<\n    BridgePrice,\n    | 'destAmount'\n    | 'partner'\n    | 'partnerFee'\n    | 'destToken'\n    | 'srcAmount'\n    | 'bridge'\n  >;\n\n  /** @description partner fee in basis points (bps), 50bps=0.5% */\n  partnerFeeBps?: number;\n  /** @description partner address */\n  partnerAddress?: string;\n  /** @description take surplus */\n  partnerTakesSurplus?: boolean;\n\n  /** @description The side of the order. Default is SELL */\n  side?: SwapSideUnion;\n  /** @description Metadata for the order, hex string */\n  metadata?: string;\n};\n\ntype BuildDeltaOrder = (\n  buildOrderParams: BuildDeltaOrderDataParams,\n  requestParams?: RequestParameters\n) => Promise<SignableDeltaOrderData>;\n\nexport type BuildDeltaOrderFunctions = {\n  /** @description Build Orders to be posted to Delta API for execution */\n  buildDeltaOrder: BuildDeltaOrder;\n};\n\nexport const constructBuildDeltaOrder = (\n  options: ConstructFetchInput\n): BuildDeltaOrderFunctions => {\n  const { chainId } = options;\n\n  // cached internally\n  const { getDeltaContract } = constructGetDeltaContract(options);\n  // cached internally for `partner`\n  const { getPartnerFee } = constructGetPartnerFee(options);\n\n  const buildDeltaOrder: BuildDeltaOrder = async (options, requestParams) => {\n    const ParaswapDelta = await getDeltaContract(requestParams);\n    if (!ParaswapDelta) {\n      throw new Error(`Delta is not available on chain ${chainId}`);\n    }\n\n    ////// Partner logic //////\n\n    // externally supplied partner fee data takes precedence\n    let partnerAddress = options.partnerAddress;\n    let partnerFeeBps =\n      options.partnerFeeBps ?? options.deltaPrice.partnerFee * 100;\n    let partnerTakesSurplus = options.partnerTakesSurplus;\n\n    // if fee given, takeSurplus is ignored\n    const feeOrTakeSurplusSupplied =\n      partnerFeeBps !== undefined || partnerTakesSurplus !== undefined;\n\n    if (partnerAddress === undefined || feeOrTakeSurplusSupplied) {\n      const partner = options.partner || options.deltaPrice.partner;\n      const partnerFeeResponse = await getPartnerFee(\n        { partner },\n        requestParams\n      );\n\n      partnerAddress = partnerAddress ?? partnerFeeResponse.partnerAddress;\n      // deltaPrice.partnerFee and partnerFeeResponse.partnerFee should be the same, but give priority to externally provided\n      partnerFeeBps = partnerFeeBps ?? partnerFeeResponse.partnerFee;\n      partnerTakesSurplus =\n        partnerTakesSurplus ?? partnerFeeResponse.takeSurplus;\n    }\n\n    const swapSide = options.side ?? SwapSide.SELL;\n\n    const expectedAmount =\n      swapSide === SwapSide.SELL\n        ? options.deltaPrice.destAmount\n        : options.deltaPrice.srcAmount;\n\n    const input: BuildDeltaOrderDataInput = {\n      owner: options.owner,\n      beneficiary: options.beneficiary,\n      srcToken: options.srcToken,\n      // for some cases of WETH->ETH crosschain swaps, the destToken is changed to WETH or ETH,\n      // this is already reflected in deltaPrice\n      destToken: options.deltaPrice.destToken,\n      srcAmount: options.srcAmount,\n      destAmount: options.destAmount,\n      expectedAmount,\n      deadline: options.deadline,\n      nonce: options.nonce?.toString(10),\n      permit: options.permit,\n      kind: SwapSideToOrderKind[swapSide],\n      metadata: options.metadata,\n\n      chainId,\n      paraswapDeltaAddress: ParaswapDelta,\n      partnerAddress,\n      partnerTakesSurplus,\n      partnerFeeBps,\n\n      bridge: options.deltaPrice.bridge, // ZERO_BRIDGE for same-chain Orders\n    };\n\n    return buildDeltaSignableOrderData(input);\n  };\n\n  return {\n    buildDeltaOrder,\n  };\n};\n","import { assert } from 'ts-essentials';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { BridgePrice } from './getDeltaPrice';\n// import { constructGetMulticallHandlers } from './getMulticallHandlers';\nimport {\n  // getDeltaBridge,\n  GetDeltaBridgeAndDestTokenOutput,\n} from './helpers/across';\nimport { BeneficiaryType } from '../common/orders/types';\nexport type { SignableDeltaOrderData } from './helpers/buildDeltaOrderData';\n\nexport type BuildCrosschainOrderBridgeParams = {\n  /** @description The address of the destination token on the destination chain */\n  destToken: string; // lowercase\n  /** @description Destination Chain ID for Crosschain Orders */\n  destChainId: number;\n  /** @description Whether the beneficiary is a contract. Needed to automatically fill in crosschain Bridge */\n  beneficiaryType: BeneficiaryType;\n\n  /** @description price response received from /delta/prices (getDeltaPrice method) */\n  deltaPrice: BridgePrice;\n};\n\ntype BuildCrosschainOrderBridge = (\n  buildOrderParams: BuildCrosschainOrderBridgeParams,\n  requestParams?: RequestParameters\n) => Promise<GetDeltaBridgeAndDestTokenOutput>;\n\nexport { GetDeltaBridgeAndDestTokenOutput as CrosschainOrderBridgeAndChanges };\n\nexport type BuildCrosschainOrderBridgeFunctions = {\n  /** @description Build Orders to be posted to Delta API for execution */\n  buildCrosschainOrderBridge: BuildCrosschainOrderBridge;\n};\n\nexport const constructBuildCrosschainOrderBridge = (\n  options: ConstructFetchInput\n): BuildCrosschainOrderBridgeFunctions => {\n  const { chainId } = options;\n\n  // cached internally for `multicall` contracts\n  // const { getMulticallHandlers } = constructGetMulticallHandlers(options);\n\n  const buildCrosschainOrderBridge: BuildCrosschainOrderBridge = async (\n    { destToken, destChainId, beneficiaryType, deltaPrice },\n    requestParams\n  ) => {\n    assert(\n      chainId !== deltaPrice.bridge.destinationChainId,\n      '`deltaPrice.bridge.destinationChainId` must be different from `chainId` for crosschain Order.bridge'\n    );\n\n    assert(\n      destChainId === deltaPrice.bridge.destinationChainId,\n      '`destChainId` must match `deltaPrice.bridge.destinationChainId` for crosschain Order.bridge'\n    );\n\n    /* const getMulticallHandler = async (chainId: number) => {\n      const multicallHandlersMap = await getMulticallHandlers(requestParams);\n      const multicallHandler = multicallHandlersMap[chainId];\n\n      assert(\n        multicallHandler,\n        `Multicall handler not found for chain ${chainId}`\n      );\n\n      return multicallHandler;\n    };\n\n    const { bridge } = await getDeltaBridge({\n      destTokenDestChain: destToken,\n      destChainId,\n      bridgeFee: deltaPrice.bridgeFee,\n      bridgeOutputToken: deltaPrice.bridge.outputToken,\n      beneficiaryType,\n      getMulticallHandler,\n    }); */\n\n    // @TODO remove the whole buildCrosschainOrderBridge() when API provides BridgePrice.bridge = whole Bridge object\n    const bridge = {\n      protocolSelector: '0x00000000',\n      scalingFactor: 0,\n      protocolData: '0x',\n      destinationChainId: deltaPrice.bridge.destinationChainId,\n      outputToken: deltaPrice.bridge.outputToken,\n    };\n\n    return {\n      bridge,\n    };\n  };\n\n  return {\n    buildCrosschainOrderBridge,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput, RequestParameters } from '../../types';\nimport { DeltaAuctionOrder, DeltaAuction } from './helpers/types';\n\nexport type DeltaOrderToPost = {\n  /** @description Partner string */\n  partner?: string;\n  /** @description Referrer address */\n  referrerAddress?: string;\n  order: DeltaAuctionOrder;\n  /** @description Signature of the order from order.owner address. EOA signatures must be submitted in ERC-2098 Compact Representation. */\n  signature: string;\n  chainId: number;\n  /** @description designates the Order as being able to partially filled, as opposed to fill-or-kill */\n  partiallyFillable?: boolean;\n\n  /** @description Type of the order. MARKET or LIMIT. Default is MARKET */\n  type?: 'MARKET' | 'LIMIT';\n\n  includeAgents?: string[];\n  excludeAgents?: string[];\n};\n\nexport type PostDeltaOrderParams = Omit<DeltaOrderToPost, 'chainId'>;\n\nexport type DeltaOrderApiResponse = Omit<DeltaAuction, 'transactions'> & {\n  orderVersion: string; // \"2.0.0\"\n  deltaGasOverhead: number; // @TODO may be removed\n  type: 'MARKET' | 'LIMIT';\n};\n\ntype PostDeltaOrder = (\n  postData: PostDeltaOrderParams,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderApiResponse>;\n\nexport type PostDeltaOrderFunctions = {\n  postDeltaOrder: PostDeltaOrder;\n};\n\nexport const constructPostDeltaOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostDeltaOrderFunctions => {\n  const postOrderUrl = `${apiURL}/delta/orders` as const;\n\n  const postDeltaOrder: PostDeltaOrder = (postData, requestParams) => {\n    const deltaOrderToPost: DeltaOrderToPost = { ...postData, chainId };\n\n    return fetcher<DeltaOrderApiResponse>({\n      url: postOrderUrl,\n      method: 'POST',\n      data: deltaOrderToPost,\n      requestParams,\n    });\n  };\n\n  return { postDeltaOrder };\n};\n","import type { SignableDeltaOrderData } from './buildDeltaOrderData';\n\nexport function sanitizeDeltaOrderData({\n  owner,\n  beneficiary,\n  srcToken,\n  destToken,\n  srcAmount,\n  destAmount,\n  expectedAmount,\n  deadline,\n  nonce,\n  permit,\n  partnerAndFee,\n  bridge,\n  kind,\n  metadata,\n}: SignableDeltaOrderData['data'] &\n  Record<string, any>): SignableDeltaOrderData['data'] {\n  return {\n    owner,\n    beneficiary,\n    srcToken,\n    destToken,\n    srcAmount,\n    destAmount,\n    expectedAmount,\n    deadline,\n    nonce,\n    permit,\n    partnerAndFee,\n    bridge,\n    kind,\n    metadata,\n  };\n}\n","import type { ConstructProviderFetchInput } from '../../types';\nimport { SignableDeltaOrderData } from './helpers/buildDeltaOrderData';\nimport { sanitizeDeltaOrderData } from './helpers/misc';\n\nexport type SignLimitOrderFunctions = {\n  signLimitOrder: (\n    signableOrderData: SignableDeltaOrderData\n  ) => Promise<string>;\n};\n\ntype SignDeltaOrder = (\n  signableOrderData: SignableDeltaOrderData\n) => Promise<string>;\n\nexport type SignDeltaOrderFunctions = {\n  signDeltaOrder: SignDeltaOrder;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignDeltaOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignDeltaOrderFunctions => {\n  const signDeltaOrder: SignDeltaOrder = async (typedData) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableDeltaOrderData = {\n      ...typedData,\n      data: sanitizeDeltaOrderData(typedData.data),\n    };\n    const signature = await options.contractCaller.signTypedDataCall(\n      typedDataOnly\n    );\n\n    return signature;\n  };\n\n  return { signDeltaOrder };\n};\n","import { Bridge } from '../..';\nimport { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  EnumerateLiteral,\n  RequestParameters,\n} from '../../types';\nimport { ZERO_ADDRESS } from '../common/orders/buildOrderData';\nimport { BridgePriceInfo } from './helpers/types';\n\ntype SwapSideUnion = EnumerateLiteral<typeof SwapSide>;\n\nexport type DeltaPriceParams = {\n  /** @description Source Token Address. Not Native Token */\n  srcToken: string;\n  /** @description Destination Token Address */\n  destToken: string;\n  /** @description srcToken amount in wei */\n  amount: string;\n  /** @description Source Token Decimals */\n  srcDecimals: number;\n  /** @description Destination Token Decimals */\n  destDecimals: number;\n  /** @description User's Wallet Address */\n  userAddress?: string;\n  /** @description Beneficiary Address */\n  beneficiary?: string; // beneficiary==owner if no transferTo\n  /** @description Partner string. */\n  partner?: string;\n  /** @description Destination Chain ID for Crosschain Orders */\n  destChainId?: number;\n  /** @description SELL or BUY, default is SELL */\n  side?: SwapSideUnion;\n\n  includeAgents?: string[];\n  excludeAgents?: string[];\n};\n\ntype DeltaPriceQueryOptions = Omit<\n  DeltaPriceParams,\n  'includeAgents' | 'excludeAgents'\n> & {\n  chainId: number; // will return error from API on unsupported chains\n  includeAgents?: string;\n  excludeAgents?: string;\n};\n\n// for same-chain Orders, all 0 params\nexport const DEFAULT_BRIDGE = {\n  protocolSelector: '0x00000000', // 4 bytes\n  destinationChainId: 0,\n  outputToken: ZERO_ADDRESS,\n  scalingFactor: 0,\n  protocolData: '0x',\n} as const satisfies Bridge;\n\nexport type DeltaPrice = {\n  srcToken: string;\n  destToken: string;\n  srcAmount: string;\n  /** @description Available for BUY side */\n  srcAmountBeforeFee?: string;\n  destAmount: string;\n  /** @description Available for SELL side */\n  destAmountBeforeFee?: string;\n  gasCost: string;\n  gasCostBeforeFee: string;\n  gasCostUSD: string;\n  gasCostUSDBeforeFee: string;\n  srcUSD: string;\n  /** @description Available for BUY side */\n  srcUSDBeforeFee?: string;\n  destUSD: string;\n  /** @description Available for SELL side */\n  destUSDBeforeFee?: string;\n  partner: string;\n  partnerFee: number; // in %\n  hmac: string;\n  bridge: Bridge; // for single-chain DeltaPrice, it's DEFAULT_BRIDGE\n};\n\nexport type BridgePrice = Omit<DeltaPrice, 'bridge'> & {\n  // destAmountAfterBridge: string; // became bridgeInfo.destAmountAfterBridge\n  // destUSDAfterBridge: string; // became bridgeInfo.destUSDAfterBridge\n  // bridgeFee: string; // became bridgeInfo.fees[0].amount\n  // bridgeFeeUSD: string; // became bridgeInfo.fees[0].amountInUSD\n  // poolAddress: string;\n  bridge: Bridge;\n  bridgeInfo: BridgePriceInfo;\n};\n\ntype DeltaPriceResponse = {\n  price: DeltaPrice | BridgePrice;\n  deltaAddress: string;\n};\n\ninterface GetDeltaPrice {\n  (\n    options: DeltaPriceParams & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<BridgePrice>;\n  (\n    options: DeltaPriceParams & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice>;\n  (options: DeltaPriceParams, requestParams?: RequestParameters): Promise<\n    DeltaPrice | BridgePrice\n  >;\n}\n\nexport type GetDeltaPriceFunctions = {\n  getDeltaPrice: GetDeltaPrice;\n};\n\nexport const constructGetDeltaPrice = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetDeltaPriceFunctions => {\n  const pricesUrl = `${apiURL}/delta/prices` as const;\n\n  async function getDeltaPrice(\n    options: DeltaPriceParams & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<BridgePrice>;\n  async function getDeltaPrice(\n    options: DeltaPriceParams & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice>;\n  async function getDeltaPrice(\n    options: DeltaPriceParams,\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice | BridgePrice>;\n  async function getDeltaPrice(\n    options: DeltaPriceParams,\n    requestParams?: RequestParameters\n  ): Promise<DeltaPrice | BridgePrice> {\n    const { includeAgents, excludeAgents, ...rest } = options;\n    const includeAgentsString = includeAgents\n      ? includeAgents.join(',')\n      : undefined;\n    const excludeAgentsString = excludeAgents\n      ? excludeAgents.join(',')\n      : undefined;\n\n    const search = constructSearchString<DeltaPriceQueryOptions>({\n      ...rest,\n      chainId,\n      side: options.side ?? SwapSide.SELL,\n      includeAgents: includeAgentsString,\n      excludeAgents: excludeAgentsString,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<DeltaPriceResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.price;\n  }\n\n  return {\n    getDeltaPrice,\n  };\n};\n","import { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\nimport type { DeltaAuction } from './helpers/types';\n\nexport type DeltaOrderFromAPI = Omit<DeltaAuction, 'signature'>;\n\ntype GetDeltaOrderById = (\n  orderId: string,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderFromAPI>;\n\ntype GetDeltaOrderByHash = (\n  orderHash: string,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderFromAPI>;\n\ntype OrdersFilter = {\n  /** @description Order.owner to fetch Delta Order for */\n  userAddress: Address;\n  /** @description Pagination option, page. Default 1 */\n  page?: number;\n  /** @description Pagination option, limit. Default 100 */\n  limit?: number;\n  /** @description Filter by chainId, without this filter, orders from all chains are returned */\n  chainId?: number; // @TODO currently not working\n  /** @description Filter by type. MARKET, LIMIT, or ALL. Default is ALL */\n  type?: 'MARKET' | 'LIMIT' | 'ALL';\n};\ntype OrderFiltersQuery = OrdersFilter;\n\ntype GetDeltaOrders = (\n  options: OrdersFilter,\n  requestParams?: RequestParameters\n) => Promise<DeltaOrderFromAPI[]>;\n\ntype GetRequiredBalanceParams = {\n  userAddress: Address;\n  tokenAddress?: Address;\n};\n\ntype GetRequiredBalance = (\n  userParams: GetRequiredBalanceParams,\n  requestParams?: RequestParameters\n) => Promise<Record<string, string>>; // token -> balance in Limit Orders\n\nexport type GetDeltaOrdersFunctions = {\n  getDeltaOrderById: GetDeltaOrderById;\n  getDeltaOrderByHash: GetDeltaOrderByHash;\n  getDeltaOrders: GetDeltaOrders;\n  getRequiredBalanceForDeltaLimitOrders: GetRequiredBalance;\n};\n\nexport const constructGetDeltaOrders = ({\n  apiURL = API_URL,\n  fetcher,\n  chainId,\n}: ConstructFetchInput): GetDeltaOrdersFunctions => {\n  const baseUrl = `${apiURL}/delta/orders` as const;\n\n  const getDeltaOrderById: GetDeltaOrderById = async (\n    orderId,\n    requestParams\n  ) => {\n    const fetchURL = `${baseUrl}/${orderId}` as const;\n\n    const order = await fetcher<DeltaOrderFromAPI>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  const getDeltaOrderByHash: GetDeltaOrderByHash = async (\n    orderHash,\n    requestParams\n  ) => {\n    const fetchURL = `${baseUrl}/hash/${orderHash}` as const;\n\n    const order = await fetcher<DeltaOrderFromAPI>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return order;\n  };\n\n  const getDeltaOrders: GetDeltaOrders = async (options, requestParams) => {\n    const search = constructSearchString<OrderFiltersQuery>({\n      userAddress: options.userAddress,\n      page: options.page,\n      limit: options.limit,\n      chainId: options.chainId,\n      type: options.type,\n    });\n\n    const fetchURL = `${baseUrl}${search}` as const;\n\n    const orders = await fetcher<DeltaOrderFromAPI[]>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return orders;\n  };\n\n  const getRequiredBalanceForDeltaLimitOrders: GetRequiredBalance = async (\n    userParams,\n    requestParams\n  ) => {\n    const userURL =\n      `${baseUrl}/fillablebalance/${chainId}/${userParams.userAddress}` as const;\n    const fetchURL = userParams.tokenAddress\n      ? (`${userURL}/${userParams.tokenAddress}` as const)\n      : userURL;\n\n    const response = await fetcher<Record<string, string>>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return response;\n  };\n\n  return {\n    getDeltaOrderById,\n    getDeltaOrderByHash,\n    getDeltaOrders,\n    getRequiredBalanceForDeltaLimitOrders,\n  };\n};\n","import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\nimport { constructGetDeltaContract } from './getDeltaContract';\n\nexport type ApproveTokenForDeltaFunctions<T> = {\n  /** @description approving ParaswapDelta contract as spender for Token */\n  approveTokenForDelta: ApproveToken<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForDelta = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForDeltaFunctions<T> => {\n  // getDeltaContract is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getDeltaContract } = constructGetDeltaContract(options);\n\n  const getParaswapDeltaAddress = async (requestParams?: RequestParameters) => {\n    const deltaContract = await getDeltaContract(requestParams);\n    if (!deltaContract) {\n      throw new Error(`Delta is not available on chain ${options.chainId}`);\n    }\n    return deltaContract;\n  };\n\n  const approveTokenForDelta: ApproveToken<T> = approveTokenMethodFactory<T>(\n    options.contractCaller,\n    getParaswapDeltaAddress\n  );\n\n  return {\n    approveTokenForDelta,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\n\n// srcChainId -> destChainId -> outputToken[]\n// output Tokens that are supported for a srcChainId -> destChainId pair\nexport type BridgeInfo = Record<number, Record<number, Address[]>>;\ntype BridgeInfoResponse = { supportedTokens: BridgeInfo };\n\ntype GetBridgeInfo = (requestParams?: RequestParameters) => Promise<BridgeInfo>;\n\nexport type GetBridgeInfoFunctions = {\n  getBridgeInfo: GetBridgeInfo;\n};\n\nexport const constructGetBridgeInfo = ({\n  apiURL = API_URL,\n  fetcher,\n}: ConstructFetchInput): GetBridgeInfoFunctions => {\n  const bridgeInfoUrl = `${apiURL}/delta/prices/bridge-info` as const;\n\n  const getBridgeInfo: GetBridgeInfo = async (requestParams) => {\n    const data = await fetcher<BridgeInfoResponse>({\n      url: bridgeInfoUrl,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.supportedTokens;\n  };\n\n  return {\n    getBridgeInfo,\n  };\n};\n","import { API_URL } from '../../constants';\nimport { runOnceAndCache } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\n\n// chainId -> multicallHandler\nexport type MulticallHandlersResponse = Record<number, Address>;\n\ntype GetMulticallHandlers = (\n  requestParams?: RequestParameters\n) => Promise<MulticallHandlersResponse>;\n\nexport type GetMulticallHandlersFunctions = {\n  getMulticallHandlers: GetMulticallHandlers;\n};\n\nexport const constructGetMulticallHandlers = ({\n  apiURL = API_URL,\n  fetcher,\n}: ConstructFetchInput): GetMulticallHandlersFunctions => {\n  const multicallHandlersUrl =\n    `${apiURL}/delta/prices/multicall-handlers` as const;\n\n  const _getMulticallHandlers: GetMulticallHandlers = async (requestParams) => {\n    const data = await fetcher<MulticallHandlersResponse>({\n      url: multicallHandlersUrl,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  };\n\n  // cached for the same instance of `{getMulticallHandlers} = constructGetMulticallHandlers()`\n  // so should persist across same apiUrl & network (and response is even network agnostic)\n  const getMulticallHandlers = runOnceAndCache(_getMulticallHandlers);\n\n  return {\n    getMulticallHandlers,\n  };\n};\n","import { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructFetchInput,\n  RequestParameters,\n} from '../../types';\n\ntype TokenSupportedInDeltaResponse = { supported: boolean };\ntype IsTokenSupportedInDeltaQueryOptions = {\n  token: Address;\n  chainId: number;\n};\n\ntype IsTokenSupportedInDelta = (\n  token: Address,\n  requestParams?: RequestParameters\n) => Promise<boolean>;\n\nexport type IsTokenSupportedInDeltaFunctions = {\n  isTokenSupportedInDelta: IsTokenSupportedInDelta;\n};\n\nexport const constructIsTokenSupportedInDelta = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): IsTokenSupportedInDeltaFunctions => {\n  const bridgeInfoUrl = `${apiURL}/delta/prices/is-token-supported` as const;\n\n  const isTokenSupportedInDelta: IsTokenSupportedInDelta = async (\n    token,\n    requestParams\n  ) => {\n    const search = constructSearchString<IsTokenSupportedInDeltaQueryOptions>({\n      token,\n      chainId,\n    });\n\n    const fetchURL = `${bridgeInfoUrl}/${search}` as const;\n\n    const data = await fetcher<TokenSupportedInDeltaResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data.supported;\n  };\n\n  return {\n    isTokenSupportedInDelta,\n  };\n};\n","import { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { BridgePrice, DeltaPrice } from '../delta/getDeltaPrice';\nimport type {\n  ConstructFetchInput,\n  EnumerateLiteral,\n  RequestParameters,\n  OptimalRate,\n} from '../../types';\n\ntype TradeMode = 'delta' | 'market' | 'all';\n// enable passing enum value by string\ntype SwapSideUnion = EnumerateLiteral<typeof SwapSide>;\n\nexport type QuoteParams<M extends TradeMode = TradeMode> = {\n  /** @description Source Token Address */\n  srcToken: string;\n  /** @description Destination Token Address */\n  destToken: string;\n  /** @description srcToken amount (in case of SELL) or destToken amount (in case of BUY), in wei */\n  amount: string;\n  /** @description Source Token Decimals.  */\n  srcDecimals: number;\n  /** @description Destination Token Decimals */\n  destDecimals: number;\n  /** @description SELL or BUY, default is SELL */\n  side?: SwapSideUnion;\n  /** @description User's Wallet Address */\n  userAddress?: string;\n  /** @description Partner string */\n  partner?: string;\n  /** @description Preferred mode for the trade. In case of \"all\", Delta pricing is returned, with Market as a fallback */\n  mode: M;\n};\n\ntype QuoteQueryOptions = QuoteParams & {\n  chainId: number; // will return error from API on unsupported chains\n};\n\ntype FallbackReason = {\n  errorType: string;\n  details: string;\n};\n\nexport type QuoteWithMarketPrice = {\n  market: OptimalRate;\n};\n\nexport type QuoteWithDeltaPrice = {\n  delta: DeltaPrice;\n  deltaAddress: string;\n};\n\nexport type QuoteWithBridgePrice = {\n  delta: BridgePrice;\n  deltaAddress: string;\n};\n\nexport type QuoteWithDeltaPriceAndBridgePrice = {\n  delta: DeltaPrice | BridgePrice;\n  deltaAddress: string;\n};\n\nexport type QuoteWithMarketPriceAsFallback = QuoteWithMarketPrice & {\n  fallbackReason: FallbackReason;\n};\n\nexport type QuoteResponse =\n  | QuoteWithDeltaPrice\n  | QuoteWithMarketPrice\n  | QuoteWithBridgePrice\n  | QuoteWithMarketPriceAsFallback\n  | QuoteWithDeltaPriceAndBridgePrice;\n\ninterface GetQuoteFunc {\n  (\n    options: QuoteParams<'delta'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPrice>;\n  (\n    options: QuoteParams<'delta'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  (\n    options: QuoteParams<'delta'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPriceAndBridgePrice>;\n  (\n    options: QuoteParams<'market'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithMarketPrice>;\n  (\n    options: QuoteParams<'all'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<\n    QuoteWithDeltaPrice | QuoteWithMarketPriceAsFallback // \"all\" mode tries for deltaPrice and falls back to market priceRoute\n  >;\n  (\n    options: QuoteParams<'all'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  (options: QuoteParams<'all'>, requestParams?: RequestParameters): Promise<\n    QuoteWithDeltaPriceAndBridgePrice | QuoteWithMarketPriceAsFallback // \"all\" mode tries for deltaPrice and falls back to market priceRoute\n  >;\n  (\n    options: QuoteParams,\n    requestParams?: RequestParameters\n  ): Promise<QuoteResponse>;\n}\n\nexport type GetQuoteFunctions = {\n  getQuote: GetQuoteFunc;\n};\n\nexport const constructGetQuote = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetQuoteFunctions => {\n  const pricesUrl = `${apiURL}/quote` as const;\n\n  function getQuote(\n    options: QuoteParams<'delta'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPrice>;\n  function getQuote(\n    options: QuoteParams<'delta'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  function getQuote(\n    options: QuoteParams<'delta'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithDeltaPriceAndBridgePrice>;\n  function getQuote(\n    options: QuoteParams<'market'>,\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithMarketPrice>;\n  function getQuote(\n    options: QuoteParams<'all'> & { destChainId?: undefined },\n    requestParams?: RequestParameters\n  ): Promise<\n    QuoteWithDeltaPrice | QuoteWithMarketPriceAsFallback // \"all\" mode tries for deltaPrice and falls back to market priceRoute\n  >;\n  function getQuote(\n    options: QuoteParams<'all'> & { destChainId: number },\n    requestParams?: RequestParameters\n  ): Promise<QuoteWithBridgePrice>;\n  function getQuote(\n    options: QuoteParams<'all'>,\n    requestParams?: RequestParameters\n  ): Promise<\n    QuoteWithDeltaPriceAndBridgePrice | QuoteWithMarketPriceAsFallback\n  >;\n  function getQuote(\n    options: QuoteParams,\n    requestParams?: RequestParameters\n  ): Promise<QuoteResponse>;\n  async function getQuote(\n    options: QuoteParams,\n    requestParams?: RequestParameters\n  ): Promise<QuoteResponse> {\n    const search = constructSearchString<QuoteQueryOptions>({\n      ...options,\n      chainId,\n      side: options.side ?? SwapSide.SELL,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<QuoteResponse>({\n      url: fetchURL,\n      method: 'GET',\n      requestParams,\n    });\n\n    return data;\n  }\n\n  return {\n    getQuote,\n  };\n};\n","import { Domain } from '../../common/orders/buildOrderData';\n\nconst ORDER_CANCELLATIONS_EIP_712_TYPES = {\n  OrderCancellations: [{ name: 'orderIds', type: 'string[]' }],\n};\n\nexport type CancelDeltaOrderData = {\n  orderIds: string[];\n};\n\nexport type SignableCancelDeltaOrderData = {\n  types: {\n    OrderCancellations: (typeof ORDER_CANCELLATIONS_EIP_712_TYPES)['OrderCancellations'];\n  };\n  domain: Domain;\n  data: CancelDeltaOrderData;\n};\n\ntype BuildCancelDeltaOrderInput = {\n  orderInput: CancelDeltaOrderData;\n  paraswapDeltaAddress: string;\n  chainId: number;\n};\n\nexport function buildCancelDeltaOrderSignableData({\n  orderInput,\n  chainId,\n  paraswapDeltaAddress,\n}: BuildCancelDeltaOrderInput): SignableCancelDeltaOrderData {\n  const typedData = {\n    types: {\n      OrderCancellations: ORDER_CANCELLATIONS_EIP_712_TYPES.OrderCancellations,\n    },\n    domain: {\n      name: 'Portikus',\n      version: '2.0.0',\n      chainId,\n      verifyingContract: paraswapDeltaAddress,\n    },\n    data: {\n      // explicityly pick only the necessary fields,\n      // otherwise signing will break if more is present\n      orderIds: orderInput.orderIds,\n    },\n  };\n\n  return typedData;\n}\n","import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport { constructGetDeltaContract } from './getDeltaContract';\nimport {\n  buildCancelDeltaOrderSignableData,\n  CancelDeltaOrderData,\n} from './helpers/buildCancelDeltaOrderData';\n\ntype SuccessResponse = { success: true };\n\ntype CancelDeltaOrderRequestParams = {\n  orderIds: string[];\n  signature: string;\n};\n\nexport type SignCancelDeltaOrderRequest = (\n  params: CancelDeltaOrderData,\n  requestParams?: RequestParameters\n) => Promise<string>;\n\nexport type PostCancelDeltaOrderRequest = (\n  params: CancelDeltaOrderRequestParams,\n  requestParams?: RequestParameters\n) => Promise<SuccessResponse>;\n\nexport type CancelDeltaOrder = (\n  params: CancelDeltaOrderData,\n  requestParams?: RequestParameters\n) => Promise<SuccessResponse>;\n\nexport type CancelDeltaOrderFunctions = {\n  signCancelLimitDeltaOrderRequest: SignCancelDeltaOrderRequest;\n  postCancelLimitDeltaOrderRequest: PostCancelDeltaOrderRequest;\n  /** @description Cancel a Limit Delta order */\n  cancelLimitDeltaOrders: CancelDeltaOrder;\n};\n\nexport const constructCancelDeltaOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller' | 'fetcher' | 'apiURL' | 'chainId'\n  >\n): CancelDeltaOrderFunctions => {\n  // cached internally\n  const { getDeltaContract } = constructGetDeltaContract(options);\n\n  const signCancelLimitDeltaOrderRequest: SignCancelDeltaOrderRequest = async (\n    params,\n    requestParams\n  ) => {\n    const ParaswapDelta = await getDeltaContract(requestParams);\n    if (!ParaswapDelta) {\n      throw new Error(`Delta is not available on chain ${options.chainId}`);\n    }\n\n    const typedData = buildCancelDeltaOrderSignableData({\n      orderInput: params,\n      paraswapDeltaAddress: ParaswapDelta,\n      chainId: options.chainId,\n    });\n    const signature = await options.contractCaller.signTypedDataCall(typedData);\n\n    return signature;\n  };\n\n  const postCancelLimitDeltaOrderRequest: PostCancelDeltaOrderRequest = async (\n    params,\n    requestParams\n  ) => {\n    const cancelUrl = `${options.apiURL}/delta/orders/cancel` as const;\n\n    const res = await options.fetcher<SuccessResponse>({\n      url: cancelUrl,\n      method: 'POST',\n      data: params,\n      requestParams,\n    });\n\n    return res;\n  };\n\n  const cancelLimitDeltaOrders: CancelDeltaOrder = async (\n    { orderIds },\n    requestParams\n  ) => {\n    const signature = await signCancelLimitDeltaOrderRequest(\n      { orderIds },\n      requestParams\n    );\n\n    const res = await postCancelLimitDeltaOrderRequest(\n      {\n        orderIds,\n        signature,\n      },\n      requestParams\n    );\n\n    return res;\n  };\n\n  return {\n    signCancelLimitDeltaOrderRequest,\n    postCancelLimitDeltaOrderRequest,\n    cancelLimitDeltaOrders,\n  };\n};\n","import type {\n  AnyFunction,\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ConstructProviderFetchInput,\n} from '../types';\nimport type { Merge, UnionToIntersection } from 'ts-essentials';\nimport type { ApproveTokenFunctions } from '../methods/swap/approve';\nimport type { CancelLimitOrderFunctions } from '../methods/limitOrders/cancelOrder';\nimport type { ApproveTokenForLimitOrderFunctions } from '../methods/limitOrders/approveForOrder';\nimport type { CancelNFTOrderFunctions } from '../methods/nftOrders/cancelOrder';\nimport type { ApproveTokenForNFTOrderFunctions } from '../methods/nftOrders/approveForOrder';\nimport type { FillOrderDirectlyFunctions } from '../methods/limitOrders/fillOrderDirectly';\nimport type { ApproveTokenForDeltaFunctions } from '../methods/delta/approveForDelta';\nimport { API_URL, DEFAULT_VERSION } from '../constants';\n\nexport type SDKConfig<TxResponse = any> = ConstructProviderFetchInput<\n  TxResponse,\n  'staticCall' | 'transactCall' | 'signTypedDataCall'\n> &\n  ConstructFetchInput;\n\ntype SDKFunction<T extends ConstructBaseInput> = (\n  config: T\n) => Record<string, AnyFunction | Record<string, AnyFunction>>;\n\ntype IntersectionOfReturns<Funcs extends AnyFunction[]> = UnionToIntersection<\n  ReturnType<Funcs[number]>\n>;\n\ntype PartialSDKResult<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = InferWithTxResponse<Config, Funcs>;\n\ntype InferWithTxResponse<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = Config extends SDKConfig<infer TxResponse> // if can infer TxResponse inside Config\n  ? // and if returns can be successfully intersected\n    IntersectionOfReturns<Funcs> extends Record<string, any>\n    ? MergeExtendableRecursively<\n        IntersectionOfReturns<Funcs>,\n        [\n          // if there are ApproveTokenFunctions or CancelLimitOrderFunctions in the intersection\n          // which means constructApproveToken or constructCancelLimitOrder was passed in Funcs\n          ApproveTokenFunctions<TxResponse>,\n          CancelLimitOrderFunctions<TxResponse>,\n          FillOrderDirectlyFunctions<TxResponse>,\n          ApproveTokenForLimitOrderFunctions<TxResponse>,\n          CancelNFTOrderFunctions<TxResponse>,\n          ApproveTokenForNFTOrderFunctions<TxResponse>,\n          ApproveTokenForDeltaFunctions<TxResponse>\n        ]\n        // then merge IntersectionOfReturns<Funcs> with them recursively\n      >\n    : IntersectionOfReturns<Funcs>\n  : IntersectionOfReturns<Funcs>;\n\n// merges Accum with Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableOnce<\n  Accum extends Record<string, any>,\n  Replacement extends Record<string, any>\n> = Accum extends Record<keyof Replacement, any>\n  ? Merge<Accum, Replacement>\n  : Accum;\n\n// recursively merges Accum with each Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableRecursively<\n  Accum extends Record<string, any>,\n  Replacements extends Record<string, any>[]\n> = Replacements extends [\n  head: infer Head extends Record<string, any>,\n  ...tail: infer Tail\n]\n  ? Tail extends Record<string, any>[]\n    ? MergeExtendableRecursively<MergeExtendableOnce<Accum, Head>, Tail>\n    : MergeExtendableOnce<Accum, Head>\n  : Accum;\n\n/** @description construct composable SDK with methods you choose yourself */\nexport const constructPartialSDK = <\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n>(\n  config: Config, // config is auto-inferred to cover the used functions\n  ...funcs: Funcs\n): PartialSDKResult<Config, Funcs> & Required<ConstructBaseInput> => {\n  const sdkFuncs = funcs.reduce<Partial<IntersectionOfReturns<Funcs>>>(\n    (accum, func) => {\n      const sdkSlice = func(config);\n      return Object.assign(accum, sdkSlice);\n    },\n    {}\n  );\n\n  const sdk = {\n    ...sdkFuncs,\n    apiURL: config.apiURL ?? API_URL,\n    version: config.version ?? DEFAULT_VERSION,\n    chainId: config.chainId,\n  } as PartialSDKResult<Config, Funcs> & Required<ConstructBaseInput>;\n\n  return sdk;\n};\n","import { constructPartialSDK, SDKConfig } from '../../sdk/partial';\nimport { constructGetAdapters, GetAdaptersFunctions } from './adapters';\nimport { ApproveTokenFunctions, constructApproveToken } from './approve';\nimport { constructGetBalances, GetBalancesFunctions } from './balance';\nimport { constructGetRate, GetRateFunctions } from './rates';\nimport { constructGetSpender, GetSpenderFunctions } from './spender';\nimport { constructSwapTx, GetSwapTxFunctions } from './swapTx';\nimport { constructGetTokens, GetTokensFunctions } from './token';\nimport { BuildTxFunctions, constructBuildTx } from './transaction';\n\nexport type SwapSDKMethods<TxResponse> = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  ApproveTokenFunctions<TxResponse> &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions &\n  GetSwapTxFunctions;\n\n/** @description construct SDK with every Swap-related method, fetching from API and token approval */\nexport const constructSwapSDK = <TxResponse>(\n  config: SDKConfig<TxResponse>\n): SwapSDKMethods<TxResponse> => {\n  const constructApproveTokenWithTxResponse = constructApproveToken<TxResponse>;\n\n  // include all available Swap methods\n  return constructPartialSDK(\n    config,\n    constructGetBalances,\n    constructGetTokens,\n    constructGetSpender,\n    constructApproveTokenWithTxResponse,\n    constructBuildTx,\n    constructGetAdapters,\n    constructGetRate,\n    constructSwapTx\n  );\n};\n","import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport type { LimitOrderToSend, LimitOrderFromApi } from './helpers/types';\nimport {\n  BuildLimitOrderFunctions,\n  BuildLimitOrderInput,\n  constructBuildLimitOrder,\n} from './buildOrder';\nimport {\n  CancelLimitOrderFunctions,\n  constructCancelLimitOrder,\n} from './cancelOrder';\nimport { constructGetLimitOrders, GetLimitOrdersFunctions } from './getOrders';\nimport { constructPostLimitOrder, PostLimitOrderFunctions } from './postOrder';\nimport { constructSignLimitOrder, SignLimitOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForLimitOrder,\n  ApproveTokenForLimitOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetLimitOrdersContractFunctions,\n  constructGetLimitOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildLimitOrdersTxFunctions,\n  constructBuildLimitOrderTx,\n} from './transaction';\nimport type { Address } from '@paraswap/core';\nimport {\n  FillOrderDirectlyFunctions,\n  constructFillOrderDirectly,\n} from './fillOrderDirectly';\n\ntype SubmitLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  extra?: { permitMakerAsset?: string },\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\n\ntype SubmitP2POrder = (\n  buildLimitOrderParams: BuildLimitOrderInput & { taker: Address },\n  extra?: { permitMakerAsset?: string },\n  requestParams?: RequestParameters\n) => Promise<LimitOrderFromApi>;\n\nexport type SubmitLimitOrderFuncs = {\n  submitLimitOrder: SubmitLimitOrder;\n  submitP2POrder: SubmitP2POrder;\n};\n\nexport const constructSubmitLimitOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitLimitOrderFuncs => {\n  const { buildLimitOrder } = constructBuildLimitOrder(options);\n  const { signLimitOrder } = constructSignLimitOrder(options);\n  const { postLimitOrder, postP2POrder } = constructPostLimitOrder(options);\n\n  const prepareLimitOrder = async (\n    buildLimitOrderParams: BuildLimitOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<LimitOrderToSend> => {\n    const orderData = await buildLimitOrder(buildLimitOrderParams);\n    const signature = await signLimitOrder(orderData);\n\n    const orderWithSignature: LimitOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitLimitOrder: SubmitLimitOrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postLimitOrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitP2POrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postP2POrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  return { submitLimitOrder, submitP2POrder };\n};\n\nexport type LimitOrderHandlers<T> = SubmitLimitOrderFuncs &\n  BuildLimitOrderFunctions &\n  SignLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  GetLimitOrdersFunctions &\n  GetLimitOrdersContractFunctions &\n  BuildLimitOrdersTxFunctions &\n  CancelLimitOrderFunctions<T> &\n  ApproveTokenForLimitOrderFunctions<T> &\n  FillOrderDirectlyFunctions<T>;\n\n/** @description construct SDK with every LimitOrders-related method, fetching from API and contract calls */\nexport const constructAllLimitOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): LimitOrderHandlers<TxResponse> => {\n  const limitOrdersGetters = constructGetLimitOrders(options);\n  const limitOrdersContractGetter = constructGetLimitOrdersContract(options);\n\n  const limitOrdersSubmit = constructSubmitLimitOrder(options);\n  const limitOrdersBuild = constructBuildLimitOrder(options);\n  const limitOrdersSign = constructSignLimitOrder(options);\n  const limitOrdersPost = constructPostLimitOrder(options);\n\n  const limitOrdersCancel = constructCancelLimitOrder(options);\n  const limitOrdersApproveToken = constructApproveTokenForLimitOrder(options);\n\n  const limitOrdersFillOrderDirectly = constructFillOrderDirectly(options);\n\n  const limitOrdersBuildTx = constructBuildLimitOrderTx(options);\n\n  return {\n    ...limitOrdersGetters,\n    ...limitOrdersContractGetter,\n    ...limitOrdersSubmit,\n    ...limitOrdersBuild,\n    ...limitOrdersSign,\n    ...limitOrdersPost,\n    ...limitOrdersCancel,\n    ...limitOrdersApproveToken,\n    ...limitOrdersFillOrderDirectly,\n    ...limitOrdersBuildTx,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport {\n  BuildDeltaOrderDataParams,\n  BuildDeltaOrderFunctions,\n  constructBuildDeltaOrder,\n} from './buildDeltaOrder';\nimport {\n  constructPostDeltaOrder,\n  DeltaOrderApiResponse,\n  DeltaOrderToPost,\n  PostDeltaOrderFunctions,\n} from './postDeltaOrder';\nimport {\n  constructSignDeltaOrder,\n  SignDeltaOrderFunctions,\n} from './signDeltaOrder';\nimport {\n  GetDeltaContractFunctions,\n  constructGetDeltaContract,\n} from './getDeltaContract';\nimport {\n  constructGetDeltaPrice,\n  GetDeltaPriceFunctions,\n} from './getDeltaPrice';\nimport {\n  constructGetDeltaOrders,\n  GetDeltaOrdersFunctions,\n} from './getDeltaOrders';\nimport {\n  constructGetPartnerFee,\n  GetPartnerFeeFunctions,\n} from './getPartnerFee';\nimport {\n  ApproveTokenForDeltaFunctions,\n  constructApproveTokenForDelta,\n} from './approveForDelta';\nimport {\n  constructGetBridgeInfo,\n  GetBridgeInfoFunctions,\n} from './getBridgeInfo';\nimport {\n  constructGetMulticallHandlers,\n  GetMulticallHandlersFunctions,\n} from './getMulticallHandlers';\nimport {\n  constructIsTokenSupportedInDelta,\n  IsTokenSupportedInDeltaFunctions,\n} from './isTokenSupportedInDelta';\nimport {\n  BuildCrosschainOrderBridgeFunctions,\n  constructBuildCrosschainOrderBridge,\n} from './buildCrosschainOrderBridge';\nimport {\n  CancelDeltaOrderFunctions,\n  constructCancelDeltaOrder,\n} from './cancelDeltaOrder';\n\nexport type SubmitDeltaOrderParams = BuildDeltaOrderDataParams & {\n  /** @description designates the Order as being able to be partially filled, as opposed to fill-or-kill */\n  partiallyFillable?: boolean;\n  /** @description Referrer address */\n  referrerAddress?: string;\n} & Pick<DeltaOrderToPost, 'type' | 'includeAgents' | 'excludeAgents'>;\n\ntype SubmitDeltaOrder = (\n  orderParams: SubmitDeltaOrderParams\n) => Promise<DeltaOrderApiResponse>;\n\nexport type SubmitDeltaOrderFuncs = {\n  submitDeltaOrder: SubmitDeltaOrder;\n};\n\nexport const constructSubmitDeltaOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitDeltaOrderFuncs => {\n  const { buildDeltaOrder } = constructBuildDeltaOrder(options);\n  const { signDeltaOrder } = constructSignDeltaOrder(options);\n  const { postDeltaOrder } = constructPostDeltaOrder(options);\n\n  const submitDeltaOrder: SubmitDeltaOrder = async (orderParams) => {\n    const orderData = await buildDeltaOrder(orderParams);\n    const signature = await signDeltaOrder(orderData);\n\n    const response = await postDeltaOrder({\n      signature,\n      partner: orderParams.partner,\n      order: orderData.data,\n      partiallyFillable: orderParams.partiallyFillable,\n      referrerAddress: orderParams.referrerAddress,\n      type: orderParams.type,\n      includeAgents: orderParams.includeAgents,\n      excludeAgents: orderParams.excludeAgents,\n    });\n\n    return response;\n  };\n\n  return { submitDeltaOrder };\n};\n\nexport type DeltaOrderHandlers<T> = SubmitDeltaOrderFuncs &\n  ApproveTokenForDeltaFunctions<T> &\n  BuildDeltaOrderFunctions &\n  BuildCrosschainOrderBridgeFunctions &\n  GetDeltaOrdersFunctions &\n  GetDeltaPriceFunctions &\n  GetDeltaContractFunctions &\n  GetPartnerFeeFunctions &\n  GetMulticallHandlersFunctions &\n  GetBridgeInfoFunctions &\n  IsTokenSupportedInDeltaFunctions &\n  PostDeltaOrderFunctions &\n  SignDeltaOrderFunctions &\n  CancelDeltaOrderFunctions;\n\n/** @description construct SDK with every Delta Order-related method, fetching from API and Order signing */\nexport const constructAllDeltaOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall'\n  >\n): DeltaOrderHandlers<TxResponse> => {\n  const deltaOrdersGetters = constructGetDeltaOrders(options);\n  const deltaOrdersContractGetter = constructGetDeltaContract(options);\n  const deltaPrice = constructGetDeltaPrice(options);\n\n  const partnerFee = constructGetPartnerFee(options);\n  const bridgeInfo = constructGetBridgeInfo(options);\n  const isTokenSupportedInDelta = constructIsTokenSupportedInDelta(options);\n  const multicallHandlers = constructGetMulticallHandlers(options);\n\n  const approveTokenForDelta = constructApproveTokenForDelta(options);\n\n  const deltaOrdersSubmit = constructSubmitDeltaOrder(options);\n\n  const buildCrosschainOrderBridge =\n    constructBuildCrosschainOrderBridge(options);\n\n  const deltaOrdersBuild = constructBuildDeltaOrder(options);\n  const deltaOrdersSign = constructSignDeltaOrder(options);\n  const deltaOrdersPost = constructPostDeltaOrder(options);\n\n  const deltaOrdersCancel = constructCancelDeltaOrder(options);\n\n  return {\n    ...deltaOrdersGetters,\n    ...deltaOrdersContractGetter,\n    ...deltaPrice,\n    ...partnerFee,\n    ...bridgeInfo,\n    ...isTokenSupportedInDelta,\n    ...multicallHandlers,\n    ...approveTokenForDelta,\n    ...deltaOrdersSubmit,\n    ...deltaOrdersBuild,\n    ...deltaOrdersSign,\n    ...deltaOrdersPost,\n    ...deltaOrdersCancel,\n    ...buildCrosschainOrderBridge,\n  };\n};\n","import type {\n  ConstructProviderFetchInput,\n  RequestParameters,\n} from '../../types';\nimport type { NFTOrderToSend, NFTOrderFromAPI } from './helpers/types';\nimport {\n  BuildNFTOrderFunctions,\n  BuildNFTOrderInput,\n  constructBuildNFTOrder,\n} from './buildOrder';\nimport {\n  CancelNFTOrderFunctions,\n  constructCancelNFTOrder,\n} from './cancelOrder';\nimport { constructGetNFTOrders, GetNFTOrdersFunctions } from './getOrders';\nimport { constructPostNFTOrder, PostNFTOrderFunctions } from './postOrder';\nimport { constructSignNFTOrder, SignNFTOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForNFTOrder,\n  ApproveTokenForNFTOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetNFTOrdersContractFunctions,\n  constructGetNFTOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildNFTOrdersTxFunctions,\n  constructBuildNFTOrderTx,\n} from './transaction';\n\ntype SubmitNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  extra?: { permitMakerAsset?: string },\n  requestParams?: RequestParameters\n) => Promise<NFTOrderFromAPI>;\n\nexport type SubmitNFTOrderFuncs = {\n  submitNFTOrder: SubmitNFTOrder;\n  submitP2POrder: SubmitNFTOrder;\n};\n\nexport const constructSubmitNFTOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitNFTOrderFuncs => {\n  const { buildNFTOrder } = constructBuildNFTOrder(options);\n  const { signNFTOrder } = constructSignNFTOrder(options);\n  const { postNFTLimitOrder, postNFTP2POrder } = constructPostNFTOrder(options);\n\n  const prepareNFTOrder = async (\n    buildNFTOrderParams: BuildNFTOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<NFTOrderToSend> => {\n    const orderData = await buildNFTOrder(buildNFTOrderParams);\n    const signature = await signNFTOrder(orderData);\n\n    const orderWithSignature: NFTOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitNFTOrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTLimitOrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    requestParams\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTP2POrder(orderWithSignature, requestParams);\n\n    return newOrder;\n  };\n\n  return { submitNFTOrder, submitP2POrder };\n};\n\nexport type NFTOrderHandlers<T> = SubmitNFTOrderFuncs &\n  BuildNFTOrderFunctions &\n  SignNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  GetNFTOrdersFunctions &\n  GetNFTOrdersContractFunctions &\n  BuildNFTOrdersTxFunctions &\n  CancelNFTOrderFunctions<T> &\n  ApproveTokenForNFTOrderFunctions<T>;\n\n/** @description construct SDK with every NFTOrders-related method, fetching from API and contract calls */\nexport const constructAllNFTOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): NFTOrderHandlers<TxResponse> => {\n  const NFTOrdersGetters = constructGetNFTOrders(options);\n  const NFTOrdersContractGetter = constructGetNFTOrdersContract(options);\n\n  const NFTOrdersSubmit = constructSubmitNFTOrder(options);\n  const NFTOrdersBuild = constructBuildNFTOrder(options);\n  const NFTOrdersSign = constructSignNFTOrder(options);\n  const NFTOrdersPost = constructPostNFTOrder(options);\n\n  const NFTOrdersCancel = constructCancelNFTOrder(options);\n  const NFTOrdersApproveToken = constructApproveTokenForNFTOrder(options);\n\n  const NFTOrdersBuildTx = constructBuildNFTOrderTx(options);\n\n  return {\n    ...NFTOrdersGetters,\n    ...NFTOrdersContractGetter,\n    ...NFTOrdersSubmit,\n    ...NFTOrdersBuild,\n    ...NFTOrdersSign,\n    ...NFTOrdersPost,\n    ...NFTOrdersCancel,\n    ...NFTOrdersApproveToken,\n    ...NFTOrdersBuildTx,\n  };\n};\n","import type { SDKConfig } from './partial';\nimport { constructSwapSDK, SwapSDKMethods } from '../methods/swap';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\nimport {\n  constructAllDeltaOrdersHandlers,\n  DeltaOrderHandlers,\n} from '../methods/delta';\nimport {\n  constructGetQuote,\n  GetQuoteFunctions,\n} from '../methods/quote/getQuote';\nimport { ConstructBaseInput } from '../types';\nimport { API_URL, DEFAULT_VERSION } from '../constants';\n\nexport type AllSDKMethods<TxResponse> = {\n  swap: SwapSDKMethods<TxResponse>;\n  limitOrders: LimitOrderHandlers<TxResponse>;\n  nftOrders: NFTOrderHandlers<TxResponse>;\n  delta: DeltaOrderHandlers<TxResponse>;\n  quote: GetQuoteFunctions;\n} & Required<ConstructBaseInput>;\n\n/** @description construct SDK with every method, for swap and limitOrders */\nexport const constructFullSDK = <TxResponse = any>(\n  config: SDKConfig<TxResponse>\n): AllSDKMethods<TxResponse> => {\n  // include all available functions\n  const swap: SwapSDKMethods<TxResponse> = constructSwapSDK(config);\n  const limitOrders: LimitOrderHandlers<TxResponse> =\n    constructAllLimitOrdersHandlers(config);\n  const nftOrders: NFTOrderHandlers<TxResponse> =\n    constructAllNFTOrdersHandlers(config);\n  const delta: DeltaOrderHandlers<TxResponse> =\n    constructAllDeltaOrdersHandlers(config);\n  const quote = constructGetQuote(config);\n\n  return {\n    swap,\n    limitOrders,\n    nftOrders,\n    delta,\n    quote,\n    apiURL: config.apiURL ?? API_URL,\n    chainId: config.chainId,\n    version: config.version ?? DEFAULT_VERSION,\n  };\n};\n","import { constructPartialSDK, SDKConfig } from './partial';\nimport {\n  GetAdaptersFunctions,\n  constructGetAdapters,\n} from '../methods/swap/adapters';\nimport {\n  GetBalancesFunctions,\n  constructGetBalances,\n} from '../methods/swap/balance';\nimport { GetRateFunctions, constructGetRate } from '../methods/swap/rates';\nimport {\n  GetSpenderFunctions,\n  constructGetSpender,\n} from '../methods/swap/spender';\nimport { GetTokensFunctions, constructGetTokens } from '../methods/swap/token';\nimport {\n  BuildTxFunctions,\n  constructBuildTx,\n} from '../methods/swap/transaction';\nimport { constructSwapTx, GetSwapTxFunctions } from '../methods/swap/swapTx';\n\nimport {\n  constructAxiosFetcher,\n  constructFetchFetcher,\n  constructEthersV5ContractCaller,\n  constructEthersV6ContractCaller,\n  constructWeb3ContractCaller,\n  constructViemContractCaller,\n} from '../helpers';\n\nimport type {\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ContractCallerFunctions,\n  TransactionContractCallerFn,\n  TxHash,\n  Address,\n  FetcherFunction,\n  ExtraFetchParams,\n} from '../types';\n\nimport type { EthersProviderDeps, MinViemClient } from '../helpers';\nimport type Web3 from 'web3';\n\nimport type { SwapSDKMethods } from '../methods/swap';\nimport {\n  BuildLimitOrderFunctions,\n  constructBuildLimitOrder,\n} from '../methods/limitOrders/buildOrder';\nimport {\n  constructPostLimitOrder,\n  PostLimitOrderFunctions,\n} from '../methods/limitOrders/postOrder';\nimport {\n  constructGetLimitOrders,\n  GetLimitOrdersFunctions,\n} from '../methods/limitOrders/getOrders';\nimport {\n  constructGetLimitOrdersContract,\n  GetLimitOrdersContractFunctions,\n} from '../methods/limitOrders/getOrdersContract';\nimport {\n  constructBuildLimitOrderTx,\n  BuildLimitOrdersTxFunctions,\n} from '../methods/limitOrders/transaction';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\n\nimport {\n  constructGetNFTOrdersContract,\n  GetNFTOrdersContractFunctions,\n} from '../methods/nftOrders/getOrdersContract';\nimport {\n  constructGetNFTOrders,\n  GetNFTOrdersFunctions,\n} from '../methods/nftOrders/getOrders';\nimport {\n  BuildNFTOrderFunctions,\n  constructBuildNFTOrder,\n} from '../methods/nftOrders/buildOrder';\nimport {\n  constructPostNFTOrder,\n  PostNFTOrderFunctions,\n} from '../methods/nftOrders/postOrder';\nimport {\n  constructBuildNFTOrderTx,\n  BuildNFTOrdersTxFunctions,\n} from '../methods/nftOrders/transaction';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\n\nimport { constructSwapSDK } from '../methods/swap';\nimport type { AxiosRequirement } from '../helpers/fetchers/axios';\nimport { API_URL, DEFAULT_VERSION } from '../constants';\nimport {\n  constructAllDeltaOrdersHandlers,\n  DeltaOrderHandlers,\n} from '../methods/delta';\nimport {\n  BuildDeltaOrderFunctions,\n  constructBuildDeltaOrder,\n} from '../methods/delta/buildDeltaOrder';\nimport {\n  constructGetDeltaOrders,\n  GetDeltaOrdersFunctions,\n} from '../methods/delta/getDeltaOrders';\nimport {\n  constructGetDeltaPrice,\n  GetDeltaPriceFunctions,\n} from '../methods/delta/getDeltaPrice';\nimport {\n  constructGetDeltaContract,\n  GetDeltaContractFunctions,\n} from '../methods/delta/getDeltaContract';\nimport {\n  constructGetPartnerFee,\n  GetPartnerFeeFunctions,\n} from '../methods/delta/getPartnerFee';\nimport {\n  constructPostDeltaOrder,\n  PostDeltaOrderFunctions,\n} from '../methods/delta/postDeltaOrder';\nimport {\n  constructGetQuote,\n  GetQuoteFunctions,\n} from '../methods/quote/getQuote';\nimport {\n  constructGetBridgeInfo,\n  GetBridgeInfoFunctions,\n} from '../methods/delta/getBridgeInfo';\nimport {\n  constructGetMulticallHandlers,\n  GetMulticallHandlersFunctions,\n} from '../methods/delta/getMulticallHandlers';\nimport {\n  constructIsTokenSupportedInDelta,\n  IsTokenSupportedInDeltaFunctions,\n} from '../methods/delta/isTokenSupportedInDelta';\nimport {\n  BuildCrosschainOrderBridgeFunctions,\n  constructBuildCrosschainOrderBridge,\n} from '../methods/delta/buildCrosschainOrderBridge';\n\nexport type SwapFetchMethods = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions &\n  GetSwapTxFunctions;\n\nexport type LimitOrdersFetchMethods = GetLimitOrdersContractFunctions &\n  GetLimitOrdersFunctions &\n  BuildLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  BuildLimitOrdersTxFunctions;\n\nexport type NFTOrdersFetchMethods = GetNFTOrdersContractFunctions &\n  GetNFTOrdersFunctions &\n  BuildNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  BuildNFTOrdersTxFunctions;\n\nexport type DeltaFetchMethods = BuildDeltaOrderFunctions &\n  BuildCrosschainOrderBridgeFunctions &\n  GetDeltaOrdersFunctions &\n  GetDeltaPriceFunctions &\n  GetDeltaContractFunctions &\n  GetPartnerFeeFunctions &\n  GetMulticallHandlersFunctions &\n  GetBridgeInfoFunctions &\n  IsTokenSupportedInDeltaFunctions &\n  PostDeltaOrderFunctions;\n\nexport type SimpleFetchSDK = {\n  swap: SwapFetchMethods;\n  limitOrders: LimitOrdersFetchMethods;\n  nftOrders: NFTOrdersFetchMethods;\n  delta: DeltaFetchMethods;\n  quote: QuoteFetchMethods;\n} & Required<ConstructBaseInput>;\n\nexport type QuoteFetchMethods = GetQuoteFunctions;\n\nexport type SimpleSDK = {\n  swap: SwapSDKMethods<TxHash>;\n  limitOrders: LimitOrderHandlers<TxHash>;\n  nftOrders: NFTOrderHandlers<TxHash>;\n  delta: DeltaOrderHandlers<TxHash>;\n  quote: QuoteFetchMethods;\n} & Required<ConstructBaseInput>;\n\nexport type FetcherOptions = (\n  | {\n      axios: AxiosRequirement;\n    }\n  | { fetch: typeof fetch }\n  | { fetcher: FetcherFunction }\n) &\n  ExtraFetchParams;\n\ntype SimpleOptions = ConstructBaseInput & FetcherOptions;\n\nexport type ProviderOptions = (\n  | EthersProviderDeps\n  | { web3: Web3 }\n  | { viemClient: MinViemClient }\n) & {\n  account: Address;\n};\n\nconst constructFetcher = (options: FetcherOptions): FetcherFunction => {\n  if ('axios' in options) {\n    return constructAxiosFetcher(options.axios, options);\n  }\n  if ('fetch' in options) {\n    return constructFetchFetcher(options.fetch, options);\n  }\n  return (params) => {\n    // adding apiKey to headers if it's provided\n    const headers = options?.apiKey\n      ? {\n          'X-API-KEY': options.apiKey,\n          ...params.headers,\n          ...params.requestParams?.headers,\n        }\n      : params.headers;\n\n    return options.fetcher({ ...params, headers });\n  };\n};\n\n/** @description construct SDK with methods that fetch from API and optionally with blockchain provider calling methods */\nexport function constructSimpleSDK(options: SimpleOptions): SimpleFetchSDK;\n\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions: ProviderOptions\n): SimpleSDK;\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions?: ProviderOptions\n): SimpleFetchSDK | SimpleSDK {\n  const fetcher = constructFetcher(options);\n\n  if (!providerOptions) {\n    const config: ConstructFetchInput = {\n      apiURL: options.apiURL,\n      chainId: options.chainId,\n      version: options.version,\n      fetcher,\n    };\n\n    // include all available functions that don't need `contractCaller`\n    const swap: SwapFetchMethods = constructPartialSDK(\n      config,\n      constructGetBalances,\n      constructGetTokens,\n      constructGetSpender,\n      constructBuildTx,\n      constructGetAdapters,\n      constructGetRate,\n      constructSwapTx\n    );\n\n    const limitOrders = constructPartialSDK(\n      config,\n      constructBuildLimitOrder,\n      constructPostLimitOrder,\n      constructGetLimitOrders,\n      constructGetLimitOrdersContract,\n      constructBuildLimitOrderTx\n    );\n\n    const nftOrders = constructPartialSDK(\n      config,\n      constructBuildNFTOrder,\n      constructPostNFTOrder,\n      constructGetNFTOrders,\n      constructGetNFTOrdersContract,\n      constructBuildNFTOrderTx\n    );\n\n    const delta = constructPartialSDK(\n      config,\n      constructBuildDeltaOrder,\n      constructBuildCrosschainOrderBridge,\n      constructPostDeltaOrder,\n      constructGetDeltaOrders,\n      constructGetDeltaPrice,\n      constructGetDeltaContract,\n      constructGetPartnerFee,\n      constructGetMulticallHandlers,\n      constructGetBridgeInfo,\n      constructIsTokenSupportedInDelta\n    );\n\n    const quote = constructPartialSDK(config, constructGetQuote);\n\n    return {\n      swap,\n      limitOrders,\n      nftOrders,\n      delta,\n      quote,\n      apiURL: options.apiURL ?? API_URL,\n      chainId: options.chainId,\n      version: options.version ?? DEFAULT_VERSION,\n    };\n  }\n\n  const contractCaller = constructSimpleContractCaller(providerOptions);\n\n  const config: SDKConfig<TxHash> = {\n    apiURL: options.apiURL,\n    version: options.version,\n    chainId: options.chainId,\n    fetcher,\n    contractCaller,\n  };\n\n  const swap: SwapSDKMethods<TxHash> = constructSwapSDK(config);\n\n  const limitOrders: LimitOrderHandlers<TxHash> =\n    constructAllLimitOrdersHandlers<TxHash>(config);\n\n  const nftOrders: NFTOrderHandlers<TxHash> =\n    constructAllNFTOrdersHandlers<TxHash>(config);\n\n  const delta: DeltaOrderHandlers<TxHash> =\n    constructAllDeltaOrdersHandlers<TxHash>(config);\n\n  const quote = constructGetQuote(config);\n\n  return {\n    swap,\n    limitOrders,\n    nftOrders,\n    delta,\n    quote,\n    apiURL: options.apiURL ?? API_URL,\n    chainId: options.chainId,\n    version: options.version ?? DEFAULT_VERSION,\n  };\n}\n\nfunction constructSimpleContractCaller(\n  providerOptions: ProviderOptions\n): ContractCallerFunctions<TxHash> {\n  if ('ethersProviderOrSigner' in providerOptions) {\n    const {\n      staticCall,\n      transactCall: _transactCall,\n      signTypedDataCall,\n    } = constructEthersV5ContractCaller(\n      providerOptions,\n      providerOptions.account\n    );\n\n    const transactCall: TransactionContractCallerFn<TxHash> = async (\n      params\n    ) => {\n      const contractTx = await _transactCall(params);\n\n      // as soon as tx is sent\n      // returning tx hash, it's up to the user to wait for tx\n      return contractTx.hash as TxHash;\n    };\n\n    return { staticCall, transactCall, signTypedDataCall };\n  }\n\n  if ('ethersV6ProviderOrSigner' in providerOptions) {\n    const {\n      staticCall,\n      transactCall: _transactCall,\n      signTypedDataCall,\n    } = constructEthersV6ContractCaller(\n      providerOptions,\n      providerOptions.account\n    );\n\n    const transactCall: TransactionContractCallerFn<TxHash> = async (\n      params\n    ) => {\n      const contractTx = await _transactCall(params);\n\n      // as soon as tx is sent\n      // returning tx hash, it's up to the user to wait for tx\n      return contractTx.hash as TxHash;\n    };\n\n    return { staticCall, transactCall, signTypedDataCall };\n  }\n\n  if ('viemClient' in providerOptions) {\n    const contractCaller = constructViemContractCaller(\n      providerOptions.viemClient,\n      providerOptions.account\n    );\n    return contractCaller;\n  }\n\n  const {\n    staticCall,\n    transactCall: _transactCall,\n    signTypedDataCall,\n  } = constructWeb3ContractCaller(\n    providerOptions.web3,\n    providerOptions.account\n  );\n\n  const transactCall: TransactionContractCallerFn<TxHash> = async (params) => {\n    const unpromiEvent = await _transactCall(params);\n\n    // as soon as tx is sent\n    // returning tx hash, it's up to the user to wait for tx\n    return new Promise<TxHash>((resolve, reject) => {\n      unpromiEvent.once('transactionHash', (hash) => resolve(hash as TxHash));\n      unpromiEvent.once('error', reject);\n    });\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n}\n"],"names":["API_URL","DEFAULT_VERSION","constructSearchString","queryOptions","queryEntries","Object","entries","filter","_ref","undefined","map","_ref2","String","queryString","URLSearchParams","toString","FetcherError","_Error","_ref3","_this","code","request","response","isAxiosError","message","call","this","status","Error","captureStackTrace","name","constructor","_assertThisInitialized","data","isObject","isDataWithError","error","isDataWithError2","errorType","description","_wrapNativeSuper","obj","isFilledArray","array","length","getRandomInt","Math","floor","random","Number","MAX_SAFE_INTEGER","runOnceAndCache","func","result","_result","apply","arguments","constructGetSpender","_ref$apiURL","apiURL","_ref$version","version","fetcher","fetchURL","network","chainId","_getContracts","_asyncToGenerator","_regeneratorRuntime","mark","_callee","requestParams","wrap","_context","prev","next","url","method","abrupt","sent","stop","_x","getContracts","getSpender","_callee2","_context2","TokenTransferProxy","_x2","getAugustusSwapper","_ref4","_callee3","_context3","AugustusSwapper","_x3","getAugustusRFQ","_ref5","_callee4","_context4","AugustusRFQ","_x4","MinERC20Abi","constant","inputs","type","outputs","payable","stateMutability","approveTokenMethodFactory","contractCaller","amount","tokenAddress","overrides","spender","transactCall","address","abi","contractMethod","args","constructApproveToken","options","_constructGetSpender","approveToken","approveTokenBulk","tokenAddresses","Promise","all","constructToken","tokenProps","_tokenProps$tokenType","tokenType","_tokenProps$mainConne","mainConnector","_tokenProps$connector","connectors","connectorsInput","_tokenProps$network","rest","_objectWithoutPropertiesLoose","_excluded","_extends","NOT_FOUND_RESPONSE","constructGetBalances","tokensUrl","getBalances","userAddress","tokens","getBalance","tokenAddressOrSymbol","token","_x5","getAllowances","tokenAddressesLowercaseSet","allowances","Set","toLowerCase","has","_ref5$allowance","allowance","_x6","_x7","_x8","getAllowance","_ref6","balanceOrNotFound","_balanceOrNotFound$al","_x9","_x10","_x11","constructGetAdapters","getAdapters","query","normalizeRateOptions","_ref$options","restInput","excludeContractMethods","includeContractMethods","partner","includeDEXS","excludeDEXS","excludePools","restOptions","_excluded2","_map","join","transformed","constructGetRate","pricesUrl","getRate","srcToken","destToken","parsedOptions","search","priceRoute","getRateByRoute","route","_route","constructSwapTx","getSwapTxData","constructGetTokens","getTokens","ZERO_ADDRESS","baseFetchUrlGetterFactory","orderKind","orderURLpart","sanitizeOrderData","nonceAndMeta","expiry","makerAsset","takerAsset","maker","taker","makerAmount","takerAmount","constructBaseFetchUrlGetter","OrderNFT","buildOrderData","verifyingContract","_ref$nonce","nonce","_makerAssetAddress","_takerAssetAddress","makerAssetId","_ref$takerAssetId","takerAssetId","makerAssetType","takerAssetType","AugustusAddress","_ref$taker","BigInt","assetAddressToUint","types","domain","assetAddress","assetType","_makerAsset","_takerAsset","startsWith","constructBuildTx","transactionsURL","buildTx","params","_params$takeSurplus","side","AmountMismatchError","sanitizedParams","takeSurplus","fetchParams","SwapSide","SELL","assert","areAmountsCorrect","queryParams","orders","order","sanitizedOrder","sanitizeNFTOrderData","sanitizeLimitOrderData","signature","permitMakerAsset","positiveSlippageToUser","slippage","BUY","destAmount","srcAmount","Order","takerInNonce","contractTaker","AppVersion","constructBuildLimitOrder","buildLimitOrder","buildLimitOrderParams","_options$version","_yield$getContracts","constructSignLimitOrder","signLimitOrder","typedData","typedDataOnly","signTypedDataCall","MinAugustusRFQAbi","internalType","constructCancelLimitOrder","cancelLimitOrder","orderHash","cancelLimitOrderBulk","orderHashes","splitSignature","slice","bytes","Uint8Array","i","parseInt","s","v","r","Array","from","b","padStart","sBytes","compact","encodeEIP_2612PermitFunctionInput","owner","value","deadline","_splitSignature","permitSignature","encodeAddress","encodeUint256","encodeUint8","encodeBytes32","val","encodeDAIlikePermitFunctionInput","holder","_splitSignature2","encodedHolder","encodedSpender","encodedNonce","encodedExpiry","encodedV","encodedR","encodedS","replace","components","constructFillOrderDirectly","fillOrderDirectly","takerPermit","permitTakerAsset","encodedPermitParams","isDaiPermit","constructGetLimitOrders","getBaseFetchURLByEntityType","getLimitOrders","userParams","baseFetchURL","userURL","offset","limit","hideSmallBalances","orderBy","getRequiredBalance","getLimitOrderByHash","constructPostLimitOrder","getBaseFetchURLByOrderType","postTypedOrder","limitOrderWithSignatureAndPermit","postLimitOrder","postP2POrder","constructApproveTokenForLimitOrder","approveMakerTokenForLimitOrder","approveTakerTokenForFillingP2POrderDirectly","approveTakerTokenForLimitOrder","constructGetLimitOrdersContract","getLimitOrdersContract","getTokenTransferProxy","constructBuildLimitOrderTx","buildSwapTx","getSwapAndLimitOrderRate","getLimitOrdersRate","_ref2$options","_options","_checkAndParseOrders","totalTakerAmount","takerAmountString","rateInput","checkAndParseOrders","ContractMethod","simpleBuy","buildLimitOrderTx","_checkAndParseOrders2","fillParams","buildSwapAndLimitOrderTx","_checkAndParseOrders3","destDecimals","_orders$reduce","reduce","accum","takerAssetsSet","add","makerAssetsSet","size","_orders$","constructBuildNFTOrder","buildNFTOrder","buildNFTOrderParams","constructSignNFTOrder","signNFTOrder","constructCancelNFTOrder","_constructCancelLimit","cancelNFTOrder","cancelNFTOrderBulk","constructGetNFTOrders","getNFTOrders","getNFTOrderByHash","constructPostNFTOrder","NFTOrderWithSignatureAndPermit","postNFTLimitOrder","postNFTP2POrder","constructGetNFTOrdersContract","getNFTOrdersContract","MinNFTAbi","constructApproveTokenForNFTOrder","approveERC20ForNFTOrder","approveNFTForNFTOrder","constructBuildNFTOrderTx","getSwapAndNFTOrderRate","getNFTOrdersRate","buildNFTOrderTx","buildSwapAndNFTOrderTx","uintToAssetAddress","assetUint","constructFetcher","axios","extra","headers","allParams","apiKey","t0","fetch","body","POSTheaders","apiHeaders","JSON","stringify","json","ok","statusText","fromEntries","config","constructEthersV5ContractCaller","account","providerOrSigner","ethersProviderOrSigner","Contract","EthersContract","staticCall","_contract$callStatic","contract","block","gas","restOverrides","normalizedOverrides","assertEthersContractHasMethodsV5","blockTag","gasLimit","callStatic","concat","callOverrides","signer","txOverrides","isEthersProviderWithSigner","isEthersSigner","getSigner","isTypedDataCapableSigner","_signTypedData","_isProvider","isEthersProvider","_isSigner","ethersContractHasMethodsV5","_len","methods","_key","every","_len2","_key2","constructContractCaller","ethersV6ProviderOrSigner","EthersV6Contract","callableContractFunction","getFunction","send","signTypedData","baseTypeRegex","findPrimaryType","candidates","keys","candidatesSet","forEach","candidate","typedDataFields","_type$match","baseType","match","primaryType","web3","_contract$methods","currentProvider","assertWeb3ContractHasMethods","eth","_contract$methods2","_from","preparedCall","promiEvent","unpromiEvent","on","bind","once","_typedData","EIP712Domain","web3ContractHasMethods","viemClient","readContract","blockNumber","functionName","_overrides$gas","_overrides$value","viemTxParams","gasPriceParams","writeContract","txParamsToViemTxParams","to","maxFeePerGas","maxPriorityFeePerGas","gasPrice","argsToViemArgs","viemDomain","salt","txParams","arg","asNumber","isNaN","OrderKind","constructGetDeltaContract","getDeltaContract","ParaswapDelta","constructGetPartnerFee","partnerFeeUrl","cachedPartnerFee","Map","getPartnerFee","get","set","SWAP_ORDER_EIP_712_TYPES","Bridge","buildDeltaSignableOrderData","partnerFeeBps","partnerAddress","partnerTakesSurplus","_ref2$beneficiary","beneficiary","expectedAmount","_ref2$deadline","Date","now","_ref2$nonce","_ref2$permit","permit","kind","_ref2$metadata","metadata","_ref2$partnerTakesSur","paraswapDeltaAddress","bridge","orderInput","partnerAndFee","toFixed","SwapSideToOrderKind","_SwapSideToOrderKind","Sell","Buy","constructBuildDeltaOrder","buildDeltaOrder","_options$partnerFeeBp","_options$side","_options$nonce","feeOrTakeSurplusSupplied","_partnerAddress","_partnerFeeBps","_partnerTakesSurplus","partnerFeeResponse","swapSide","input","deltaPrice","partnerFee","constructBuildCrosschainOrderBridge","buildCrosschainOrderBridge","destChainId","destinationChainId","protocolSelector","scalingFactor","protocolData","outputToken","constructPostDeltaOrder","postOrderUrl","postDeltaOrder","postData","deltaOrderToPost","sanitizeDeltaOrderData","constructSignDeltaOrder","signDeltaOrder","constructGetDeltaPrice","_getDeltaPrice","includeAgents","excludeAgents","includeAgentsString","excludeAgentsString","price","getDeltaPrice","constructGetDeltaOrders","baseUrl","getDeltaOrderById","orderId","getDeltaOrderByHash","getDeltaOrders","page","getRequiredBalanceForDeltaLimitOrders","constructApproveTokenForDelta","getParaswapDeltaAddress","deltaContract","approveTokenForDelta","constructGetBridgeInfo","bridgeInfoUrl","getBridgeInfo","supportedTokens","constructGetMulticallHandlers","multicallHandlersUrl","_getMulticallHandlers","getMulticallHandlers","constructIsTokenSupportedInDelta","isTokenSupportedInDelta","supported","constructGetQuote","_getQuote","getQuote","ORDER_CANCELLATIONS_EIP_712_TYPES","OrderCancellations","buildCancelDeltaOrderSignableData","orderIds","constructCancelDeltaOrder","signCancelLimitDeltaOrderRequest","postCancelLimitDeltaOrderRequest","cancelUrl","cancelLimitDeltaOrders","constructPartialSDK","_config$apiURL","_config$version","funcs","sdkSlice","assign","constructSwapSDK","constructSubmitLimitOrder","_constructPostLimitOr","prepareLimitOrder","orderData","orderWithSignature","submitLimitOrder","submitP2POrder","constructAllLimitOrdersHandlers","constructSubmitDeltaOrder","submitDeltaOrder","orderParams","partiallyFillable","referrerAddress","constructAllDeltaOrdersHandlers","deltaOrdersGetters","deltaOrdersContractGetter","bridgeInfo","multicallHandlers","deltaOrdersSubmit","constructSubmitNFTOrder","_constructPostNFTOrde","prepareNFTOrder","submitNFTOrder","constructAllNFTOrdersHandlers","NFTOrdersGetters","ERC20","ERC1155","ERC721","swap","limitOrders","nftOrders","delta","quote","providerOptions","_options$apiURL2","_options$version2","constructAxiosFetcher","constructFetchFetcher","_params$requestParams","_options$apiURL","_constructEthersV5Con","_transactCall","contractTx","hash","_constructEthersV6Con","constructEthersV6ContractCaller","constructViemContractCaller","_constructWeb3Contrac","constructWeb3ContractCaller","resolve","reject","constructSimpleContractCaller"],"mappings":"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"}