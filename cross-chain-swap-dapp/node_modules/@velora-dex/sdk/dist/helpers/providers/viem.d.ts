import type { Address, ContractCallerFunctions } from '../../types';
import { MarkOptional } from 'ts-essentials';
import type { PublicActions, WalletActions, Hex, Chain, Transport, Account } from 'viem';
import { TransactionParams } from '../../methods/swap/transaction';
export type MinViemClient = Partial<Pick<PublicActions<Transport, Chain>, 'readContract'> & Pick<WalletActions<Chain>, 'writeContract' | 'signTypedData' | 'signMessage'>> & {
    account?: Account;
};
export declare const constructContractCaller: (viemClient: MinViemClient, account?: Address) => ContractCallerFunctions<Hex>;
type ViemTxParams = {
    to: Hex;
    data?: Hex;
    value?: bigint;
    nonce?: number;
    gas?: bigint;
} & ({
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
} | {
    gasPrice?: bigint;
});
export declare function txParamsToViemTxParams(txParams: Omit<MarkOptional<TransactionParams, 'data' | 'value'>, 'chainId' | 'from'>): ViemTxParams;
export {};
//# sourceMappingURL=viem.d.ts.map